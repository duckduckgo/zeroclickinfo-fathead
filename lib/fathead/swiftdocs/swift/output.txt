AnyForwardIndex	A										<pre><code>struct AnyForwardIndex</code></pre>A wrapper over an underlying <code>ForwardIndexType</code> that hides\nthe specific underlying type.\n<strong>See Also:</strong> <code>AnyForwardCollection</code>	http://swiftdoc.org/v2.2/type/AnyForwardIndex/
AnyForwardIndex.successor	A										Returns the next consecutive value in a discrete sequence of\n<code>AnyForwardIndex</code> values.\n<strong>Requires:</strong> <code>self</code> has a well-defined successor.\n    Declaration    \n    <code>func successor() -&gt; AnyForwardIndex</code>	http://swiftdoc.org/v2.2/type/AnyForwardIndex/#func-successor
successor	R	AnyForwardIndex.successor										
CVaListPointer	A										<pre><code>struct CVaListPointer</code></pre>The corresponding Swift type to <code>va_list</code> in imported C APIs.	http://swiftdoc.org/v2.2/type/CVaListPointer/
CVaListPointer.debugDescription	A										A textual representation of <code>self</code>, suitable for debugging.\n    Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/CVaListPointer/#var-debugdescription_-string
debugDescription	R	CVaListPointer.debugDescription										
DictionaryIndex	A										<pre><code>struct DictionaryIndex&lt;Key : Hashable, Value&gt;</code></pre>Used to access the key-value pairs in an instance of\n<code>Dictionary&lt;Key, Value&gt;</code>.\nDictionary has two subscripting interfaces:\nSubscripting with a key, yielding an optional value:   v = d[k]!Subscripting with an index, yielding a key-value pair:   (k,v) = d[i]	http://swiftdoc.org/v2.2/type/DictionaryIndex/
DictionaryIndex.successor	A										Returns the next consecutive value after <code>self</code>.\n<strong>Requires:</strong> The next value is representable.\n    Declaration    \n    <code>func successor() -&gt; DictionaryIndex&lt;Key, Value&gt;</code>	http://swiftdoc.org/v2.2/type/DictionaryIndex/#func-successor
successor	R	DictionaryIndex.successor										
Bool	A										<pre><code>struct Bool</code></pre>A value type whose instances are either <code>true</code> or <code>false</code>.	http://swiftdoc.org/v2.2/type/Bool/
Bool.boolValue	A										Identical to <code>self</code>.\n    Declaration    \n    <code>var boolValue: Bool { get }</code>	http://swiftdoc.org/v2.2/type/Bool/#var-boolvalue_-bool
Bool.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/Bool/#var-description_-string
Bool.hashValue	A										The hash value.\n<strong>Axiom:</strong> <code>x == y</code> implies <code>x.hashValue == y.hashValue</code>.\n<strong>Note:</strong> the hash value is not guaranteed to be stable across\n  different invocations of the same program.  Do not persist the\n  hash value across program runs.\n    Declaration    \n    <code>var hashValue: Int { get }</code>	http://swiftdoc.org/v2.2/type/Bool/#var-hashvalue_-int
boolValue	R	Bool.boolValue										
description	R	Bool.description										
hashValue	R	Bool.hashValue										
COpaquePointer	A										<pre><code>struct COpaquePointer</code></pre>A wrapper around an opaque C pointer.\nOpaque pointers are used to represent C pointers to types that\ncannot be represented in Swift, such as incomplete struct types.	http://swiftdoc.org/v2.2/type/COpaquePointer/
COpaquePointer.debugDescription	A										A textual representation of <code>self</code>, suitable for debugging.\n    Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/COpaquePointer/#var-debugdescription_-string
COpaquePointer.hashValue	A										The hash value.\n<strong>Axiom:</strong> <code>x == y</code> implies <code>x.hashValue == y.hashValue</code>.\n<strong>Note:</strong> The hash value is not guaranteed to be stable across\n  different invocations of the same program.  Do not persist the\n  hash value across program runs.\n    Declaration    \n    <code>var hashValue: Int { get }</code>	http://swiftdoc.org/v2.2/type/COpaquePointer/#var-hashvalue_-int
debugDescription	R	COpaquePointer.debugDescription										
hashValue	R	COpaquePointer.hashValue										
ObjectIdentifier	A										<pre><code>struct ObjectIdentifier</code></pre>A unique identifier for a class instance or metatype. This can be used by\nreflection clients to recognize cycles in the object graph.\nIn Swift, only class instances and metatypes have unique identities. There\nis no notion of identity for structs, enums, functions, or tuples.	http://swiftdoc.org/v2.2/type/ObjectIdentifier/
ObjectIdentifier.hashValue	A										The hash value.\n<strong>Axiom:</strong> <code>x == y</code> implies <code>x.hashValue == y.hashValue</code>.\n<strong>Note:</strong> The hash value is not guaranteed to be stable across\n  different invocations of the same program.  Do not persist the\n  hash value across program runs.\n    Declaration    \n    <code>var hashValue: Int { get }</code>	http://swiftdoc.org/v2.2/type/ObjectIdentifier/#var-hashvalue_-int
ObjectIdentifier.uintValue	A										Convert to a <code>UInt</code> that captures the full value of <code>self</code>.\nAxiom: <code>a.uintValue == b.uintValue</code> iff <code>a == b</code>.\n    Declaration    \n    <code>var uintValue: UInt { get }</code>	http://swiftdoc.org/v2.2/type/ObjectIdentifier/#var-uintvalue_-uint
hashValue	R	ObjectIdentifier.hashValue										
uintValue	R	ObjectIdentifier.uintValue										
FloatingPointClassification	A										<pre><code>enum FloatingPointClassification</code></pre>The set of possible IEEE 754 &quot;classes&quot;	http://swiftdoc.org/v2.2/type/FloatingPointClassification/
SetGenerator	A										<pre><code>struct SetGenerator&lt;Element : Hashable&gt;</code></pre>A generator over the members of a <code>Set&lt;Element&gt;</code>.	http://swiftdoc.org/v2.2/type/SetGenerator/
SetGenerator.next	A										Advance to the next element and return it, or <code>nil</code> if no next\nelement exists.\n<strong>Requires:</strong> No preceding call to <code>self.next()</code> has returned <code>nil</code>.\n    Declaration    \n    <code>mutating func next() -&gt; Element?</code>	http://swiftdoc.org/v2.2/type/SetGenerator/#func-next
next	R	SetGenerator.next										
SetIndex	A										<pre><code>struct SetIndex&lt;Element : Hashable&gt;</code></pre>Used to access the members in an instance of <code>Set&lt;Element&gt;</code>.	http://swiftdoc.org/v2.2/type/SetIndex/
SetIndex.successor	A										Returns the next consecutive value after <code>self</code>.\n<strong>Requires:</strong> The next value is representable.\n    Declaration    \n    <code>func successor() -&gt; SetIndex&lt;Element&gt;</code>	http://swiftdoc.org/v2.2/type/SetIndex/#func-successor
successor	R	SetIndex.successor										
NonObjectiveCBase	A										<pre><code>class NonObjectiveCBase</code></pre>A common base class for classes that need to be non-<code>@objc</code>,\nrecognizably in the type system.\n<strong>See Also:</strong> <code>isUniquelyReferenced</code>	http://swiftdoc.org/v2.2/type/NonObjectiveCBase/
StrideThroughGenerator	A										<pre><code>struct StrideThroughGenerator&lt;Element : Strideable&gt;</code></pre>A <code>GeneratorType</code> for <code>StrideThrough&lt;Element&gt;</code>.	http://swiftdoc.org/v2.2/type/StrideThroughGenerator/
StrideThroughGenerator.next	A										Advance to the next element and return it, or <code>nil</code> if no next\nelement exists.\n    Declaration    \n    <code>mutating func next() -&gt; Element?</code>	http://swiftdoc.org/v2.2/type/StrideThroughGenerator/#func-next
next	R	StrideThroughGenerator.next										
String.UnicodeScalarView.Index	A										<pre><code>struct String.UnicodeScalarView.Index</code></pre>A position in a <code>String.UnicodeScalarView</code>.	http://swiftdoc.org/v2.2/type/String.UnicodeScalarView.Index/
String.UnicodeScalarView.Index.predecessor	A										Returns the previous consecutive value before <code>self</code>.\n<strong>Requires:</strong> The previous value is representable.\n    Declaration    \n    <code>func predecessor() -&gt; String.UnicodeScalarView.Index</code>	http://swiftdoc.org/v2.2/type/String.UnicodeScalarView.Index/#func-predecessor
String.UnicodeScalarView.Index.successor	A										Returns the next consecutive value after <code>self</code>.\n<strong>Requires:</strong> The next value is representable.\n    Declaration    \n    <code>func successor() -&gt; String.UnicodeScalarView.Index</code>	http://swiftdoc.org/v2.2/type/String.UnicodeScalarView.Index/#func-successor
Index	R	String.UnicodeScalarView.Index										
predecessor	R	String.UnicodeScalarView.Index.predecessor										
successor	R	String.UnicodeScalarView.Index.successor										
Zip2Generator	A										<pre><code>struct Zip2Generator&lt;Generator1 : GeneratorType, Generator2 : GeneratorType&gt;</code></pre>A generator for <code>Zip2Sequence</code>.	http://swiftdoc.org/v2.2/type/Zip2Generator/
Zip2Generator.next	A										Advance to the next element and return it, or <code>nil</code> if no next\nelement exists.\n<strong>Requires:</strong> <code>next()</code> has not been applied to a copy of <code>self</code>\n  since the copy was made, and no preceding call to <code>self.next()</code>\n  has returned <code>nil</code>.\n    Declaration    \n    <code>mutating func next() -&gt; (Generator1.Element, Generator2.Element)?</code>	http://swiftdoc.org/v2.2/type/Zip2Generator/#func-next
next	R	Zip2Generator.next										
RawRepresentable	A										<pre><code>protocol RawRepresentable</code></pre>A type that can be converted to an associated &quot;raw&quot; type, then\nconverted back to produce an instance equivalent to the original.	http://swiftdoc.org/v2.2/protocol/RawRepresentable/
RawRepresentable.rawValue	A										The corresponding value of the &quot;raw&quot; type.\n<code>Self(rawValue: self.rawValue)!</code> is equivalent to <code>self</code>.\n    Declaration    \n    <code>var rawValue: Self.RawValue { get }</code>	http://swiftdoc.org/v2.2/protocol/RawRepresentable/#var-rawvalue_-self-rawvalue
rawValue	R	RawRepresentable.rawValue										
StringLiteralConvertible	A										<pre><code>protocol StringLiteralConvertible</code></pre>Conforming types can be initialized with arbitrary string literals.	http://swiftdoc.org/v2.2/protocol/StringLiteralConvertible/
Operator: !==	A										<pre><code>infix operator !== {\n    associativity none\n    precedence 130\n}</code></pre>	http://swiftdoc.org/v2.2/operator/excleqeq/
StringInterpolationConvertible	A										<pre><code>protocol StringInterpolationConvertible</code></pre>Conforming types can be initialized with string interpolations\ncontaining <code>\(</code>...<code>)</code> clauses.	http://swiftdoc.org/v2.2/protocol/StringInterpolationConvertible/
Operator: %=	A										<pre><code>infix operator %= {\n    associativity right\n    precedence 90\n    assignment\n}</code></pre>	http://swiftdoc.org/v2.2/operator/pcteq/
GeneratorType	A										<pre><code>protocol GeneratorType</code></pre>Encapsulates iteration state and interface for iteration over a\nsequence.\n<strong>Note:</strong> While it is safe to copy a generator, advancing one\n  copy may invalidate the others.\nAny code that uses multiple generators (or <code>for</code>...<code>in</code> loops)\nover a single sequence should have static knowledge that the\nspecific sequence is multi-pass, either because its concrete\ntype is known or because it is constrained to <code>CollectionType</code>.\nAlso, the generators must be obtained by distinct calls to the\nsequence's <code>generate()</code> method, rather than by copying.	http://swiftdoc.org/v2.2/protocol/GeneratorType/
GeneratorType.next	A										Advance to the next element and return it, or <code>nil</code> if no next\nelement exists.\n<strong>Requires:</strong> <code>next()</code> has not been applied to a copy of <code>self</code>\n  since the copy was made, and no preceding call to <code>self.next()</code>\n  has returned <code>nil</code>.  Specific implementations of this protocol\n  are encouraged to respond to violations of this requirement by\n  calling <code>preconditionFailure(&quot;...&quot;)</code>.\n    Declaration    \n    <code>mutating func next() -&gt; Self.Element?</code>	http://swiftdoc.org/v2.2/protocol/GeneratorType/#func-next
next	R	GeneratorType.next										
UnicodeScalarLiteralConvertible	A										<pre><code>protocol UnicodeScalarLiteralConvertible</code></pre>Conforming types can be initialized with string literals\ncontaining a single Unicode scalar value.	http://swiftdoc.org/v2.2/protocol/UnicodeScalarLiteralConvertible/
Operator: prefix -	A										<pre><code>prefix operator prefix - {\n    associativity \n    precedence \n}</code></pre>	http://swiftdoc.org/v2.2/operator/prefix_mns/
Operator: ~=	A										<pre><code>infix operator ~= {\n    associativity none\n    precedence 130\n}</code></pre>	http://swiftdoc.org/v2.2/operator/tildeeq/
Operator: |=	A										<pre><code>infix operator |= {\n    associativity right\n    precedence 90\n    assignment\n}</code></pre>	http://swiftdoc.org/v2.2/operator/bareq/
Operator: prefix +	A										<pre><code>prefix operator prefix + {\n    associativity \n    precedence \n}</code></pre>	http://swiftdoc.org/v2.2/operator/prefix_pls/
Operator: ||	A										<pre><code>infix operator || {\n    associativity left\n    precedence 110\n}</code></pre>	http://swiftdoc.org/v2.2/operator/barbar/
PlaygroundQuickLook	A										<pre><code>enum PlaygroundQuickLook</code></pre>The sum of types that can be used as a quick look representation.	http://swiftdoc.org/v2.2/type/PlaygroundQuickLook/
Float	A										<pre><code>struct Float</code></pre>A single-precision floating-point value type.	http://swiftdoc.org/v2.2/type/Float/
Float.abs	A										Returns the absolute value of <code>x</code>.\n    Declaration    \n    <code>static func abs(x: Float) -&gt; Float</code>	http://swiftdoc.org/v2.2/type/Float/#func-abs_
Float.advancedBy	A										Returns a <code>Self</code> <code>x</code> such that <code>self.distanceTo(x)</code> approximates\n<code>n</code>.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func advancedBy(amount: Float) -&gt; Float</code>	http://swiftdoc.org/v2.2/type/Float/#func-advancedby_
Float.distanceTo	A										Returns a stride <code>x</code> such that <code>self.advancedBy(x)</code> approximates\n<code>other</code>.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func distanceTo(other: Float) -&gt; Float</code>	http://swiftdoc.org/v2.2/type/Float/#func-distanceto_
Float.NaN	A										A quiet NaN.\n    Declaration    \n    <code>static var NaN: Float { get }</code>	http://swiftdoc.org/v2.2/type/Float/#static-var-nan_-float
Float.infinity	A										The positive infinity.\n    Declaration    \n    <code>static var infinity: Float { get }</code>	http://swiftdoc.org/v2.2/type/Float/#static-var-infinity_-float
Float.quietNaN	A										A quiet NaN.\n    Declaration    \n    <code>static var quietNaN: Float { get }</code>	http://swiftdoc.org/v2.2/type/Float/#static-var-quietnan_-float
Float.NaN	A										A quiet NaN.\n    Declaration    \n    <code>static var NaN: Float { get }</code>	http://swiftdoc.org/v2.2/type/Float/#static-var-nan_-float
Float.infinity	A										The positive infinity.\n    Declaration    \n    <code>static var infinity: Float { get }</code>	http://swiftdoc.org/v2.2/type/Float/#static-var-infinity_-float
Float.quietNaN	A										A quiet NaN.\n    Declaration    \n    <code>static var quietNaN: Float { get }</code>	http://swiftdoc.org/v2.2/type/Float/#static-var-quietnan_-float
Float.debugDescription	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/Float/#var-debugdescription_-string
Float.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/Float/#var-description_-string
Float.floatingPointClass	A										The IEEE 754 &quot;class&quot; of this type.\n    Declaration    \n    <code>var floatingPointClass: FloatingPointClassification { get }</code>	http://swiftdoc.org/v2.2/type/Float/#var-floatingpointclass_-floatingpointclassification
Float.hashValue	A										The hash value.\n<strong>Axiom:</strong> <code>x == y</code> implies <code>x.hashValue == y.hashValue</code>.\n<strong>Note:</strong> The hash value is not guaranteed to be stable across\n  different invocations of the same program.  Do not persist the\n  hash value across program runs.\n    Declaration    \n    <code>var hashValue: Int { get }</code>	http://swiftdoc.org/v2.2/type/Float/#var-hashvalue_-int
Float.isFinite	A										<code>true</code> iff <code>self</code> is zero, subnormal, or normal (not infinity\nor NaN).\n    Declaration    \n    <code>var isFinite: Bool { get }</code>	http://swiftdoc.org/v2.2/type/Float/#var-isfinite_-bool
Float.isInfinite	A										<code>true</code> iff <code>self</code> is infinity.\n    Declaration    \n    <code>var isInfinite: Bool { get }</code>	http://swiftdoc.org/v2.2/type/Float/#var-isinfinite_-bool
Float.isNaN	A										<code>true</code> iff <code>self</code> is NaN.\n    Declaration    \n    <code>var isNaN: Bool { get }</code>	http://swiftdoc.org/v2.2/type/Float/#var-isnan_-bool
Float.isNormal	A										<code>true</code> iff <code>self</code> is normal (not zero, subnormal, infinity, or\nNaN).\n    Declaration    \n    <code>var isNormal: Bool { get }</code>	http://swiftdoc.org/v2.2/type/Float/#var-isnormal_-bool
Float.isSignMinus	A										<code>true</code> iff <code>self</code> is negative.\n    Declaration    \n    <code>var isSignMinus: Bool { get }</code>	http://swiftdoc.org/v2.2/type/Float/#var-issignminus_-bool
Float.isSignaling	A										<code>true</code> iff <code>self</code> is a signaling NaN.\n    Declaration    \n    <code>var isSignaling: Bool { get }</code>	http://swiftdoc.org/v2.2/type/Float/#var-issignaling_-bool
Float.isSubnormal	A										<code>true</code> iff <code>self</code> is subnormal.\n    Declaration    \n    <code>var isSubnormal: Bool { get }</code>	http://swiftdoc.org/v2.2/type/Float/#var-issubnormal_-bool
Float.isZero	A										<code>true</code> iff <code>self</code> is +0.0 or -0.0.\n    Declaration    \n    <code>var isZero: Bool { get }</code>	http://swiftdoc.org/v2.2/type/Float/#var-iszero_-bool
abs	R	Float.abs										
advancedBy	R	Float.advancedBy										
distanceTo	R	Float.distanceTo										
NaN	R	Float.NaN										
infinity	R	Float.infinity										
quietNaN	R	Float.quietNaN										
NaN	R	Float.NaN										
infinity	R	Float.infinity										
quietNaN	R	Float.quietNaN										
debugDescription	R	Float.debugDescription										
description	R	Float.description										
floatingPointClass	R	Float.floatingPointClass										
hashValue	R	Float.hashValue										
isFinite	R	Float.isFinite										
isInfinite	R	Float.isInfinite										
isNaN	R	Float.isNaN										
isNormal	R	Float.isNormal										
isSignMinus	R	Float.isSignMinus										
isSignaling	R	Float.isSignaling										
isSubnormal	R	Float.isSubnormal										
isZero	R	Float.isZero										
Strideable	A										<pre><code>protocol Strideable</code></pre>Conforming types are notionally continuous, one-dimensional\nvalues that can be offset and measured.	http://swiftdoc.org/v2.2/protocol/Strideable/
Strideable.advancedBy	A										Returns a <code>Self</code> <code>x</code> such that <code>self.distanceTo(x)</code> approximates\n<code>n</code>.\n<strong>Complexity:</strong> O(1).\n<strong>See Also:</strong> <code>RandomAccessIndexType</code>'s <code>advancedBy</code>, which\n  provides a stronger semantic guarantee.\n    Declaration    \n    <code>func advancedBy(n: Self.Stride) -&gt; Self</code>	http://swiftdoc.org/v2.2/protocol/Strideable/#func-advancedby_
Strideable.distanceTo	A										Returns a stride <code>x</code> such that <code>self.advancedBy(x)</code> approximates\n<code>other</code>.\n<strong>Complexity:</strong> O(1).\n<strong>See Also:</strong> <code>RandomAccessIndexType</code>'s <code>distanceTo</code>, which provides a\n  stronger semantic guarantee.\n    Declaration    \n    <code>func distanceTo(other: Self) -&gt; Self.Stride</code>	http://swiftdoc.org/v2.2/protocol/Strideable/#func-distanceto_
Strideable.stride	A										Returns the sequence of values (<code>self</code>, <code>self + stride</code>, <code>self +\nstride + stride</code>, ... last) where last is the last value in\nthe progression less than or equal to <code>end</code>.\n<strong>Note:</strong> There is no guarantee that <code>end</code> is an element of the sequence.\n    Declaration    \n    <code>func stride(through end: Self, by stride: Self.Stride) -&gt; StrideThrough&lt;Self&gt;</code>	http://swiftdoc.org/v2.2/protocol/Strideable/#func--stride-through_by_
Strideable.stride	A										Returns the sequence of values (<code>self</code>, <code>self + stride</code>, <code>self +\nstride + stride</code>, ... last) where last is the last value in\nthe progression that is less than <code>end</code>.\n    Declaration    \n    <code>func stride(to end: Self, by stride: Self.Stride) -&gt; StrideTo&lt;Self&gt;</code>	http://swiftdoc.org/v2.2/protocol/Strideable/#func--stride-to_by_
advancedBy	R	Strideable.advancedBy										
distanceTo	R	Strideable.distanceTo										
stride	R	Strideable.stride										
stride	R	Strideable.stride										
Operator: prefix --	A										<pre><code>prefix operator prefix -- {\n    associativity \n    precedence \n}</code></pre>	http://swiftdoc.org/v2.2/operator/prefix_mnsmns/
Operator: prefix ++	A										<pre><code>prefix operator prefix ++ {\n    associativity \n    precedence \n}</code></pre>	http://swiftdoc.org/v2.2/operator/prefix_plspls/
EnumerateGenerator	A										<pre><code>struct EnumerateGenerator&lt;Base : GeneratorType&gt;</code></pre>The <code>GeneratorType</code> for <code>EnumerateSequence</code>.  <code>EnumerateGenerator</code>\nwraps a <code>Base</code> <code>GeneratorType</code> and yields successive <code>Int</code> values,\nstarting at zero, along with the elements of the underlying\n<code>Base</code>:\n<pre><code>var g = EnumerateGenerator([&quot;foo&quot;, &quot;bar&quot;].generate())\ng.next() // (0, &quot;foo&quot;)\ng.next() // (1, &quot;bar&quot;)\ng.next() // nil</code></pre>\n<strong>Note:</strong> Idiomatic usage is to call <code>enumerate</code> instead of\n  constructing an <code>EnumerateGenerator</code> directly.	http://swiftdoc.org/v2.2/type/EnumerateGenerator/
EnumerateGenerator.next	A										Advance to the next element and return it, or <code>nil</code> if no next\nelement exists.\n<strong>Requires:</strong> No preceding call to <code>self.next()</code> has returned <code>nil</code>.\n    Declaration    \n    <code>mutating func next() -&gt; (index: Int, element: Base.Element)?</code>	http://swiftdoc.org/v2.2/type/EnumerateGenerator/#func-next
next	R	EnumerateGenerator.next										
Int	A										<pre><code>struct Int</code></pre>A 64-bit signed integer value\ntype.	http://swiftdoc.org/v2.2/type/Int/
Int.addWithOverflow	A										Add <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func addWithOverflow(lhs: Int, _ rhs: Int) -&gt; (Int, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Int/#func-addwithoverflow__
Int.divideWithOverflow	A										Divide <code>lhs</code> and <code>rhs</code>, returning\na result and a <code>Bool</code>\nthat is <code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func divideWithOverflow(lhs: Int, _ rhs: Int) -&gt; (Int, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Int/#func-dividewithoverflow__
Int.multiplyWithOverflow	A										Multiply <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func multiplyWithOverflow(lhs: Int, _ rhs: Int) -&gt; (Int, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Int/#func-multiplywithoverflow__
Int.remainderWithOverflow	A										Divide <code>lhs</code> and <code>rhs</code>, returning\nthe remainder and a <code>Bool</code>\nthat is <code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func remainderWithOverflow(lhs: Int, _ rhs: Int) -&gt; (Int, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Int/#func-remainderwithoverflow__
Int.subtractWithOverflow	A										Subtract <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func subtractWithOverflow(lhs: Int, _ rhs: Int) -&gt; (Int, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Int/#func-subtractwithoverflow__
Int.predecessor	A										Returns the previous consecutive value before <code>self</code>.\n<strong>Requires:</strong> The previous value is representable.\n    Declaration    \n    <code>func predecessor() -&gt; Int</code>	http://swiftdoc.org/v2.2/type/Int/#func-predecessor
Int.successor	A										Returns the next consecutive value after <code>self</code>.\n<strong>Requires:</strong> The next value is representable.\n    Declaration    \n    <code>func successor() -&gt; Int</code>	http://swiftdoc.org/v2.2/type/Int/#func-successor
Int.toIntMax	A										Represent this number using Swift's widest native signed\ninteger type.\n    Declaration    \n    <code>func toIntMax() -&gt; IntMax</code>	http://swiftdoc.org/v2.2/type/Int/#func-tointmax
Int.allZeros	A										The empty bitset of type Int.\n    Declaration    \n    <code>static var allZeros: Int { get }</code>	http://swiftdoc.org/v2.2/type/Int/#static-var-allzeros_-int
Int.max	A										Declaration    \n    <code>static var max: Int { get }</code>	http://swiftdoc.org/v2.2/type/Int/#static-var-max_-int
Int.min	A										Declaration    \n    <code>static var min: Int { get }</code>	http://swiftdoc.org/v2.2/type/Int/#static-var-min_-int
Int.allZeros	A										The empty bitset of type Int.\n    Declaration    \n    <code>static var allZeros: Int { get }</code>	http://swiftdoc.org/v2.2/type/Int/#static-var-allzeros_-int
Int.max	A										Declaration    \n    <code>static var max: Int { get }</code>	http://swiftdoc.org/v2.2/type/Int/#static-var-max_-int
Int.min	A										Declaration    \n    <code>static var min: Int { get }</code>	http://swiftdoc.org/v2.2/type/Int/#static-var-min_-int
Int.bigEndian	A										Returns the big-endian representation of the integer, changing the\nbyte order if necessary.\n    Declaration    \n    <code>var bigEndian: Int { get }</code>	http://swiftdoc.org/v2.2/type/Int/#var-bigendian_-int
Int.byteSwapped	A										Returns the current integer with the byte order swapped.\n    Declaration    \n    <code>var byteSwapped: Int { get }</code>	http://swiftdoc.org/v2.2/type/Int/#var-byteswapped_-int
Int.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/Int/#var-description_-string
Int.hashValue	A										The hash value.\n<strong>Axiom:</strong> <code>x == y</code> implies <code>x.hashValue == y.hashValue</code>.\n<strong>Note:</strong> The hash value is not guaranteed to be stable across\n  different invocations of the same program.  Do not persist the\n  hash value across program runs.\n    Declaration    \n    <code>var hashValue: Int { get }</code>	http://swiftdoc.org/v2.2/type/Int/#var-hashvalue_-int
Int.littleEndian	A										Returns the little-endian representation of the integer, changing the\nbyte order if necessary.\n    Declaration    \n    <code>var littleEndian: Int { get }</code>	http://swiftdoc.org/v2.2/type/Int/#var-littleendian_-int
addWithOverflow	R	Int.addWithOverflow										
divideWithOverflow	R	Int.divideWithOverflow										
multiplyWithOverflow	R	Int.multiplyWithOverflow										
remainderWithOverflow	R	Int.remainderWithOverflow										
subtractWithOverflow	R	Int.subtractWithOverflow										
predecessor	R	Int.predecessor										
successor	R	Int.successor										
toIntMax	R	Int.toIntMax										
allZeros	R	Int.allZeros										
max	R	Int.max										
min	R	Int.min										
allZeros	R	Int.allZeros										
max	R	Int.max										
min	R	Int.min										
bigEndian	R	Int.bigEndian										
byteSwapped	R	Int.byteSwapped										
description	R	Int.description										
hashValue	R	Int.hashValue										
littleEndian	R	Int.littleEndian										
FlattenGenerator	A										<pre><code>struct FlattenGenerator&lt;Base : GeneratorType where Base.Element : SequenceType&gt;</code></pre>A flattened view of a base generator-of-sequences.\nThe elements generated are the concatenation of those in each\nsequence generated by the base generator.\n<strong>Note:</strong> This is the <code>GeneratorType</code> used by <code>FlattenSequence</code>,\n  <code>FlattenCollection</code>, and <code>BidirectionalFlattenCollection</code>.	http://swiftdoc.org/v2.2/type/FlattenGenerator/
FlattenGenerator.next	A										Advance to the next element and return it, or <code>nil</code> if no next\nelement exists.\n<strong>Requires:</strong> <code>next()</code> has not been applied to a copy of <code>self</code>\n  since the copy was made, and no preceding call to <code>self.next()</code>\n  has returned <code>nil</code>.\n    Declaration    \n    <code>mutating func next() -&gt; Base.Element.Generator.Element?</code>	http://swiftdoc.org/v2.2/type/FlattenGenerator/#func-next
next	R	FlattenGenerator.next										
Dictionary	A										<pre><code>struct Dictionary&lt;Key : Hashable, Value&gt;</code></pre>A hash-based mapping from <code>Key</code> to <code>Value</code> instances.  Also a\ncollection of key-value pairs with no defined ordering.	http://swiftdoc.org/v2.2/type/Dictionary/
Dictionary.generate	A										Returns a generator over the (key, value) pairs.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; DictionaryGenerator&lt;Key, Value&gt;</code>	http://swiftdoc.org/v2.2/type/Dictionary/#func-generate
Dictionary.indexForKey	A										Returns the <code>Index</code> for the given key, or <code>nil</code> if the key is not\npresent in the dictionary.\n    Declaration    \n    <code>func indexForKey(key: Key) -&gt; DictionaryIndex&lt;Key, Value&gt;?</code>	http://swiftdoc.org/v2.2/type/Dictionary/#func-indexforkey_
Dictionary.popFirst	A										If <code>!self.isEmpty</code>, return the first key-value pair in the sequence of\nelements, otherwise return <code>nil</code>.\n<strong>Complexity:</strong> Amortized O(1)\n    Declaration    \n    <code>mutating func popFirst() -&gt; (Key, Value)?</code>	http://swiftdoc.org/v2.2/type/Dictionary/#func-popfirst
Dictionary.removeAll	A										Removes all elements.\n<strong>Postcondition:</strong> <code>capacity == 0</code> if <code>keepCapacity</code> is <code>false</code>, otherwise\n  the capacity will not be decreased.\nInvalidates all indices with respect to <code>self</code>.\n<strong><code>keepCapacity</code>:</strong>  If <code>true</code>, the operation preserves the\n  storage capacity that the collection has, otherwise the underlying\n  storage is released.  The default is <code>false</code>.\nComplexity: O(<code>self.count</code>).\n    Declaration    \n    <code>mutating func removeAll(keepCapacity keepCapacity: Bool = default)</code>	http://swiftdoc.org/v2.2/type/Dictionary/#func-removeall-keepcapacity_
Dictionary.removeAtIndex	A										Remove the key-value pair at <code>index</code>.\nInvalidates all indices with respect to <code>self</code>.\n<strong>Complexity:</strong> O(<code>self.count</code>).\n    Declaration    \n    <code>mutating func removeAtIndex(index: DictionaryIndex&lt;Key, Value&gt;) -&gt; (Key, Value)</code>	http://swiftdoc.org/v2.2/type/Dictionary/#func-removeatindex_
Dictionary.removeValueForKey	A										Remove a given key and the associated value from the dictionary.\nReturns the value that was removed, or <code>nil</code> if the key was not present\nin the dictionary.\n    Declaration    \n    <code>mutating func removeValueForKey(key: Key) -&gt; Value?</code>	http://swiftdoc.org/v2.2/type/Dictionary/#func-removevalueforkey_
Dictionary.updateValue	A										Update the value stored in the dictionary for the given key, or, if the\nkey does not exist, add a new key-value pair to the dictionary.\nReturns the value that was replaced, or <code>nil</code> if a new key-value pair\nwas added.\n    Declaration    \n    <code>mutating func updateValue(value: Value, forKey key: Key) -&gt; Value?</code>	http://swiftdoc.org/v2.2/type/Dictionary/#func-updatevalue_forkey_
Dictionary.count	A										The number of entries in the dictionary.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>var count: Int { get }</code>	http://swiftdoc.org/v2.2/type/Dictionary/#var-count_-int
Dictionary.debugDescription	A										A textual representation of <code>self</code>, suitable for debugging.\n    Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/Dictionary/#var-debugdescription_-string
Dictionary.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/Dictionary/#var-description_-string
Dictionary.endIndex	A										The collection's &quot;past the end&quot; position.\n<code>endIndex</code> is not a valid argument to <code>subscript</code>, and is always\nreachable from <code>startIndex</code> by zero or more applications of\n<code>successor()</code>.\n<strong>Complexity:</strong> Amortized O(1) if <code>self</code> does not wrap a bridged\n  <code>NSDictionary</code>, O(N) otherwise.\n    Declaration    \n    <code>var endIndex: DictionaryIndex&lt;Key, Value&gt; { get }</code>	http://swiftdoc.org/v2.2/type/Dictionary/#var-endindex_-dictionaryindex-key-value
Dictionary.keys	A										A collection containing just the keys of <code>self</code>.\nKeys appear in the same order as they occur as the <code>.0</code> member\nof key-value pairs in <code>self</code>.  Each key in the result has a\nunique value.\n    Declaration    \n    <code>var keys: LazyMapCollection&lt;[Key : Value], Key&gt; { get }</code>	http://swiftdoc.org/v2.2/type/Dictionary/#var-keys_-lazymapcollection-key_-value-key
Dictionary.startIndex	A										The position of the first element in a non-empty dictionary.\nIdentical to <code>endIndex</code> in an empty dictionary.\n<strong>Complexity:</strong> Amortized O(1) if <code>self</code> does not wrap a bridged\n  <code>NSDictionary</code>, O(N) otherwise.\n    Declaration    \n    <code>var startIndex: DictionaryIndex&lt;Key, Value&gt; { get }</code>	http://swiftdoc.org/v2.2/type/Dictionary/#var-startindex_-dictionaryindex-key-value
Dictionary.values	A										A collection containing just the values of <code>self</code>.\nValues appear in the same order as they occur as the <code>.1</code> member\nof key-value pairs in <code>self</code>.\n    Declaration    \n    <code>var values: LazyMapCollection&lt;[Key : Value], Value&gt; { get }</code>	http://swiftdoc.org/v2.2/type/Dictionary/#var-values_-lazymapcollection-key_-value-value
generate	R	Dictionary.generate										
indexForKey	R	Dictionary.indexForKey										
popFirst	R	Dictionary.popFirst										
removeAll	R	Dictionary.removeAll										
removeAtIndex	R	Dictionary.removeAtIndex										
removeValueForKey	R	Dictionary.removeValueForKey										
updateValue	R	Dictionary.updateValue										
count	R	Dictionary.count										
debugDescription	R	Dictionary.debugDescription										
description	R	Dictionary.description										
endIndex	R	Dictionary.endIndex										
keys	R	Dictionary.keys										
startIndex	R	Dictionary.startIndex										
values	R	Dictionary.values										
AnySequence	A										<pre><code>struct AnySequence&lt;Element&gt;</code></pre>A type-erased sequence.\nForwards operations to an arbitrary underlying sequence having the\nsame <code>Element</code> type, hiding the specifics of the underlying\n<code>SequenceType</code>.\n<strong>See Also:</strong> <code>AnyGenerator&lt;Element&gt;</code>.	http://swiftdoc.org/v2.2/type/AnySequence/
AnySequence.generate	A										Returns a generator over the elements of this sequence.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; AnyGenerator&lt;Element&gt;</code>	http://swiftdoc.org/v2.2/type/AnySequence/#func-generate
generate	R	AnySequence.generate										
Repeat	A										<pre><code>struct Repeat&lt;Element&gt;</code></pre>A collection whose elements are all identical <code>Element</code>s.	http://swiftdoc.org/v2.2/type/Repeat/
Repeat.count	A										The number of elements in this collection.\n    Declaration    \n    <code>var count: Int { get set }</code>	http://swiftdoc.org/v2.2/type/Repeat/#var-count_-int
Repeat.endIndex	A										Always equal to <code>count</code>, which is one greater than the index of\nthe last element in a non-empty instance.\n    Declaration    \n    <code>var endIndex: Index { get }</code>	http://swiftdoc.org/v2.2/type/Repeat/#var-endindex_-index
Repeat.repeatedValue	A										The value of every element in this collection.\n    Declaration    \n    <code>var repeatedValue: Element { get }</code>	http://swiftdoc.org/v2.2/type/Repeat/#var-repeatedvalue_-element
Repeat.startIndex	A										Always zero, which is the index of the first element in a\nnon-empty instance.\n    Declaration    \n    <code>var startIndex: Index { get }</code>	http://swiftdoc.org/v2.2/type/Repeat/#var-startindex_-index
count	R	Repeat.count										
endIndex	R	Repeat.endIndex										
repeatedValue	R	Repeat.repeatedValue										
startIndex	R	Repeat.startIndex										
JoinSequence	A										<pre><code>struct JoinSequence&lt;Base : SequenceType where Base.Generator.Element : SequenceType&gt;</code></pre>A sequence that presents the elements of the <code>Base</code> sequences\nconcatenated using a given separator.	http://swiftdoc.org/v2.2/type/JoinSequence/
JoinSequence.generate	A										Returns a generator over the elements of this sequence.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; JoinGenerator&lt;Base.Generator&gt;</code>	http://swiftdoc.org/v2.2/type/JoinSequence/#func-generate
generate	R	JoinSequence.generate										
MutableSlice	A										<pre><code>struct MutableSlice&lt;Base : MutableIndexable&gt;</code></pre>A view into a sub-sequence of elements of another collection.\nA <code>MutableSlice</code> instance stores the base collection, the start and end indices of\nthe view.  It does not copy the elements from the collection into separate\nstorage. Thus, creating a slice has <code>O(1)</code> complexity.\nA <code>MutableSlice</code> instance inherits the value or reference semantics of the base\ncollection.  That is, if a <code>MutableSlice</code> instance is wrapped around a mutable\ncollection that has value semantics (for example, <code>Array</code>), mutating the\noriginal collection would not affect the copy stored inside of the slice.\nAn element of a slice is located under the same index in the slice and in\nthe base collection, as long as neither the collection or the slice were\nmutated.  Thus, indices of a slice can be used interchangeably with indices\nof the base collection.\n<strong>Warning:</strong> Long-term storage of <code>MutableSlice</code> instances is discouraged.\n  Because a <code>MutableSlice</code> presents a view onto the storage of some larger\n  collection even after the original collection goes out of scope, storing\n  the slice may prolong the lifetime of elements that are no longer\n  accessible, which can manifest as apparent memory and object leakage.  To\n  prevent this effect, use slices only for transient computation.\n<strong>Warning:</strong> <code>MutableSlice</code> requires the setter of <code>Base.subscript(_: Index)</code>\n  to not invalidate indices.  If you are writing a collection and mutations\n  need to invalidate indices, don't use <code>MutableSlice</code>, use <code>Slice</code> or\n  define your own <code>Base.SubSequence</code> type that takes that into account.	http://swiftdoc.org/v2.2/type/MutableSlice/
MutableSlice.endIndex	A										Declaration    \n    <code>var endIndex: Base.Index { get }</code>	http://swiftdoc.org/v2.2/type/MutableSlice/#var-endindex_-base-index
MutableSlice.startIndex	A										Declaration    \n    <code>var startIndex: Base.Index { get }</code>	http://swiftdoc.org/v2.2/type/MutableSlice/#var-startindex_-base-index
endIndex	R	MutableSlice.endIndex										
startIndex	R	MutableSlice.startIndex										
EmptyCollection	A										<pre><code>struct EmptyCollection&lt;Element&gt;</code></pre>A collection whose element type is <code>Element</code> but that is always empty.	http://swiftdoc.org/v2.2/type/EmptyCollection/
EmptyCollection.generate	A										Returns an empty generator.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; EmptyGenerator&lt;Element&gt;</code>	http://swiftdoc.org/v2.2/type/EmptyCollection/#func-generate
EmptyCollection.count	A										The number of elements (always zero).\n    Declaration    \n    <code>var count: Int { get }</code>	http://swiftdoc.org/v2.2/type/EmptyCollection/#var-count_-int
EmptyCollection.endIndex	A										Always zero, just like <code>startIndex</code>.\n    Declaration    \n    <code>var endIndex: Index { get }</code>	http://swiftdoc.org/v2.2/type/EmptyCollection/#var-endindex_-index
EmptyCollection.startIndex	A										Always zero, just like <code>endIndex</code>.\n    Declaration    \n    <code>var startIndex: Index { get }</code>	http://swiftdoc.org/v2.2/type/EmptyCollection/#var-startindex_-index
generate	R	EmptyCollection.generate										
count	R	EmptyCollection.count										
endIndex	R	EmptyCollection.endIndex										
startIndex	R	EmptyCollection.startIndex										
FlattenCollection	A										<pre><code>struct FlattenCollection&lt;Base : CollectionType where Base.Generator.Element : CollectionType&gt;</code></pre>A flattened view of a base collection-of-collections.\nThe elements of this view are a concatenation of the elements of\neach collection in the base.\nThe <code>flatten</code> property is always lazy, but does not implicitly\nconfer laziness on algorithms applied to its result.  In other\nwords, for ordinary collections <code>c</code>:\n<code>c.flatten()</code> does not create new storage<code>c.flatten().map(f)</code> maps eagerly and returns a new array<code>c.lazy.flatten().map(f)</code> maps lazily and returns a <code>LazyMapCollection</code>\n<strong>Note:</strong> The performance of accessing <code>startIndex</code>, <code>first</code>, any methods\n  that depend on <code>startIndex</code>, or of advancing a <code>FlattenCollectionIndex</code>\n  depends on how many empty subcollections are found in the base\n  collection, and may not offer the usual performance given by\n  <code>CollectionType</code> or <code>ForwardIndexType</code>. Be aware, therefore, that\n  general operations on <code>FlattenCollection</code> instances may not have the\n  documented complexity.\n<strong>See Also:</strong> <code>FlattenSequence</code>	http://swiftdoc.org/v2.2/type/FlattenCollection/
FlattenCollection.generate	A										Returns a generator over the elements of this sequence.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; FlattenGenerator&lt;Base.Generator&gt;</code>	http://swiftdoc.org/v2.2/type/FlattenCollection/#func-generate
FlattenCollection.endIndex	A										The collection's &quot;past the end&quot; position.\n<code>endIndex</code> is not a valid argument to <code>subscript</code>, and is always\nreachable from <code>startIndex</code> by zero or more applications of\n<code>successor()</code>.\n    Declaration    \n    <code>var endIndex: FlattenCollectionIndex&lt;Base&gt; { get }</code>	http://swiftdoc.org/v2.2/type/FlattenCollection/#var-endindex_-flattencollectionindex-base
FlattenCollection.startIndex	A										The position of the first element in a non-empty collection.\nIn an empty collection, <code>startIndex == endIndex</code>.\n    Declaration    \n    <code>var startIndex: FlattenCollectionIndex&lt;Base&gt; { get }</code>	http://swiftdoc.org/v2.2/type/FlattenCollection/#var-startindex_-flattencollectionindex-base
generate	R	FlattenCollection.generate										
endIndex	R	FlattenCollection.endIndex										
startIndex	R	FlattenCollection.startIndex										
AnyCollectionType	A										<pre><code>protocol AnyCollectionType</code></pre>A protocol for <code>AnyForwardCollection&lt;Element&gt;</code>,\n<code>AnyBidirectionalCollection&lt;Element&gt;</code>, and\n<code>AnyRandomAccessCollection&lt;Element&gt;</code>.\nThis protocol can be considered an implementation detail of the\n<code>===</code> and <code>!==</code> implementations for these types.	http://swiftdoc.org/v2.2/protocol/AnyCollectionType/
DictionaryLiteral	A										<pre><code>struct DictionaryLiteral&lt;Key, Value&gt;</code></pre>Represent the ability to pass a dictionary literal in function\nsignatures.\nA function with a <code>DictionaryLiteral</code> parameter can be passed a\nSwift dictionary literal without causing a <code>Dictionary</code> to be\ncreated.  This capability can be especially important when the\norder of elements in the literal is significant.\nFor example:\n<pre><code>struct IntPairs {\n  var elements: [(Int, Int)]\n  init(_ pairs: DictionaryLiteral&lt;Int,Int&gt;) {\n    elements = Array(pairs)\n  }\n}\nlet x = IntPairs([1:2, 1:1, 3:4, 2:1])\nprint(x.elements)  // [(1, 2), (1, 1), (3, 4), (2, 1)]</code></pre>	http://swiftdoc.org/v2.2/type/DictionaryLiteral/
DictionaryLiteral.endIndex	A										The <code>DictionaryLiteral</code>'s &quot;past the end&quot; position.\n<code>endIndex</code> is not a valid argument to <code>subscript</code>, and is always\nreachable from <code>startIndex</code> by zero or more applications of\n<code>successor()</code>.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>var endIndex: Int { get }</code>	http://swiftdoc.org/v2.2/type/DictionaryLiteral/#var-endindex_-int
DictionaryLiteral.startIndex	A										The position of the first element in a non-empty <code>DictionaryLiteral</code>.\nIdentical to <code>endIndex</code> in an empty <code>DictionaryLiteral</code>.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>var startIndex: Int { get }</code>	http://swiftdoc.org/v2.2/type/DictionaryLiteral/#var-startindex_-int
endIndex	R	DictionaryLiteral.endIndex										
startIndex	R	DictionaryLiteral.startIndex										
FlattenBidirectionalCollection	A										<pre><code>struct FlattenBidirectionalCollection&lt;Base : CollectionType where Base.Generator.Element : CollectionType, Base.Index : BidirectionalIndexType, Base.Generator.Element.Index : BidirectionalIndexType&gt;</code></pre>A flattened view of a base collection-of-collections.\nThe elements of this view are a concatenation of the elements of\neach collection in the base.\nThe <code>flatten</code> property is always lazy, but does not implicitly\nconfer laziness on algorithms applied to its result.  In other\nwords, for ordinary collections <code>c</code>:\n<code>c.flatten()</code> does not create new storage<code>c.flatten().map(f)</code> maps eagerly and returns a new array<code>c.lazy.flatten().map(f)</code> maps lazily and returns a <code>LazyMapCollection</code>\n<strong>Note:</strong> The performance of accessing <code>startIndex</code>, <code>first</code>, any methods\n  that depend on <code>startIndex</code>, or of advancing a <code>FlattenBidirectionalCollectionIndex</code>\n  depends on how many empty subcollections are found in the base\n  collection, and may not offer the usual performance given by\n  <code>CollectionType</code> or <code>BidirectionalIndexType</code>. Be aware, therefore, that\n  general operations on <code>FlattenBidirectionalCollection</code> instances may not have the\n  documented complexity.\n<strong>See Also:</strong> <code>FlattenSequence</code>	http://swiftdoc.org/v2.2/type/FlattenBidirectionalCollection/
FlattenBidirectionalCollection.generate	A										Returns a generator over the elements of this sequence.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; FlattenGenerator&lt;Base.Generator&gt;</code>	http://swiftdoc.org/v2.2/type/FlattenBidirectionalCollection/#func-generate
FlattenBidirectionalCollection.endIndex	A										The collection's &quot;past the end&quot; position.\n<code>endIndex</code> is not a valid argument to <code>subscript</code>, and is always\nreachable from <code>startIndex</code> by zero or more applications of\n<code>successor()</code>.\n    Declaration    \n    <code>var endIndex: FlattenBidirectionalCollectionIndex&lt;Base&gt; { get }</code>	http://swiftdoc.org/v2.2/type/FlattenBidirectionalCollection/#var-endindex_-flattenbidirectionalcollectionindex-base
FlattenBidirectionalCollection.startIndex	A										The position of the first element in a non-empty collection.\nIn an empty collection, <code>startIndex == endIndex</code>.\n    Declaration    \n    <code>var startIndex: FlattenBidirectionalCollectionIndex&lt;Base&gt; { get }</code>	http://swiftdoc.org/v2.2/type/FlattenBidirectionalCollection/#var-startindex_-flattenbidirectionalcollectionindex-base
generate	R	FlattenBidirectionalCollection.generate										
endIndex	R	FlattenBidirectionalCollection.endIndex										
startIndex	R	FlattenBidirectionalCollection.startIndex										
Array	A										<pre><code>struct Array&lt;Element&gt;</code></pre><code>Array</code> is an efficient, tail-growable random-access\ncollection of arbitrary elements.\nCommon Properties of Array Types\nThe information in this section applies to all three of Swift's\narray types, <code>Array&lt;Element&gt;</code>, <code>ContiguousArray&lt;Element&gt;</code>, and\n<code>ArraySlice&lt;Element&gt;</code>.  When you read the word &quot;array&quot; here in\na normal typeface, it applies to all three of them.\nValue Semantics\nEach array variable, <code>let</code> binding, or stored property has an\nindependent value that includes the values of all of its elements.\nTherefore, mutations to the array are not observable through its\ncopies:\n<pre><code>var a = [1, 2, 3]\nvar b = a\nb[0] = 4\nprint(&quot;a=\(a), b=\(b)&quot;)     // a=[1, 2, 3], b=[4, 2, 3]</code></pre>\n(Of course, if the array stores <code>class</code> references, the objects\nare shared; only the values of the references are independent.)\nArrays use Copy-on-Write so that their storage and elements are\nonly copied lazily, upon mutation, when more than one array\ninstance is using the same buffer.  Therefore, the first in any\nsequence of mutating operations may cost <code>O(N)</code> time and space,\nwhere <code>N</code> is the length of the array.\nGrowth and Capacity\nWhen an array's contiguous storage fills up, new storage must be\nallocated and elements must be moved to the new storage.  <code>Array</code>,\n<code>ContiguousArray</code>, and <code>ArraySlice</code> share an exponential growth\nstrategy that makes <code>append</code> a constant time operation when\namortized over many invocations.  In addition to a <code>count</code>\nproperty, these array types have a <code>capacity</code> that reflects their\npotential to store elements without reallocation, and when you\nknow how many elements you'll store, you can call\n<code>reserveCapacity</code> to preemptively reallocate and prevent\nintermediate reallocations.\nObjective-C Bridge\nThe main distinction between <code>Array</code> and the other array types is\nthat it interoperates seamlessly and efficiently with Objective-C.\n<code>Array&lt;Element&gt;</code> is considered bridged to Objective-C iff <code>Element</code>\nis bridged to Objective-C.\nWhen <code>Element</code> is a <code>class</code> or <code>@objc</code> protocol type, <code>Array</code> may\nstore its elements in an <code>NSArray</code>.  Since any arbitrary subclass\nof <code>NSArray</code> can become an <code>Array</code>, there are no guarantees about\nrepresentation or efficiency in this case (see also\n<code>ContiguousArray</code>).  Since <code>NSArray</code> is immutable, it is just as\nthough the storage was shared by some copy: the first in any\nsequence of mutating operations causes elements to be copied into\nunique, contiguous storage which may cost <code>O(N)</code> time and space,\nwhere <code>N</code> is the length of the array (or more, if the underlying\n<code>NSArray</code> has unusual performance characteristics).\nBridging to Objective-C\nAny bridged <code>Array</code> can be implicitly converted to an <code>NSArray</code>.\nWhen <code>Element</code> is a <code>class</code> or <code>@objc</code> protocol, bridging takes O(1)\ntime and O(1) space.  Other <code>Array</code>s must be bridged\nelement-by-element, allocating a new object for each element, at a\ncost of at least O(<code>count</code>) time and space.\nBridging from Objective-C\nAn <code>NSArray</code> can be implicitly or explicitly converted to any\nbridged <code>Array&lt;Element&gt;</code>.  This conversion calls <code>copyWithZone</code>\non the <code>NSArray</code>, to ensure it won't be modified, and stores the\nresult in the <code>Array</code>.  Type-checking, to ensure the <code>NSArray</code>'s\nelements match or can be bridged to <code>Element</code>, is deferred until the\nfirst element access.	http://swiftdoc.org/v2.2/type/Array/
Array.appendContentsOf	A										Append the elements of <code>newElements</code> to <code>self</code>.\n<strong>Complexity:</strong> O(length of result).\n    Declaration    \n    <code>mutating func appendContentsOf&lt;S : SequenceType where S.Generator.Element == Element&gt;(newElements: S)</code>	http://swiftdoc.org/v2.2/type/Array/#func-appendcontentsof-s_-sequencetype-where-s-generator-element-element_-s
Array.appendContentsOf	A										Append the elements of <code>newElements</code> to <code>self</code>.\n<strong>Complexity:</strong> O(length of result).\n    Declaration    \n    <code>mutating func appendContentsOf&lt;C : CollectionType where C.Generator.Element == Element&gt;(newElements: C)</code>	http://swiftdoc.org/v2.2/type/Array/#func-appendcontentsof-c_-collectiontype-where-c-generator-element-element_-c
Array.popLast	A										If <code>!self.isEmpty</code>, remove the last element and return it, otherwise\nreturn <code>nil</code>.\n<strong>Complexity:</strong> O(<code>self.count</code>) if the array is bridged,\n  otherwise O(1).\n    Declaration    \n    <code>mutating func popLast() -&gt; Element?</code>	http://swiftdoc.org/v2.2/type/Array/#func-poplast
Array.replaceRange	A										Replace the given <code>subRange</code> of elements with <code>newElements</code>.\n<strong>Complexity:</strong> O(<code>subRange.count</code>) if <code>subRange.endIndex\n  == self.endIndex</code> and <code>newElements.isEmpty</code>, O(N) otherwise.\n    Declaration    \n    <code>mutating func replaceRange&lt;C : CollectionType where C.Generator.Element == _Buffer.Element&gt;(subRange: Range&lt;Int&gt;, with newElements: C)</code>	http://swiftdoc.org/v2.2/type/Array/#func-replacerange_with_
Array.withUnsafeBufferPointer	A										Call <code>body(p)</code>, where <code>p</code> is a pointer to the <code>Array</code>'s\ncontiguous storage. If no such storage exists, it is first created.\nOften, the optimizer can eliminate bounds checks within an\narray algorithm, but when that fails, invoking the\nsame algorithm on <code>body</code>'s argument lets you trade safety for\nspeed.\n    Declaration    \n    <code>func withUnsafeBufferPointer&lt;R&gt;(@noescape body: (UnsafeBufferPointer&lt;Element&gt;) throws -&gt; R) rethrows -&gt; R</code>	http://swiftdoc.org/v2.2/type/Array/#func-withunsafebufferpointer_
Array.withUnsafeMutableBufferPointer	A										Call <code>body(p)</code>, where <code>p</code> is a pointer to the <code>Array</code>'s\nmutable contiguous storage. If no such storage exists, it is first created.\nOften, the optimizer can eliminate bounds- and uniqueness-checks\nwithin an array algorithm, but when that fails, invoking the\nsame algorithm on <code>body</code>'s argument lets you trade safety for\nspeed.\n<strong>Warning:</strong> Do not rely on anything about <code>self</code> (the <code>Array</code>\n  that is the target of this method) during the execution of\n  <code>body</code>: it may not appear to have its correct value.  Instead,\n  use only the <code>UnsafeMutableBufferPointer</code> argument to <code>body</code>.\n    Declaration    \n    <code>mutating func withUnsafeMutableBufferPointer&lt;R&gt;(@noescape body: (inout UnsafeMutableBufferPointer&lt;Element&gt;) throws -&gt; R) rethrows -&gt; R</code>	http://swiftdoc.org/v2.2/type/Array/#func-withunsafemutablebufferpointer_
Array.capacity	A										The number of elements the <code>Array</code> can store without reallocation.\n    Declaration    \n    <code>var capacity: Int { get }</code>	http://swiftdoc.org/v2.2/type/Array/#var-capacity_-int
Array.count	A										The number of elements the Array stores.\n    Declaration    \n    <code>var count: Int { get }</code>	http://swiftdoc.org/v2.2/type/Array/#var-count_-int
Array.debugDescription	A										A textual representation of <code>self</code>, suitable for debugging.\n    Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/Array/#var-debugdescription_-string
Array.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/Array/#var-description_-string
Array.endIndex	A										A &quot;past-the-end&quot; element index; the successor of the last valid\nsubscript argument.\n    Declaration    \n    <code>var endIndex: Int { get }</code>	http://swiftdoc.org/v2.2/type/Array/#var-endindex_-int
Array.startIndex	A										Always zero, which is the index of the first element when non-empty.\n    Declaration    \n    <code>var startIndex: Int { get }</code>	http://swiftdoc.org/v2.2/type/Array/#var-startindex_-int
appendContentsOf	R	Array.appendContentsOf										
appendContentsOf	R	Array.appendContentsOf										
popLast	R	Array.popLast										
replaceRange	R	Array.replaceRange										
withUnsafeBufferPointer	R	Array.withUnsafeBufferPointer										
withUnsafeMutableBufferPointer	R	Array.withUnsafeMutableBufferPointer										
capacity	R	Array.capacity										
count	R	Array.count										
debugDescription	R	Array.debugDescription										
description	R	Array.description										
endIndex	R	Array.endIndex										
startIndex	R	Array.startIndex										
CollectionOfOne	A										<pre><code>struct CollectionOfOne&lt;Element&gt;</code></pre>A collection containing a single element of type <code>Element</code>.	http://swiftdoc.org/v2.2/type/CollectionOfOne/
CollectionOfOne.generate	A										Returns a generator over the elements of this sequence.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; GeneratorOfOne&lt;Element&gt;</code>	http://swiftdoc.org/v2.2/type/CollectionOfOne/#func-generate
CollectionOfOne.count	A										The number of elements (always one).\n    Declaration    \n    <code>var count: Int { get }</code>	http://swiftdoc.org/v2.2/type/CollectionOfOne/#var-count_-int
CollectionOfOne.endIndex	A										The &quot;past the end&quot; position; always identical to\n<code>startIndex.successor()</code>.\n<strong>Note:</strong> <code>endIndex</code> is not a valid argument to <code>subscript</code>.\n    Declaration    \n    <code>var endIndex: Index { get }</code>	http://swiftdoc.org/v2.2/type/CollectionOfOne/#var-endindex_-index
CollectionOfOne.startIndex	A										The position of the first element.\n    Declaration    \n    <code>var startIndex: Index { get }</code>	http://swiftdoc.org/v2.2/type/CollectionOfOne/#var-startindex_-index
generate	R	CollectionOfOne.generate										
count	R	CollectionOfOne.count										
endIndex	R	CollectionOfOne.endIndex										
startIndex	R	CollectionOfOne.startIndex										
LazyMapCollection	A										<pre><code>struct LazyMapCollection&lt;Base : CollectionType, Element&gt;</code></pre>A <code>CollectionType</code> whose elements consist of those in a <code>Base</code>\n<code>CollectionType</code> passed through a transform function returning <code>Element</code>.\nThese elements are computed lazily, each time they're read, by\ncalling the transform function on a base element.	http://swiftdoc.org/v2.2/type/LazyMapCollection/
LazyMapCollection.generate	A										Returns a generator over the elements of this sequence.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; LazyMapGenerator&lt;Base.Generator, Element&gt;</code>	http://swiftdoc.org/v2.2/type/LazyMapCollection/#func-generate
LazyMapCollection.endIndex	A										Declaration    \n    <code>var endIndex: Base.Index { get }</code>	http://swiftdoc.org/v2.2/type/LazyMapCollection/#var-endindex_-base-index
LazyMapCollection.startIndex	A										Declaration    \n    <code>var startIndex: Base.Index { get }</code>	http://swiftdoc.org/v2.2/type/LazyMapCollection/#var-startindex_-base-index
generate	R	LazyMapCollection.generate										
endIndex	R	LazyMapCollection.endIndex										
startIndex	R	LazyMapCollection.startIndex										
AnyBidirectionalCollection	A										<pre><code>struct AnyBidirectionalCollection&lt;Element&gt;</code></pre>A type-erased wrapper over any collection with indices that\nsupport bidirectional traversal.\nForwards operations to an arbitrary underlying collection having the\nsame <code>Element</code> type, hiding the specifics of the underlying\n<code>CollectionType</code>.\n<strong>See Also:</strong> <code>AnyRandomAccessType</code>, <code>AnyForwardType</code>	http://swiftdoc.org/v2.2/type/AnyBidirectionalCollection/
AnyBidirectionalCollection.generate	A										Returns a generator over the elements of this collection.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; AnyGenerator&lt;Element&gt;</code>	http://swiftdoc.org/v2.2/type/AnyBidirectionalCollection/#func-generate
AnyBidirectionalCollection.count	A										The number of elements.\n<strong>Complexity:</strong> O(N).\n    Declaration    \n    <code>var count: IntMax { get }</code>	http://swiftdoc.org/v2.2/type/AnyBidirectionalCollection/#var-count_-intmax
AnyBidirectionalCollection.endIndex	A										The collection's &quot;past the end&quot; position.\n<code>endIndex</code> is not a valid argument to <code>subscript</code>, and is always\nreachable from <code>startIndex</code> by zero or more applications of\n<code>successor()</code>.\n    Declaration    \n    <code>var endIndex: AnyBidirectionalIndex { get }</code>	http://swiftdoc.org/v2.2/type/AnyBidirectionalCollection/#var-endindex_-anybidirectionalindex
AnyBidirectionalCollection.startIndex	A										The position of the first element in a non-empty collection.\nIn an empty collection, <code>startIndex == endIndex</code>.\n    Declaration    \n    <code>var startIndex: AnyBidirectionalIndex { get }</code>	http://swiftdoc.org/v2.2/type/AnyBidirectionalCollection/#var-startindex_-anybidirectionalindex
generate	R	AnyBidirectionalCollection.generate										
count	R	AnyBidirectionalCollection.count										
endIndex	R	AnyBidirectionalCollection.endIndex										
startIndex	R	AnyBidirectionalCollection.startIndex										
CVarArgType	A										<pre><code>protocol CVarArgType</code></pre>Instances of conforming types can be encoded, and appropriately\npassed, as elements of a C <code>va_list</code>.\nThis protocol is useful in presenting C &quot;varargs&quot; APIs natively in\nSwift.  It only works for APIs that have a <code>va_list</code> variant, so\nfor example, it isn't much use if all you have is:\n<pre><code>int f(int n, ...)</code></pre>\nGiven a version like this, though,\n<pre><code>int f(int, va_list arguments)</code></pre>\nyou can write:\n<pre><code>func swiftF(x: Int, arguments: CVarArgType...) -&gt; Int {\n  return withVaList(arguments) { f(x, $0) }\n}</code></pre>	http://swiftdoc.org/v2.2/protocol/CVarArgType/
UnsafePointer	A										<pre><code>struct UnsafePointer&lt;Memory&gt;</code></pre>A pointer to an object of type <code>Memory</code>.  This type provides no automated\nmemory management, and therefore the user must take care to allocate\nand free memory appropriately.\nThe pointer should be aligned to <code>alignof(Memory.self)</code>.\nThe pointer can be in one of the following states:\nMemory is not allocated (for example, pointer is null, or memory has\nbeen deallocated previously).Memory is allocated, but value has not been initialized.Memory is allocated and value is initialized.	http://swiftdoc.org/v2.2/type/UnsafePointer/
UnsafePointer.predecessor	A										Returns the previous consecutive value before <code>self</code>.\n<strong>Requires:</strong> The previous value is representable.\n    Declaration    \n    <code>func predecessor() -&gt; UnsafePointer&lt;Memory&gt;</code>	http://swiftdoc.org/v2.2/type/UnsafePointer/#func-predecessor
UnsafePointer.successor	A										Returns the next consecutive value after <code>self</code>.\n<strong>Requires:</strong> The next value is representable.\n    Declaration    \n    <code>func successor() -&gt; UnsafePointer&lt;Memory&gt;</code>	http://swiftdoc.org/v2.2/type/UnsafePointer/#func-successor
UnsafePointer.debugDescription	A										A textual representation of <code>self</code>, suitable for debugging.\n    Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/UnsafePointer/#var-debugdescription_-string
UnsafePointer.hashValue	A										The hash value.\n<strong>Axiom:</strong> <code>x == y</code> implies <code>x.hashValue == y.hashValue</code>.\n<strong>Note:</strong> The hash value is not guaranteed to be stable across\n  different invocations of the same program.  Do not persist the\n  hash value across program runs.\n    Declaration    \n    <code>var hashValue: Int { get }</code>	http://swiftdoc.org/v2.2/type/UnsafePointer/#var-hashvalue_-int
UnsafePointer.memory	A										Access the underlying raw memory, getting values.\n    Declaration    \n    <code>var memory: Memory { get }</code>	http://swiftdoc.org/v2.2/type/UnsafePointer/#var-memory_-memory
predecessor	R	UnsafePointer.predecessor										
successor	R	UnsafePointer.successor										
debugDescription	R	UnsafePointer.debugDescription										
hashValue	R	UnsafePointer.hashValue										
memory	R	UnsafePointer.memory										
MirrorPathType	A										<pre><code>protocol MirrorPathType</code></pre>A protocol for legitimate arguments to <code>Mirror</code>'s <code>descendant</code>\nmethod.\nDo not declare new conformances to this protocol; they will not\nwork as expected.	http://swiftdoc.org/v2.2/protocol/MirrorPathType/
String.UnicodeScalarView.UnicodeScalarIndex	A										<pre><code>extension String.UnicodeScalarView.UnicodeScalarIndex</code></pre>	http://swiftdoc.org/v2.2/type/String.UnicodeScalarView.UnicodeScalarIndex/
String.UnicodeScalarView.UnicodeScalarIndex.samePositionIn	A										Returns the position in <code>characters</code> that corresponds exactly\nto <code>self</code>, or if no such position exists, <code>nil</code>.\n<strong>Requires:</strong> <code>self</code> is an element of <code>characters.unicodeScalars.indices</code>.\n    Declaration    \n    <code>func samePositionIn(characters: String) -&gt; Index?</code>	http://swiftdoc.org/v2.2/type/String.UnicodeScalarView.UnicodeScalarIndex/#func-samepositionin_-string
String.UnicodeScalarView.UnicodeScalarIndex.samePositionIn	A										Returns the position in <code>utf8</code> that corresponds exactly\nto <code>self</code>.\n<strong>Requires:</strong> <code>self</code> is an element of <code>String(utf8)!.indices</code>.\n    Declaration    \n    <code>func samePositionIn(utf8: String.UTF8View) -&gt; String.UTF8View.Index</code>	http://swiftdoc.org/v2.2/type/String.UnicodeScalarView.UnicodeScalarIndex/#func-samepositionin_-string-utf8view
String.UnicodeScalarView.UnicodeScalarIndex.samePositionIn	A										Returns the position in <code>utf16</code> that corresponds exactly\nto <code>self</code>.\n<strong>Requires:</strong> <code>self</code> is an element of <code>String(utf16)!.indices</code>.\n    Declaration    \n    <code>func samePositionIn(utf16: String.UTF16View) -&gt; String.UTF16View.Index</code>	http://swiftdoc.org/v2.2/type/String.UnicodeScalarView.UnicodeScalarIndex/#func-samepositionin_-string-utf16view
UnicodeScalarIndex	R	String.UnicodeScalarView.UnicodeScalarIndex										
samePositionIn	R	String.UnicodeScalarView.UnicodeScalarIndex.samePositionIn										
samePositionIn	R	String.UnicodeScalarView.UnicodeScalarIndex.samePositionIn										
samePositionIn	R	String.UnicodeScalarView.UnicodeScalarIndex.samePositionIn										
AnyObject	A										<pre><code>protocol AnyObject</code></pre>The protocol to which all classes implicitly conform.\nWhen used as a concrete type, all known <code>@objc</code> methods and\nproperties are available, as implicitly-unwrapped-optional methods\nand properties respectively, on each instance of <code>AnyObject</code>.  For\nexample:\n<pre><code>class C {\n  @objc func getCValue() -&gt; Int { return 42 }\n}\n// If x has a method @objc getValue() -&gt; Int, call it and\n// return the result.  Otherwise, return `nil`.\nfunc getCValue1(x: AnyObject) -&gt; Int? {\n  if let f: () -&gt; Int = x.getCValue { // &lt;===\n    return f()\n  }\n  return nil\n}\n// A more idiomatic implementation using &quot;optional chaining&quot;\nfunc getCValue2(x: AnyObject) -&gt; Int? {\n  return x.getCValue?() // &lt;===\n}\n// An implementation that assumes the required method is present\nfunc getCValue3(x: AnyObject) -&gt; Int { // &lt;===\n  return x.getCValue() // x.getCValue is implicitly unwrapped. // &lt;===\n}</code></pre>\n<strong>See Also:</strong> <code>AnyClass</code>	http://swiftdoc.org/v2.2/protocol/AnyObject/
UTF16	A										<pre><code>struct UTF16</code></pre>A codec for UTF-16.	http://swiftdoc.org/v2.2/type/UTF16/
UTF16.encode	A										Encode a <code>UnicodeScalar</code> as a series of <code>CodeUnit</code>s by\ncalling <code>output</code> on each <code>CodeUnit</code>.\n    Declaration    \n    <code>static func encode(input: UnicodeScalar, output put: (CodeUnit) -&gt; Void)</code>	http://swiftdoc.org/v2.2/type/UTF16/#func-encode_output_
UTF16.isLeadSurrogate	A										Declaration    \n    <code>static func isLeadSurrogate(x: CodeUnit) -&gt; Bool</code>	http://swiftdoc.org/v2.2/type/UTF16/#func-isleadsurrogate_
UTF16.isTrailSurrogate	A										Declaration    \n    <code>static func isTrailSurrogate(x: CodeUnit) -&gt; Bool</code>	http://swiftdoc.org/v2.2/type/UTF16/#func-istrailsurrogate_
UTF16.leadSurrogate	A										Returns the high surrogate code unit of a surrogate pair representing\n<code>x</code>.\n<strong>Requires:</strong> <code>width(x) == 2</code>.\n    Declaration    \n    <code>static func leadSurrogate(x: UnicodeScalar) -&gt; CodeUnit</code>	http://swiftdoc.org/v2.2/type/UTF16/#func-leadsurrogate_
UTF16.measure	A										Returns the number of UTF-16 code units required for the given code unit\nsequence when transcoded to UTF-16, and a bit describing if the sequence\nwas found to contain only ASCII characters.\nIf <code>repairIllFormedSequences</code> is <code>true</code>, the function always succeeds.\nIf it is <code>false</code>, <code>nil</code> is returned if an ill-formed code unit sequence is\nfound in <code>input</code>.\n    Declaration    \n    <code>static func measure&lt;Encoding : UnicodeCodecType, Input : GeneratorType where Encoding.CodeUnit == Input.Element&gt;(_: Encoding.Type, input: Input, repairIllFormedSequences: Bool) -&gt; (Int, Bool)?</code>	http://swiftdoc.org/v2.2/type/UTF16/#func-measure_input_repairillformedsequences_
UTF16.trailSurrogate	A										Returns the low surrogate code unit of a surrogate pair representing\n<code>x</code>.\n<strong>Requires:</strong> <code>width(x) == 2</code>.\n    Declaration    \n    <code>static func trailSurrogate(x: UnicodeScalar) -&gt; CodeUnit</code>	http://swiftdoc.org/v2.2/type/UTF16/#func-trailsurrogate_
UTF16.width	A										Returns the number of code units required to encode <code>x</code>.\n    Declaration    \n    <code>static func width(x: UnicodeScalar) -&gt; Int</code>	http://swiftdoc.org/v2.2/type/UTF16/#func-width_
UTF16.decode	A										Start or continue decoding a UTF sequence.\nIn order to decode a code unit sequence completely, this function should\nbe called repeatedly until it returns <code>UnicodeDecodingResult.EmptyInput</code>.\nChecking that the generator was exhausted is not sufficient.  The decoder\ncan have an internal buffer that is pre-filled with data from the input\ngenerator.\nBecause of buffering, it is impossible to find the corresponding position\nin the generator for a given returned <code>UnicodeScalar</code> or an error.\n<strong><code>next</code>:</strong>  A generator of code units to be decoded.\n    Declaration    \n    <code>mutating func decode&lt;G : GeneratorType where G.Element == CodeUnit&gt;(inout input: G) -&gt; UnicodeDecodingResult</code>	http://swiftdoc.org/v2.2/type/UTF16/#func-decode-inout_
encode	R	UTF16.encode										
isLeadSurrogate	R	UTF16.isLeadSurrogate										
isTrailSurrogate	R	UTF16.isTrailSurrogate										
leadSurrogate	R	UTF16.leadSurrogate										
measure	R	UTF16.measure										
trailSurrogate	R	UTF16.trailSurrogate										
width	R	UTF16.width										
decode	R	UTF16.decode										
NilLiteralConvertible	A										<pre><code>protocol NilLiteralConvertible</code></pre>Conforming types can be initialized with <code>nil</code>.	http://swiftdoc.org/v2.2/protocol/NilLiteralConvertible/
BitwiseOperationsType	A										<pre><code>protocol BitwiseOperationsType</code></pre>A set type with O(1) standard bitwise operators.\nEach instance is a subset of <code>~Self.allZeros</code>.\n<strong>Axioms</strong>, where <code>x</code> is an instance of <code>Self</code>:\n<code>x | Self.allZeros == x</code><code>x ^ Self.allZeros == x</code><code>x &amp; Self.allZeros == .allZeros</code><code>x &amp; ~Self.allZeros == x</code><code>~x == x ^ ~Self.allZeros</code>	http://swiftdoc.org/v2.2/protocol/BitwiseOperationsType/
BitwiseOperationsType.allZeros	A										The empty bitset.\nAlso the identity element for <code>|</code> and\n<code>^</code>, and the fixed point for\n<code>&amp;</code>.\n    Declaration    \n    <code>static var allZeros: Self { get }</code>	http://swiftdoc.org/v2.2/protocol/BitwiseOperationsType/#static-var-allzeros_-self
BitwiseOperationsType.allZeros	A										The empty bitset.\nAlso the identity element for <code>|</code> and\n<code>^</code>, and the fixed point for\n<code>&amp;</code>.\n    Declaration    \n    <code>static var allZeros: Self { get }</code>	http://swiftdoc.org/v2.2/protocol/BitwiseOperationsType/#static-var-allzeros_-self
allZeros	R	BitwiseOperationsType.allZeros										
allZeros	R	BitwiseOperationsType.allZeros										
BooleanType	A										<pre><code>protocol BooleanType</code></pre>A type that represents a Boolean value.\nTypes that conform to the <code>BooleanType</code> protocol can be used as\nthe condition in control statements (<code>if</code>, <code>while</code>, C-style <code>for</code>)\nand other logical value contexts (e.g., <code>case</code> statement guards).\nOnly three types provided by Swift, <code>Bool</code>, <code>DarwinBoolean</code>, and <code>ObjCBool</code>,\nconform to <code>BooleanType</code>. Expanding this set to include types that\nrepresent more than simple boolean values is discouraged.	http://swiftdoc.org/v2.2/protocol/BooleanType/
BooleanType.boolValue	A										The value of <code>self</code>, expressed as a <code>Bool</code>.\n    Declaration    \n    <code>var boolValue: Bool { get }</code>	http://swiftdoc.org/v2.2/protocol/BooleanType/#var-boolvalue_-bool
boolValue	R	BooleanType.boolValue										
ArrayLiteralConvertible	A										<pre><code>protocol ArrayLiteralConvertible</code></pre>Conforming types can be initialized with array literals.	http://swiftdoc.org/v2.2/protocol/ArrayLiteralConvertible/
Operator: ...	A										<pre><code>infix operator ... {\n    associativity none\n    precedence 135\n}</code></pre>	http://swiftdoc.org/v2.2/operator/dotdotdot/
Operator: &=	A										<pre><code>infix operator &amp;= {\n    associativity right\n    precedence 90\n    assignment\n}</code></pre>	http://swiftdoc.org/v2.2/operator/ampeq/
Operator: %	A										<pre><code>infix operator % {\n    associativity left\n    precedence 150\n}</code></pre>	http://swiftdoc.org/v2.2/operator/pct/
CustomLeafReflectable	A										<pre><code>protocol CustomLeafReflectable</code></pre>A type that explicitly supplies its own Mirror but whose\ndescendant classes are not represented in the Mirror unless they\nalso override <code>customMirror()</code>.	http://swiftdoc.org/v2.2/protocol/CustomLeafReflectable/
Operator: |	A										<pre><code>infix operator | {\n    associativity left\n    precedence 140\n}</code></pre>	http://swiftdoc.org/v2.2/operator/bar/
Operator: +	A										<pre><code>infix operator + {\n    associativity left\n    precedence 140\n}</code></pre>	http://swiftdoc.org/v2.2/operator/pls/
Operator: ^=	A										<pre><code>infix operator ^= {\n    associativity right\n    precedence 90\n    assignment\n}</code></pre>	http://swiftdoc.org/v2.2/operator/crteq/
Operator: *=	A										<pre><code>infix operator *= {\n    associativity right\n    precedence 90\n    assignment\n}</code></pre>	http://swiftdoc.org/v2.2/operator/stareq/
Operator: *	A										<pre><code>infix operator * {\n    associativity left\n    precedence 150\n}</code></pre>	http://swiftdoc.org/v2.2/operator/star/
_SinkType	A										<pre><code>protocol _SinkType</code></pre>	http://swiftdoc.org/v2.2/protocol/_SinkType/
_ShadowProtocol	A										<pre><code>protocol _ShadowProtocol</code></pre>	http://swiftdoc.org/v2.2/protocol/_ShadowProtocol/
Operator: /=	A										<pre><code>infix operator /= {\n    associativity right\n    precedence 90\n    assignment\n}</code></pre>	http://swiftdoc.org/v2.2/operator/slasheq/
Operator: <	A										<pre><code>infix operator &lt;&lt;= {\n    associativity right\n    precedence 90\n    assignment\n}</code></pre>	http://swiftdoc.org/v2.2/operator/ltlteq/
Zip2Sequence	A										<pre><code>struct Zip2Sequence&lt;Sequence1 : SequenceType, Sequence2 : SequenceType&gt;</code></pre>A sequence of pairs built out of two underlying sequences, where\nthe elements of the <code>i</code>th pair are the <code>i</code>th elements of each\nunderlying sequence.	http://swiftdoc.org/v2.2/type/Zip2Sequence/
Zip2Sequence.generate	A										Returns a generator over the elements of this sequence.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; Zip2Generator&lt;Sequence1.Generator, Sequence2.Generator&gt;</code>	http://swiftdoc.org/v2.2/type/Zip2Sequence/#func-generate
generate	R	Zip2Sequence.generate										
OptionSetType	A										<pre><code>protocol OptionSetType</code></pre>Supplies convenient conformance to <code>SetAlgebraType</code> for any type\nwhose <code>RawValue</code> is a <code>BitwiseOperationsType</code>.  For example:\n<pre><code>struct PackagingOptions : OptionSetType {\n  let rawValue: Int\n  init(rawValue: Int) { self.rawValue = rawValue }\n  static let Box = PackagingOptions(rawValue: 1)\n  static let Carton = PackagingOptions(rawValue: 2)\n  static let Bag = PackagingOptions(rawValue: 4)\n  static let Satchel = PackagingOptions(rawValue: 8)\n  static let BoxOrBag: PackagingOptions = [Box, Bag]\n  static let BoxOrCartonOrBag: PackagingOptions = [Box, Carton, Bag]\n}</code></pre>\nIn the example above, <code>PackagingOptions.Element</code> is the same type\nas <code>PackagingOptions</code>, and instance <code>a</code> subsumes instance <code>b</code> if\nand only if <code>a.rawValue &amp; b.rawValue == b.rawValue</code>.	http://swiftdoc.org/v2.2/protocol/OptionSetType/
OptionSetType.exclusiveOr	A										Returns the set of elements contained in <code>self</code> or in <code>other</code>,\nbut not in both <code>self</code> and <code>other</code>.\n    Declaration    \n    <code>func exclusiveOr(other: Self) -&gt; Self</code>	http://swiftdoc.org/v2.2/protocol/OptionSetType/#func--exclusiveor_
OptionSetType.intersect	A										Returns the set of elements contained in both <code>self</code> and <code>other</code>.\n    Declaration    \n    <code>func intersect(other: Self) -&gt; Self</code>	http://swiftdoc.org/v2.2/protocol/OptionSetType/#func--intersect_
OptionSetType.union	A										Returns the set of elements contained in <code>self</code>, in <code>other</code>, or in\nboth <code>self</code> and <code>other</code>.\n    Declaration    \n    <code>func union(other: Self) -&gt; Self</code>	http://swiftdoc.org/v2.2/protocol/OptionSetType/#func--union_
OptionSetType.contains	A										Returns <code>true</code> if <code>self</code> contains <code>member</code>.\nEquivalent to <code>self.intersect([member]) == [member]</code>\n    Declaration    \n    <code>func contains(member: Self) -&gt; Bool</code>	http://swiftdoc.org/v2.2/protocol/OptionSetType/#func-element-self-contains_
OptionSetType.insert	A										If <code>member</code> is not already contained in <code>self</code>, insert it.\nEquivalent to <code>self.unionInPlace([member])</code>\n<strong>Postcondition:</strong> <code>self.contains(member)</code>\n    Declaration    \n    <code>mutating func insert(member: Self)</code>	http://swiftdoc.org/v2.2/protocol/OptionSetType/#func-element-self-insert_
OptionSetType.remove	A										If <code>member</code> is contained in <code>self</code>, remove and return it.\nOtherwise, return <code>nil</code>.\n<strong>Postcondition:</strong> <code>self.intersect([member]).isEmpty</code>\n    Declaration    \n    <code>mutating func remove(member: Self) -&gt; Self?</code>	http://swiftdoc.org/v2.2/protocol/OptionSetType/#func-element-self-remove_
OptionSetType.exclusiveOrInPlace	A										Replace <code>self</code> with a set containing all elements contained in\neither <code>self</code> or <code>other</code>, but not both.\nEquivalent to replacing <code>self</code> with <code>self.exclusiveOr(other)</code>\n    Declaration    \n    <code>mutating func exclusiveOrInPlace(other: Self)</code>	http://swiftdoc.org/v2.2/protocol/OptionSetType/#func-rawvalue_-bitwiseoperationstype-exclusiveorinplace_
OptionSetType.intersectInPlace	A										Remove all elements of <code>self</code> that are not also present in\n<code>other</code>.\nEquivalent to replacing <code>self</code> with <code>self.intersect(other)</code>\n<strong>Postcondition:</strong> <code>self.isSubsetOf(other)</code>\n    Declaration    \n    <code>mutating func intersectInPlace(other: Self)</code>	http://swiftdoc.org/v2.2/protocol/OptionSetType/#func-rawvalue_-bitwiseoperationstype-intersectinplace_
OptionSetType.unionInPlace	A										Insert all elements of <code>other</code> into <code>self</code>.\nEquivalent to replacing <code>self</code> with <code>self.union(other)</code>.\n<strong>Postcondition:</strong> <code>self.isSupersetOf(other)</code>\n    Declaration    \n    <code>mutating func unionInPlace(other: Self)</code>	http://swiftdoc.org/v2.2/protocol/OptionSetType/#func-rawvalue_-bitwiseoperationstype-unioninplace_
exclusiveOr	R	OptionSetType.exclusiveOr										
intersect	R	OptionSetType.intersect										
union	R	OptionSetType.union										
contains	R	OptionSetType.contains										
insert	R	OptionSetType.insert										
remove	R	OptionSetType.remove										
exclusiveOrInPlace	R	OptionSetType.exclusiveOrInPlace										
intersectInPlace	R	OptionSetType.intersectInPlace										
unionInPlace	R	OptionSetType.unionInPlace										
Operator: <	A										<pre><code>infix operator &lt; {\n    associativity none\n    precedence 130\n}</code></pre>	http://swiftdoc.org/v2.2/operator/lt/
Operator: !=	A										<pre><code>infix operator != {\n    associativity none\n    precedence 130\n}</code></pre>	http://swiftdoc.org/v2.2/operator/excleq/
AbsoluteValuable	A										<pre><code>protocol AbsoluteValuable</code></pre>A type that supports an &quot;absolute value&quot; function.	http://swiftdoc.org/v2.2/protocol/AbsoluteValuable/
AbsoluteValuable.abs	A										Returns the absolute value of <code>x</code>.\n    Declaration    \n    <code>static func abs(x: Self) -&gt; Self</code>	http://swiftdoc.org/v2.2/protocol/AbsoluteValuable/#func-abs_
abs	R	AbsoluteValuable.abs										
Process	A										<pre><code>enum Process</code></pre>Command-line arguments for the current process.	http://swiftdoc.org/v2.2/type/Process/
Process.argc	A										Access to the raw argc value from C.\n    Declaration    \n    <code>static var argc: CInt { get }</code>	http://swiftdoc.org/v2.2/type/Process/#static-var-argc_-cint
Process.arguments	A										The list of command-line arguments with which the current\nprocess was invoked.\n    Declaration    \n    <code>static var arguments: [String] { get }</code>	http://swiftdoc.org/v2.2/type/Process/#static-var-arguments_-string
Process.unsafeArgv	A										Access to the raw argv value from C. Accessing the argument vector\nthrough this pointer is unsafe.\n    Declaration    \n    <code>static var unsafeArgv: UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;Int8&gt;&gt; { get }</code>	http://swiftdoc.org/v2.2/type/Process/#static-var-unsafeargv_-unsafemutablepointer-unsafemutablepointer-int8
Process.argc	A										Access to the raw argc value from C.\n    Declaration    \n    <code>static var argc: CInt { get }</code>	http://swiftdoc.org/v2.2/type/Process/#static-var-argc_-cint
Process.arguments	A										The list of command-line arguments with which the current\nprocess was invoked.\n    Declaration    \n    <code>static var arguments: [String] { get }</code>	http://swiftdoc.org/v2.2/type/Process/#static-var-arguments_-string
Process.unsafeArgv	A										Access to the raw argv value from C. Accessing the argument vector\nthrough this pointer is unsafe.\n    Declaration    \n    <code>static var unsafeArgv: UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;Int8&gt;&gt; { get }</code>	http://swiftdoc.org/v2.2/type/Process/#static-var-unsafeargv_-unsafemutablepointer-unsafemutablepointer-int8
argc	R	Process.argc										
arguments	R	Process.arguments										
unsafeArgv	R	Process.unsafeArgv										
argc	R	Process.argc										
arguments	R	Process.arguments										
unsafeArgv	R	Process.unsafeArgv										
EnumerateSequence	A										<pre><code>struct EnumerateSequence&lt;Base : SequenceType&gt;</code></pre>The <code>SequenceType</code> returned by <code>enumerate()</code>.  <code>EnumerateSequence</code>\nis a sequence of pairs (n, x), where ns are consecutive\n<code>Int</code>s starting at zero, and xs are the elements of a <code>Base</code>\n<code>SequenceType</code>:\n<pre><code>var s = EnumerateSequence([&quot;foo&quot;, &quot;bar&quot;])\nArray(s) // [(0, &quot;foo&quot;), (1, &quot;bar&quot;)]</code></pre>\n<strong>Note:</strong> Idiomatic usage is to call <code>enumerate</code> instead of\n  constructing an <code>EnumerateSequence</code> directly.	http://swiftdoc.org/v2.2/type/EnumerateSequence/
EnumerateSequence.generate	A										Returns a generator over the elements of this sequence.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; EnumerateGenerator&lt;Base.Generator&gt;</code>	http://swiftdoc.org/v2.2/type/EnumerateSequence/#func-generate
generate	R	EnumerateSequence.generate										
UInt	A										<pre><code>struct UInt</code></pre>A 64-bit unsigned integer value\ntype.	http://swiftdoc.org/v2.2/type/UInt/
UInt.addWithOverflow	A										Add <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func addWithOverflow(lhs: UInt, _ rhs: UInt) -&gt; (UInt, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/UInt/#func-addwithoverflow__
UInt.divideWithOverflow	A										Divide <code>lhs</code> and <code>rhs</code>, returning\na result and a <code>Bool</code>\nthat is <code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func divideWithOverflow(lhs: UInt, _ rhs: UInt) -&gt; (UInt, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/UInt/#func-dividewithoverflow__
UInt.multiplyWithOverflow	A										Multiply <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func multiplyWithOverflow(lhs: UInt, _ rhs: UInt) -&gt; (UInt, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/UInt/#func-multiplywithoverflow__
UInt.remainderWithOverflow	A										Divide <code>lhs</code> and <code>rhs</code>, returning\nthe remainder and a <code>Bool</code>\nthat is <code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func remainderWithOverflow(lhs: UInt, _ rhs: UInt) -&gt; (UInt, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/UInt/#func-remainderwithoverflow__
UInt.subtractWithOverflow	A										Subtract <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func subtractWithOverflow(lhs: UInt, _ rhs: UInt) -&gt; (UInt, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/UInt/#func-subtractwithoverflow__
UInt.predecessor	A										Returns the previous consecutive value before <code>self</code>.\n<strong>Requires:</strong> The previous value is representable.\n    Declaration    \n    <code>func predecessor() -&gt; UInt</code>	http://swiftdoc.org/v2.2/type/UInt/#func-predecessor
UInt.successor	A										Returns the next consecutive value after <code>self</code>.\n<strong>Requires:</strong> The next value is representable.\n    Declaration    \n    <code>func successor() -&gt; UInt</code>	http://swiftdoc.org/v2.2/type/UInt/#func-successor
UInt.toIntMax	A										Explicitly convert to <code>IntMax</code>, trapping on overflow (except in -Ounchecked builds).\n    Declaration    \n    <code>func toIntMax() -&gt; IntMax</code>	http://swiftdoc.org/v2.2/type/UInt/#func-tointmax
UInt.toUIntMax	A										Represent this number using Swift's widest native unsigned\ninteger type.\n    Declaration    \n    <code>func toUIntMax() -&gt; UIntMax</code>	http://swiftdoc.org/v2.2/type/UInt/#func-touintmax
UInt.allZeros	A										The empty bitset of type UInt.\n    Declaration    \n    <code>static var allZeros: UInt { get }</code>	http://swiftdoc.org/v2.2/type/UInt/#static-var-allzeros_-uint
UInt.max	A										Declaration    \n    <code>static var max: UInt { get }</code>	http://swiftdoc.org/v2.2/type/UInt/#static-var-max_-uint
UInt.min	A										Declaration    \n    <code>static var min: UInt { get }</code>	http://swiftdoc.org/v2.2/type/UInt/#static-var-min_-uint
UInt.allZeros	A										The empty bitset of type UInt.\n    Declaration    \n    <code>static var allZeros: UInt { get }</code>	http://swiftdoc.org/v2.2/type/UInt/#static-var-allzeros_-uint
UInt.max	A										Declaration    \n    <code>static var max: UInt { get }</code>	http://swiftdoc.org/v2.2/type/UInt/#static-var-max_-uint
UInt.min	A										Declaration    \n    <code>static var min: UInt { get }</code>	http://swiftdoc.org/v2.2/type/UInt/#static-var-min_-uint
UInt.bigEndian	A										Returns the big-endian representation of the integer, changing the\nbyte order if necessary.\n    Declaration    \n    <code>var bigEndian: UInt { get }</code>	http://swiftdoc.org/v2.2/type/UInt/#var-bigendian_-uint
UInt.byteSwapped	A										Returns the current integer with the byte order swapped.\n    Declaration    \n    <code>var byteSwapped: UInt { get }</code>	http://swiftdoc.org/v2.2/type/UInt/#var-byteswapped_-uint
UInt.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/UInt/#var-description_-string
UInt.hashValue	A										The hash value.\n<strong>Axiom:</strong> <code>x == y</code> implies <code>x.hashValue == y.hashValue</code>.\n<strong>Note:</strong> The hash value is not guaranteed to be stable across\n  different invocations of the same program.  Do not persist the\n  hash value across program runs.\n    Declaration    \n    <code>var hashValue: Int { get }</code>	http://swiftdoc.org/v2.2/type/UInt/#var-hashvalue_-int
UInt.littleEndian	A										Returns the little-endian representation of the integer, changing the\nbyte order if necessary.\n    Declaration    \n    <code>var littleEndian: UInt { get }</code>	http://swiftdoc.org/v2.2/type/UInt/#var-littleendian_-uint
addWithOverflow	R	UInt.addWithOverflow										
divideWithOverflow	R	UInt.divideWithOverflow										
multiplyWithOverflow	R	UInt.multiplyWithOverflow										
remainderWithOverflow	R	UInt.remainderWithOverflow										
subtractWithOverflow	R	UInt.subtractWithOverflow										
predecessor	R	UInt.predecessor										
successor	R	UInt.successor										
toIntMax	R	UInt.toIntMax										
toUIntMax	R	UInt.toUIntMax										
allZeros	R	UInt.allZeros										
max	R	UInt.max										
min	R	UInt.min										
allZeros	R	UInt.allZeros										
max	R	UInt.max										
min	R	UInt.min										
bigEndian	R	UInt.bigEndian										
byteSwapped	R	UInt.byteSwapped										
description	R	UInt.description										
hashValue	R	UInt.hashValue										
littleEndian	R	UInt.littleEndian										
UnsafeBufferPointer	A										<pre><code>struct UnsafeBufferPointer&lt;Element&gt;</code></pre>A non-owning pointer to buffer of  <code>Element</code>s stored\ncontiguously in memory, presenting a <code>Collection</code> interface to the\nunderlying elements.\nThe pointer should be aligned to <code>alignof(Element.self)</code>.	http://swiftdoc.org/v2.2/type/UnsafeBufferPointer/
UnsafeBufferPointer.generate	A										Returns a generator over the elements of this sequence.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; UnsafeBufferPointerGenerator&lt;Element&gt;</code>	http://swiftdoc.org/v2.2/type/UnsafeBufferPointer/#func-generate
UnsafeBufferPointer.baseAddress	A										A pointer to the first element of the buffer.\n    Declaration    \n    <code>var baseAddress: UnsafePointer&lt;Element&gt; { get }</code>	http://swiftdoc.org/v2.2/type/UnsafeBufferPointer/#var-baseaddress_-unsafepointer-element
UnsafeBufferPointer.count	A										The number of elements in the buffer.\n    Declaration    \n    <code>var count: Int { get }</code>	http://swiftdoc.org/v2.2/type/UnsafeBufferPointer/#var-count_-int
UnsafeBufferPointer.debugDescription	A										A textual representation of <code>self</code>, suitable for debugging.\n    Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/UnsafeBufferPointer/#var-debugdescription_-string
UnsafeBufferPointer.endIndex	A										The &quot;past the end&quot; position; always identical to <code>count</code>.\n<code>endIndex</code> is not a valid argument to <code>subscript</code>, and is always\nreachable from <code>startIndex</code> by zero or more applications of\n<code>successor()</code>.\n    Declaration    \n    <code>var endIndex: Int { get }</code>	http://swiftdoc.org/v2.2/type/UnsafeBufferPointer/#var-endindex_-int
UnsafeBufferPointer.startIndex	A										Always zero, which is the index of the first element in a\nnon-empty buffer.\n    Declaration    \n    <code>var startIndex: Int { get }</code>	http://swiftdoc.org/v2.2/type/UnsafeBufferPointer/#var-startindex_-int
generate	R	UnsafeBufferPointer.generate										
baseAddress	R	UnsafeBufferPointer.baseAddress										
count	R	UnsafeBufferPointer.count										
debugDescription	R	UnsafeBufferPointer.debugDescription										
endIndex	R	UnsafeBufferPointer.endIndex										
startIndex	R	UnsafeBufferPointer.startIndex										
IntegerType	A										<pre><code>protocol IntegerType</code></pre>A set of common requirements for Swift's integer types.	http://swiftdoc.org/v2.2/protocol/IntegerType/
Float80	A										<pre><code>struct Float80</code></pre>An extended-precision floating-point value type.	http://swiftdoc.org/v2.2/type/Float80/
Float80.abs	A										Returns the absolute value of <code>x</code>.\n    Declaration    \n    <code>static func abs(x: Float80) -&gt; Float80</code>	http://swiftdoc.org/v2.2/type/Float80/#func-abs_
Float80.advancedBy	A										Returns a <code>Self</code> <code>x</code> such that <code>self.distanceTo(x)</code> approximates\n<code>n</code>.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func advancedBy(amount: Float80) -&gt; Float80</code>	http://swiftdoc.org/v2.2/type/Float80/#func-advancedby_
Float80.distanceTo	A										Returns a stride <code>x</code> such that <code>self.advancedBy(x)</code> approximates\n<code>other</code>.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func distanceTo(other: Float80) -&gt; Float80</code>	http://swiftdoc.org/v2.2/type/Float80/#func-distanceto_
Float80.debugDescription	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/Float80/#var-debugdescription_-string
Float80.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/Float80/#var-description_-string
Float80.hashValue	A										The hash value.\n<strong>Axiom:</strong> <code>x == y</code> implies <code>x.hashValue == y.hashValue</code>.\n<strong>Note:</strong> The hash value is not guaranteed to be stable across\n  different invocations of the same program.  Do not persist the\n  hash value across program runs.\n    Declaration    \n    <code>var hashValue: Int { get }</code>	http://swiftdoc.org/v2.2/type/Float80/#var-hashvalue_-int
abs	R	Float80.abs										
advancedBy	R	Float80.advancedBy										
distanceTo	R	Float80.distanceTo										
debugDescription	R	Float80.debugDescription										
description	R	Float80.description										
hashValue	R	Float80.hashValue										
AnyRandomAccessCollection	A										<pre><code>struct AnyRandomAccessCollection&lt;Element&gt;</code></pre>A type-erased wrapper over any collection with indices that\nsupport random access traversal.\nForwards operations to an arbitrary underlying collection having the\nsame <code>Element</code> type, hiding the specifics of the underlying\n<code>CollectionType</code>.\n<strong>See Also:</strong> <code>AnyForwardType</code>, <code>AnyBidirectionalType</code>	http://swiftdoc.org/v2.2/type/AnyRandomAccessCollection/
AnyRandomAccessCollection.generate	A										Returns a generator over the elements of this collection.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; AnyGenerator&lt;Element&gt;</code>	http://swiftdoc.org/v2.2/type/AnyRandomAccessCollection/#func-generate
AnyRandomAccessCollection.count	A										The number of elements.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>var count: IntMax { get }</code>	http://swiftdoc.org/v2.2/type/AnyRandomAccessCollection/#var-count_-intmax
AnyRandomAccessCollection.endIndex	A										The collection's &quot;past the end&quot; position.\n<code>endIndex</code> is not a valid argument to <code>subscript</code>, and is always\nreachable from <code>startIndex</code> by zero or more applications of\n<code>successor()</code>.\n    Declaration    \n    <code>var endIndex: AnyRandomAccessIndex { get }</code>	http://swiftdoc.org/v2.2/type/AnyRandomAccessCollection/#var-endindex_-anyrandomaccessindex
AnyRandomAccessCollection.startIndex	A										The position of the first element in a non-empty collection.\nIn an empty collection, <code>startIndex == endIndex</code>.\n    Declaration    \n    <code>var startIndex: AnyRandomAccessIndex { get }</code>	http://swiftdoc.org/v2.2/type/AnyRandomAccessCollection/#var-startindex_-anyrandomaccessindex
generate	R	AnyRandomAccessCollection.generate										
count	R	AnyRandomAccessCollection.count										
endIndex	R	AnyRandomAccessCollection.endIndex										
startIndex	R	AnyRandomAccessCollection.startIndex										
Int16	A										<pre><code>struct Int16</code></pre>A 16-bit signed integer value\ntype.	http://swiftdoc.org/v2.2/type/Int16/
Int16.addWithOverflow	A										Add <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func addWithOverflow(lhs: Int16, _ rhs: Int16) -&gt; (Int16, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Int16/#func-addwithoverflow__
Int16.divideWithOverflow	A										Divide <code>lhs</code> and <code>rhs</code>, returning\na result and a <code>Bool</code>\nthat is <code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func divideWithOverflow(lhs: Int16, _ rhs: Int16) -&gt; (Int16, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Int16/#func-dividewithoverflow__
Int16.multiplyWithOverflow	A										Multiply <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func multiplyWithOverflow(lhs: Int16, _ rhs: Int16) -&gt; (Int16, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Int16/#func-multiplywithoverflow__
Int16.remainderWithOverflow	A										Divide <code>lhs</code> and <code>rhs</code>, returning\nthe remainder and a <code>Bool</code>\nthat is <code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func remainderWithOverflow(lhs: Int16, _ rhs: Int16) -&gt; (Int16, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Int16/#func-remainderwithoverflow__
Int16.subtractWithOverflow	A										Subtract <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func subtractWithOverflow(lhs: Int16, _ rhs: Int16) -&gt; (Int16, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Int16/#func-subtractwithoverflow__
Int16.predecessor	A										Returns the previous consecutive value before <code>self</code>.\n<strong>Requires:</strong> The previous value is representable.\n    Declaration    \n    <code>func predecessor() -&gt; Int16</code>	http://swiftdoc.org/v2.2/type/Int16/#func-predecessor
Int16.successor	A										Returns the next consecutive value after <code>self</code>.\n<strong>Requires:</strong> The next value is representable.\n    Declaration    \n    <code>func successor() -&gt; Int16</code>	http://swiftdoc.org/v2.2/type/Int16/#func-successor
Int16.toIntMax	A										Represent this number using Swift's widest native signed\ninteger type.\n    Declaration    \n    <code>func toIntMax() -&gt; IntMax</code>	http://swiftdoc.org/v2.2/type/Int16/#func-tointmax
Int16.allZeros	A										The empty bitset of type Int16.\n    Declaration    \n    <code>static var allZeros: Int16 { get }</code>	http://swiftdoc.org/v2.2/type/Int16/#static-var-allzeros_-int16
Int16.max	A										Declaration    \n    <code>static var max: Int16 { get }</code>	http://swiftdoc.org/v2.2/type/Int16/#static-var-max_-int16
Int16.min	A										Declaration    \n    <code>static var min: Int16 { get }</code>	http://swiftdoc.org/v2.2/type/Int16/#static-var-min_-int16
Int16.allZeros	A										The empty bitset of type Int16.\n    Declaration    \n    <code>static var allZeros: Int16 { get }</code>	http://swiftdoc.org/v2.2/type/Int16/#static-var-allzeros_-int16
Int16.max	A										Declaration    \n    <code>static var max: Int16 { get }</code>	http://swiftdoc.org/v2.2/type/Int16/#static-var-max_-int16
Int16.min	A										Declaration    \n    <code>static var min: Int16 { get }</code>	http://swiftdoc.org/v2.2/type/Int16/#static-var-min_-int16
Int16.bigEndian	A										Returns the big-endian representation of the integer, changing the\nbyte order if necessary.\n    Declaration    \n    <code>var bigEndian: Int16 { get }</code>	http://swiftdoc.org/v2.2/type/Int16/#var-bigendian_-int16
Int16.byteSwapped	A										Returns the current integer with the byte order swapped.\n    Declaration    \n    <code>var byteSwapped: Int16 { get }</code>	http://swiftdoc.org/v2.2/type/Int16/#var-byteswapped_-int16
Int16.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/Int16/#var-description_-string
Int16.hashValue	A										The hash value.\n<strong>Axiom:</strong> <code>x == y</code> implies <code>x.hashValue == y.hashValue</code>.\n<strong>Note:</strong> The hash value is not guaranteed to be stable across\n  different invocations of the same program.  Do not persist the\n  hash value across program runs.\n    Declaration    \n    <code>var hashValue: Int { get }</code>	http://swiftdoc.org/v2.2/type/Int16/#var-hashvalue_-int
Int16.littleEndian	A										Returns the little-endian representation of the integer, changing the\nbyte order if necessary.\n    Declaration    \n    <code>var littleEndian: Int16 { get }</code>	http://swiftdoc.org/v2.2/type/Int16/#var-littleendian_-int16
addWithOverflow	R	Int16.addWithOverflow										
divideWithOverflow	R	Int16.divideWithOverflow										
multiplyWithOverflow	R	Int16.multiplyWithOverflow										
remainderWithOverflow	R	Int16.remainderWithOverflow										
subtractWithOverflow	R	Int16.subtractWithOverflow										
predecessor	R	Int16.predecessor										
successor	R	Int16.successor										
toIntMax	R	Int16.toIntMax										
allZeros	R	Int16.allZeros										
max	R	Int16.max										
min	R	Int16.min										
allZeros	R	Int16.allZeros										
max	R	Int16.max										
min	R	Int16.min										
bigEndian	R	Int16.bigEndian										
byteSwapped	R	Int16.byteSwapped										
description	R	Int16.description										
hashValue	R	Int16.hashValue										
littleEndian	R	Int16.littleEndian										
UnsafeBufferPointerGenerator	A										<pre><code>struct UnsafeBufferPointerGenerator&lt;Element&gt;</code></pre>A generator for the elements in the buffer referenced by\n<code>UnsafeBufferPointer</code> or <code>UnsafeMutableBufferPointer</code>.	http://swiftdoc.org/v2.2/type/UnsafeBufferPointerGenerator/
UnsafeBufferPointerGenerator.next	A										Advance to the next element and return it, or <code>nil</code> if no next\nelement exists.\n    Declaration    \n    <code>mutating func next() -&gt; Element?</code>	http://swiftdoc.org/v2.2/type/UnsafeBufferPointerGenerator/#func-next
next	R	UnsafeBufferPointerGenerator.next										
SequenceType	A										<pre><code>protocol SequenceType</code></pre>A type that can be iterated with a <code>for</code>...<code>in</code> loop.\n<code>SequenceType</code> makes no requirement on conforming types regarding\nwhether they will be destructively &quot;consumed&quot; by iteration.  To\nensure non-destructive iteration, constrain your sequence to\n<code>CollectionType</code>.\nAs a consequence, it is not possible to run multiple <code>for</code> loops\non a sequence to &quot;resume&quot; iteration:\n<pre><code>for element in sequence {\n  if ... some condition { break }\n}\nfor element in sequence {\n  // Not guaranteed to continue from the next element.\n}</code></pre>\n<code>SequenceType</code> makes no requirement about the behavior in that\ncase.  It is not correct to assume that a sequence will either be\n&quot;consumable&quot; and will resume iteration, or that a sequence is a\ncollection and will restart iteration from the first element.\nA conforming sequence that is not a collection is allowed to\nproduce an arbitrary sequence of elements from the second generator.	http://swiftdoc.org/v2.2/protocol/SequenceType/
SequenceType.dropFirst	A										Returns a subsequence containing all but the first <code>n</code> elements.\n<strong>Requires:</strong> <code>n &gt;= 0</code>\n<strong>Complexity:</strong> O(<code>n</code>)\n    Declaration    \n    <code>func dropFirst(n: Int) -&gt; Self.SubSequence</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-dropfirst_
SequenceType.dropLast	A										Returns a subsequence containing all but the last <code>n</code> elements.\n<strong>Requires:</strong> <code>self</code> is a finite sequence.\n<strong>Requires:</strong> <code>n &gt;= 0</code>\n<strong>Complexity:</strong> O(<code>self.count</code>)\n    Declaration    \n    <code>func dropLast(n: Int) -&gt; Self.SubSequence</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-droplast_
SequenceType.filter	A										Returns an <code>Array</code> containing the elements of <code>self</code>,\nin order, that satisfy the predicate <code>includeElement</code>.\n    Declaration    \n    <code>func filter(@noescape includeElement: (Self.Generator.Element) throws -&gt; Bool) rethrows -&gt; [Self.Generator.Element]</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-filter_
SequenceType.forEach	A										Call <code>body</code> on each element in <code>self</code> in the same order as a\nfor-in loop.\n<pre><code>sequence.forEach {\n  // body code\n}</code></pre>\nis similar to:\n<pre><code>for element in sequence {\n  // body code\n}</code></pre>\n<strong>Note:</strong> You cannot use the <code>break</code> or <code>continue</code> statement to exit the\n  current call of the <code>body</code> closure or skip subsequent calls.\n<strong>Note:</strong> Using the <code>return</code> statement in the <code>body</code> closure will only\n  exit from the current call to <code>body</code>, not any outer scope, and won't\n  skip subsequent calls.\n<strong>Complexity:</strong> O(<code>self.count</code>)\n    Declaration    \n    <code>func forEach(@noescape body: (Self.Generator.Element) throws -&gt; Void) rethrows</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-foreach_
SequenceType.generate	A										Returns a generator over the elements of this sequence.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; Self.Generator</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-generate
SequenceType.map	A										Returns an <code>Array</code> containing the results of mapping <code>transform</code>\nover <code>self</code>.\n<strong>Complexity:</strong> O(N).\n    Declaration    \n    <code>func map&lt;T&gt;(@noescape transform: (Self.Generator.Element) throws -&gt; T) rethrows -&gt; [T]</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-map_
SequenceType.prefix	A										Returns a subsequence, up to <code>maxLength</code> in length, containing the\ninitial elements.\nIf <code>maxLength</code> exceeds <code>self.count</code>, the result contains all\nthe elements of <code>self</code>.\n<strong>Requires:</strong> <code>maxLength &gt;= 0</code>\n    Declaration    \n    <code>func prefix(maxLength: Int) -&gt; Self.SubSequence</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-prefix_
SequenceType.split	A										Returns the maximal <code>SubSequence</code>s of <code>self</code>, in order, that\ndon't contain elements satisfying the predicate <code>isSeparator</code>.\n<strong><code>maxSplit</code>:</strong>  The maximum number of <code>SubSequence</code>s to\n  return, minus 1.\n  If <code>maxSplit + 1</code> <code>SubSequence</code>s are returned, the last one is\n  a suffix of <code>self</code> containing the remaining elements.\n  The default value is <code>Int.max</code>.\n<strong><code>allowEmptySubsequences</code>:</strong>  If <code>true</code>, an empty <code>SubSequence</code>\n  is produced in the result for each pair of consecutive elements\n  satisfying <code>isSeparator</code>.\n  The default value is <code>false</code>.\n<strong>Requires:</strong> <code>maxSplit &gt;= 0</code>\n    Declaration    \n    <code>func split(maxSplit: Int, allowEmptySlices: Bool, @noescape isSeparator: (Self.Generator.Element) throws -&gt; Bool) rethrows -&gt; [Self.SubSequence]</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-split_allowemptyslices_isseparator_
SequenceType.suffix	A										Returns a slice, up to <code>maxLength</code> in length, containing the\nfinal elements of <code>s</code>.\nIf <code>maxLength</code> exceeds <code>s.count</code>, the result contains all\nthe elements of <code>s</code>.\n<strong>Requires:</strong> <code>self</code> is a finite sequence.\n<strong>Requires:</strong> <code>maxLength &gt;= 0</code>\n    Declaration    \n    <code>func suffix(maxLength: Int) -&gt; Self.SubSequence</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-suffix_
SequenceType.underestimateCount	A										Returns a value less than or equal to the number of elements in\n<code>self</code>, <strong>nondestructively</strong>.\n<strong>Complexity:</strong> O(N).\n    Declaration    \n    <code>func underestimateCount() -&gt; Int</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-underestimatecount
SequenceType.contains	A										Returns <code>true</code> iff an element in <code>self</code> satisfies <code>predicate</code>.\n    Declaration    \n    <code>func contains(@noescape predicate: (Self.Generator.Element) throws -&gt; Bool) rethrows -&gt; Bool</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func--contains_
SequenceType.dropFirst	A										Returns a subsequence containing all but the first element.\n<strong>Complexity:</strong> O(1)\n    Declaration    \n    <code>func dropFirst() -&gt; Self.SubSequence</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func--dropfirst
SequenceType.dropLast	A										Returns a subsequence containing all but the last element.\n<strong>Requires:</strong> <code>self</code> is a finite sequence.\n<strong>Complexity:</strong> O(<code>self.count</code>)\n    Declaration    \n    <code>func dropLast() -&gt; Self.SubSequence</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func--droplast
SequenceType.elementsEqual	A										Returns <code>true</code> iff <code>self</code> and <code>other</code> contain equivalent elements, using\n<code>isEquivalent</code> as the equivalence test.\n<strong>Requires:</strong> <code>isEquivalent</code> is an\n  equivalence relation.\n    Declaration    \n    <code>func elementsEqual&lt;OtherSequence : SequenceType where OtherSequence.Generator.Element == Generator.Element&gt;(other: OtherSequence, @noescape isEquivalent: (Self.Generator.Element, Self.Generator.Element) throws -&gt; Bool) rethrows -&gt; Bool</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func--elementsequal_isequivalent_
SequenceType.enumerate	A										Returns a lazy <code>SequenceType</code> containing pairs (n, x), where\nns are consecutive <code>Int</code>s starting at zero, and xs are\nthe elements of <code>base</code>:\n<pre><code>&gt; for (n, c) in &quot;Swift&quot;.characters.enumerate() {\n    print(&quot;\(n): '\(c)'&quot;)\n  }\n0: 'S'\n1: 'w'\n2: 'i'\n3: 'f'\n4: 't'</code></pre>\n    Declaration    \n    <code>func enumerate() -&gt; EnumerateSequence&lt;Self&gt;</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func--enumerate
SequenceType.filter	A										Returns an <code>Array</code> containing the elements of <code>self</code>,\nin order, that satisfy the predicate <code>includeElement</code>.\n    Declaration    \n    <code>func filter(@noescape includeElement: (Self.Generator.Element) throws -&gt; Bool) rethrows -&gt; [Self.Generator.Element]</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func--filter_
SequenceType.flatMap	A										Returns an <code>Array</code> containing the non-nil results of mapping\n<code>transform</code> over <code>self</code>.\n<strong>Complexity:</strong> O(M + N), where M is the length of <code>self</code>\n  and N is the length of the result.\n    Declaration    \n    <code>func flatMap&lt;T&gt;(@noescape transform: (Self.Generator.Element) throws -&gt; T?) rethrows -&gt; [T]</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func--flatmap-t_-self-generator-element-throws-t
SequenceType.flatMap	A										Returns an <code>Array</code> containing the concatenated results of mapping\n<code>transform</code> over <code>self</code>.\n<pre><code>s.flatMap(transform)</code></pre>\nis equivalent to\n<pre><code>Array(s.map(transform).flatten())</code></pre>\n<strong>Complexity:</strong> O(M + N), where M is the length of <code>self</code>\n  and N is the length of the result.\n    Declaration    \n    <code>func flatMap&lt;S : SequenceType&gt;(transform: (Self.Generator.Element) throws -&gt; S) rethrows -&gt; [S.Generator.Element]</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func--flatmap-s_-sequencetype_-self-generator-element-throws-s
SequenceType.forEach	A										Call <code>body</code> on each element in <code>self</code> in the same order as a\nfor-in loop.\n<pre><code>sequence.forEach {\n  // body code\n}</code></pre>\nis similar to:\n<pre><code>for element in sequence {\n  // body code\n}</code></pre>\n<strong>Note:</strong> You cannot use the <code>break</code> or <code>continue</code> statement to exit the\n  current call of the <code>body</code> closure or skip subsequent calls.\n<strong>Note:</strong> Using the <code>return</code> statement in the <code>body</code> closure will only\n  exit from the current call to <code>body</code>, not any outer scope, and won't\n  skip subsequent calls.\n<strong>Complexity:</strong> O(<code>self.count</code>)\n    Declaration    \n    <code>func forEach(@noescape body: (Self.Generator.Element) throws -&gt; Void) rethrows</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func--foreach_
SequenceType.lexicographicalCompare	A										Returns <code>true</code> iff <code>self</code> precedes <code>other</code> in a lexicographical \n(&quot;dictionary&quot;) ordering, using <code>isOrderedBefore</code> as the comparison \nbetween elements.\n<strong>Note:</strong> This method implements the mathematical notion of lexicographical\n  ordering, which has no connection to Unicode.  If you are sorting strings\n  to present to the end-user, you should use <code>String</code> APIs that perform\nlocalized comparison.\n<strong>Requires:</strong> <code>isOrderedBefore</code> is a\n  strict weak ordering\n  over the elements of <code>self</code> and <code>other</code>.\n    Declaration    \n    <code>func lexicographicalCompare&lt;OtherSequence : SequenceType where OtherSequence.Generator.Element == Generator.Element&gt;(other: OtherSequence, @noescape isOrderedBefore: (Self.Generator.Element, Self.Generator.Element) throws -&gt; Bool) rethrows -&gt; Bool</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func--lexicographicalcompare_isorderedbefore_
SequenceType.map	A										Returns an <code>Array</code> containing the results of mapping <code>transform</code>\nover <code>self</code>.\n<strong>Complexity:</strong> O(N).\n    Declaration    \n    <code>func map&lt;T&gt;(@noescape transform: (Self.Generator.Element) throws -&gt; T) rethrows -&gt; [T]</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func--map_
SequenceType.maxElement	A										Returns the maximum element in <code>self</code> or <code>nil</code> if the sequence is empty.\n<strong>Complexity:</strong> O(<code>elements.count</code>).\n<strong>Requires:</strong> <code>isOrderedBefore</code> is a\n  strict weak ordering\n  over <code>self</code>.\n    Declaration    \n    <code>func maxElement(@noescape isOrderedBefore: (Self.Generator.Element, Self.Generator.Element) throws -&gt; Bool) rethrows -&gt; Self.Generator.Element?</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func--maxelement_
SequenceType.minElement	A										Returns the minimum element in <code>self</code> or <code>nil</code> if the sequence is empty.\n<strong>Complexity:</strong> O(<code>elements.count</code>).\n<strong>Requires:</strong> <code>isOrderedBefore</code> is a\n  strict weak ordering\n  over <code>self</code>.\n    Declaration    \n    <code>func minElement(@noescape isOrderedBefore: (Self.Generator.Element, Self.Generator.Element) throws -&gt; Bool) rethrows -&gt; Self.Generator.Element?</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func--minelement_
SequenceType.reduce	A										Returns the result of repeatedly calling <code>combine</code> with an\naccumulated value initialized to <code>initial</code> and each element of\n<code>self</code>, in turn, i.e. return\n<code>combine(combine(...combine(combine(initial, self[0]),\nself[1]),...self[count-2]), self[count-1])</code>.\n    Declaration    \n    <code>func reduce&lt;T&gt;(initial: T, @noescape combine: (T, Self.Generator.Element) throws -&gt; T) rethrows -&gt; T</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func--reduce_combine_
SequenceType.reverse	A										Returns an <code>Array</code> containing the elements of <code>self</code> in reverse\norder.\nComplexity: O(N), where N is the length of <code>self</code>.\n    Declaration    \n    <code>func reverse() -&gt; [Self.Generator.Element]</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func--reverse
SequenceType.sort	A										Returns an <code>Array</code> containing the sorted elements of <code>source</code>\naccording to <code>isOrderedBefore</code>.\nThe sorting algorithm is not stable (can change the relative order of\nelements for which <code>isOrderedBefore</code> does not establish an order).\n<strong>Requires:</strong> <code>isOrderedBefore</code> is a\n  strict weak ordering\n  over the elements in <code>self</code>.\n    Declaration    \n    <code>func sort(@noescape isOrderedBefore: (Self.Generator.Element, Self.Generator.Element) -&gt; Bool) -&gt; [Self.Generator.Element]</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func--sort_
SequenceType.split	A										Returns the maximal <code>SubSequence</code>s of <code>self</code>, in order, that\ndon't contain elements satisfying the predicate <code>isSeparator</code>.\n<strong><code>maxSplit</code>:</strong>  The maximum number of <code>SubSequence</code>s to\n  return, minus 1.\n  If <code>maxSplit + 1</code> <code>SubSequence</code>s are returned, the last one is\n  a suffix of <code>self</code> containing the remaining elements.\n  The default value is <code>Int.max</code>.\n<strong><code>allowEmptySubsequences</code>:</strong>  If <code>true</code>, an empty <code>SubSequence</code>\n  is produced in the result for each pair of consecutive elements\n  satisfying <code>isSeparator</code>.\n  The default value is <code>false</code>.\n<strong>Requires:</strong> <code>maxSplit &gt;= 0</code>\n    Declaration    \n    <code>func split(maxSplit: Int = default, allowEmptySlices: Bool = default, @noescape isSeparator: (Self.Generator.Element) throws -&gt; Bool) rethrows -&gt; [AnySequence&lt;Self.Generator.Element&gt;]</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func--split_allowemptyslices_isseparator_
SequenceType.startsWith	A										Returns <code>true</code> iff <code>self</code> begins with elements equivalent to those of\n<code>other</code>, using <code>isEquivalent</code> as the equivalence test.  Returns <code>true</code> if\n<code>other</code> is empty.\n<strong>Requires:</strong> <code>isEquivalent</code> is an\n  equivalence relation.\n    Declaration    \n    <code>func startsWith&lt;OtherSequence : SequenceType where OtherSequence.Generator.Element == Generator.Element&gt;(other: OtherSequence, @noescape isEquivalent: (Self.Generator.Element, Self.Generator.Element) throws -&gt; Bool) rethrows -&gt; Bool</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func--startswith_isequivalent_
SequenceType.suffix	A										Declaration    \n    <code>func suffix(maxLength: Int) -&gt; AnySequence&lt;Self.Generator.Element&gt;</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func--suffix_
SequenceType.underestimateCount	A										Returns a value less than or equal to the number of elements in\n<code>self</code>, <strong>nondestructively</strong>.\n<strong>Complexity:</strong> O(N).\n    Declaration    \n    <code>func underestimateCount() -&gt; Int</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func--underestimatecount
SequenceType.generate	A										Declaration    \n    <code>func generate() -&gt; Self</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-generator-self-self_-generatortype-generate
SequenceType.lexicographicalCompare	A										Returns <code>true</code> iff <code>self</code> precedes <code>other</code> in a lexicographical\n(&quot;dictionary&quot;) ordering, using &quot;&lt;&quot; as the comparison between elements.\n<strong>Note:</strong> This method implements the mathematical notion of lexicographical\n  ordering, which has no connection to Unicode.  If you are sorting strings\n  to present to the end-user, you should use <code>String</code> APIs that perform\nlocalized comparison.\n    Declaration    \n    <code>func lexicographicalCompare&lt;OtherSequence : SequenceType where OtherSequence.Generator.Element == Generator.Element&gt;(other: OtherSequence) -&gt; Bool</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-generator-element_-comparable-lexicographicalcompare_
SequenceType.maxElement	A										Returns the maximum element in <code>self</code> or <code>nil</code> if the sequence is empty.\n<strong>Complexity:</strong> O(<code>elements.count</code>).\n  \n    Declaration    \n    <code>func maxElement() -&gt; Self.Generator.Element?</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-generator-element_-comparable-maxelement
SequenceType.minElement	A										Returns the minimum element in <code>self</code> or <code>nil</code> if the sequence is empty.\n<strong>Complexity:</strong> O(<code>elements.count</code>).\n    Declaration    \n    <code>func minElement() -&gt; Self.Generator.Element?</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-generator-element_-comparable-minelement
SequenceType.sort	A										Returns an <code>Array</code> containing the sorted elements of <code>source</code>.\nThe sorting algorithm is not stable (can change the relative order of\nelements that compare equal).\n<strong>Requires:</strong> The less-than operator (<code>func &lt;</code>) defined in\n  the <code>Comparable</code> conformance is a\n  strict weak ordering\n  over the elements in <code>self</code>.\n    Declaration    \n    <code>func sort() -&gt; [Self.Generator.Element]</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-generator-element_-comparable-sort
SequenceType.contains	A										Returns <code>true</code> iff <code>element</code> is in <code>self</code>.\n    Declaration    \n    <code>func contains(element: Self.Generator.Element) -&gt; Bool</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-generator-element_-equatable-contains_
SequenceType.elementsEqual	A										Returns <code>true</code> iff <code>self</code> and <code>other</code> contain the same elements in the\nsame order.\n    Declaration    \n    <code>func elementsEqual&lt;OtherSequence : SequenceType where OtherSequence.Generator.Element == Generator.Element&gt;(other: OtherSequence) -&gt; Bool</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-generator-element_-equatable-elementsequal_
SequenceType.split	A										Returns the maximal <code>SubSequence</code>s of <code>self</code>, in order, around elements\nequatable to <code>separator</code>.\n<strong><code>maxSplit</code>:</strong>  The maximum number of <code>SubSequence</code>s to\n  return, minus 1.\n  If <code>maxSplit + 1</code> <code>SubSequence</code>s are returned, the last one is\n  a suffix of <code>self</code> containing the remaining elements.\n  The default value is <code>Int.max</code>.\n<strong><code>allowEmptySubsequences</code>:</strong>  If <code>true</code>, an empty <code>SubSequence</code>\n  is produced in the result for each pair of consecutive elements\n  satisfying <code>isSeparator</code>.\n  The default value is <code>false</code>.\n<strong>Requires:</strong> <code>maxSplit &gt;= 0</code>\n    Declaration    \n    <code>func split(separator: Self.Generator.Element, maxSplit: Int = default, allowEmptySlices: Bool = default) -&gt; [AnySequence&lt;Self.Generator.Element&gt;]</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-generator-element_-equatable-split_maxsplit_allowemptyslices_
SequenceType.startsWith	A										Returns <code>true</code> iff the initial elements of <code>self</code> are equal to <code>prefix</code>.\nReturns <code>true</code> if <code>other</code> is empty.\n    Declaration    \n    <code>func startsWith&lt;OtherSequence : SequenceType where OtherSequence.Generator.Element == Generator.Element&gt;(other: OtherSequence) -&gt; Bool</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-generator-element_-equatable-startswith_
SequenceType.flatten	A										A concatenation of the elements of <code>self</code>.\n    Declaration    \n    <code>func flatten() -&gt; FlattenSequence&lt;Self&gt;</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-generator-element_-sequencetype-flatten
SequenceType.joinWithSeparator	A										Returns a view, whose elements are the result of interposing a given\n<code>separator</code> between the elements of the sequence <code>self</code>.\nFor example,\n<code>[[1, 2, 3], [4, 5, 6], [7, 8, 9]].joinWithSeparator([-1, -2])</code>\nyields <code>[1, 2, 3, -1, -2, 4, 5, 6, -1, -2, 7, 8, 9]</code>.\n    Declaration    \n    <code>func joinWithSeparator&lt;Separator : SequenceType where Separator.Generator.Element == Generator.Element.Generator.Element&gt;(separator: Separator) -&gt; JoinSequence&lt;Self&gt;</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-generator-element_-sequencetype-joinwithseparator_
SequenceType.joinWithSeparator	A										Interpose the <code>separator</code> between elements of <code>self</code>, then concatenate\nthe result.  For example:\n<pre><code>[&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;].joinWithSeparator(&quot;-|-&quot;) // &quot;foo-|-bar-|-baz&quot;</code></pre>\n    Declaration    \n    <code>func joinWithSeparator(separator: String) -&gt; String</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-generator-element-string-joinwithseparator_
SequenceType.filter	A										Declaration    \n    <code>func filter(@noescape includeElement: (Self.Generator.Element) throws -&gt; Bool) rethrows -&gt; [Self.Generator.Element]</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-self_-sequencewrappertype-generator-base-generator-filter_
SequenceType.generate	A										Returns a generator over the elements of this sequence.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; Self.Generator</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-self_-sequencewrappertype-generator-base-generator-generate
SequenceType.map	A										Declaration    \n    <code>func map&lt;T&gt;(@noescape transform: (Self.Generator.Element) throws -&gt; T) rethrows -&gt; [T]</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-self_-sequencewrappertype-generator-base-generator-map_
SequenceType.underestimateCount	A										Declaration    \n    <code>func underestimateCount() -&gt; Int</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-self_-sequencewrappertype-generator-base-generator-underestimatecount
SequenceType.dropFirst	A										Returns a subsequence containing all but the first <code>n</code> elements.\n<strong>Requires:</strong> <code>n &gt;= 0</code>\n<strong>Complexity:</strong> O(<code>n</code>)\n    Declaration    \n    <code>func dropFirst(n: Int) -&gt; AnySequence&lt;Self.Generator.Element&gt;</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-subsequence_-sequencetype-subsequence-generator-element-generator-element-subsequence-subsequence-subsequence-dropfirst_
SequenceType.dropLast	A										Returns a subsequence containing all but the last <code>n</code> elements.\n<strong>Requires:</strong> <code>self</code> is a finite collection.\n<strong>Requires:</strong> <code>n &gt;= 0</code>\n<strong>Complexity:</strong> O(<code>self.count</code>)\n    Declaration    \n    <code>func dropLast(n: Int) -&gt; AnySequence&lt;Self.Generator.Element&gt;</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-subsequence_-sequencetype-subsequence-generator-element-generator-element-subsequence-subsequence-subsequence-droplast_
SequenceType.prefix	A										Declaration    \n    <code>func prefix(maxLength: Int) -&gt; AnySequence&lt;Self.Generator.Element&gt;</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#func-subsequence_-sequencetype-subsequence-generator-element-generator-element-subsequence-subsequence-subsequence-prefix_
SequenceType.lazy	A										A sequence containing the same elements as a <code>Base</code> sequence,\nbut on which some operations such as <code>map</code> and <code>filter</code> are\nimplemented lazily.\n<strong>See Also:</strong> <code>LazySequenceType</code>, <code>LazySequence</code>\n    Declaration    \n    <code>var lazy: LazySequence&lt;Self&gt; { get }</code>	http://swiftdoc.org/v2.2/protocol/SequenceType/#-var-lazy_-lazysequence-self
dropFirst	R	SequenceType.dropFirst										
dropLast	R	SequenceType.dropLast										
filter	R	SequenceType.filter										
forEach	R	SequenceType.forEach										
generate	R	SequenceType.generate										
map	R	SequenceType.map										
prefix	R	SequenceType.prefix										
split	R	SequenceType.split										
suffix	R	SequenceType.suffix										
underestimateCount	R	SequenceType.underestimateCount										
contains	R	SequenceType.contains										
dropFirst	R	SequenceType.dropFirst										
dropLast	R	SequenceType.dropLast										
elementsEqual	R	SequenceType.elementsEqual										
enumerate	R	SequenceType.enumerate										
filter	R	SequenceType.filter										
flatMap	R	SequenceType.flatMap										
flatMap	R	SequenceType.flatMap										
forEach	R	SequenceType.forEach										
lexicographicalCompare	R	SequenceType.lexicographicalCompare										
map	R	SequenceType.map										
maxElement	R	SequenceType.maxElement										
minElement	R	SequenceType.minElement										
reduce	R	SequenceType.reduce										
reverse	R	SequenceType.reverse										
sort	R	SequenceType.sort										
split	R	SequenceType.split										
startsWith	R	SequenceType.startsWith										
suffix	R	SequenceType.suffix										
underestimateCount	R	SequenceType.underestimateCount										
generate	R	SequenceType.generate										
lexicographicalCompare	R	SequenceType.lexicographicalCompare										
maxElement	R	SequenceType.maxElement										
minElement	R	SequenceType.minElement										
sort	R	SequenceType.sort										
contains	R	SequenceType.contains										
elementsEqual	R	SequenceType.elementsEqual										
split	R	SequenceType.split										
startsWith	R	SequenceType.startsWith										
flatten	R	SequenceType.flatten										
joinWithSeparator	R	SequenceType.joinWithSeparator										
joinWithSeparator	R	SequenceType.joinWithSeparator										
filter	R	SequenceType.filter										
generate	R	SequenceType.generate										
map	R	SequenceType.map										
underestimateCount	R	SequenceType.underestimateCount										
dropFirst	R	SequenceType.dropFirst										
dropLast	R	SequenceType.dropLast										
prefix	R	SequenceType.prefix										
lazy	R	SequenceType.lazy										
MutableCollectionType	A										<pre><code>protocol MutableCollectionType</code></pre>A collection that supports subscript assignment.\nFor any instance <code>a</code> of a type conforming to\n<code>MutableCollectionType</code>, :\n<pre><code>a[i] = x\nlet y = a[i]</code></pre>\nis equivalent to:\n<pre><code>a[i] = x\nlet y = x</code></pre>	http://swiftdoc.org/v2.2/protocol/MutableCollectionType/
MutableCollectionType.partition	A										Re-order the given <code>range</code> of elements in <code>self</code> and return\na pivot index p.\n<strong>Postcondition:</strong> For all i in <code>range.startIndex..&lt;</code>p, and j\n  in p<code>..&lt;range.endIndex</code>, <code>less(self[</code>i<code>],\n  self[</code>j<code>]) &amp;&amp; !less(self[</code>j<code>], self[</code>p<code>])</code>.\n  Only returns <code>range.endIndex</code> when <code>self</code> is empty.\n<strong>Requires:</strong> <code>isOrderedBefore</code> is a\n  strict weak ordering\n  over the elements in <code>self</code>.\n    Declaration    \n    <code>mutating func partition(range: Range&lt;Self.Index&gt;, isOrderedBefore: (Self.Generator.Element, Self.Generator.Element) -&gt; Bool) -&gt; Self.Index</code>	http://swiftdoc.org/v2.2/protocol/MutableCollectionType/#func-index_-randomaccessindextype-partition_isorderedbefore_
MutableCollectionType.sortInPlace	A										Sort <code>self</code> in-place according to <code>isOrderedBefore</code>.\nThe sorting algorithm is not stable (can change the relative order of\nelements for which <code>isOrderedBefore</code> does not establish an order).\n<strong>Requires:</strong> <code>isOrderedBefore</code> is a\n  strict weak ordering\n  over the elements in <code>self</code>.\n    Declaration    \n    <code>mutating func sortInPlace(@noescape isOrderedBefore: (Self.Generator.Element, Self.Generator.Element) -&gt; Bool)</code>	http://swiftdoc.org/v2.2/protocol/MutableCollectionType/#func-index_-randomaccessindextype-sortinplace_
MutableCollectionType.partition	A										Re-order the given <code>range</code> of elements in <code>self</code> and return\na pivot index p.\n<strong>Postcondition:</strong> For all i in <code>range.startIndex..&lt;</code>p, and j\n  in p<code>..&lt;range.endIndex</code>, <code>less(self[</code>i<code>],\n  self[</code>j<code>]) &amp;&amp; !less(self[</code>j<code>], self[</code>p<code>])</code>.\n  Only returns <code>range.endIndex</code> when <code>self</code> is empty.\n<strong>Requires:</strong> The less-than operator (<code>func &lt;</code>) defined in\n  the <code>Comparable</code> conformance is a\n  strict weak ordering\n  over the elements in <code>self</code>.\n    Declaration    \n    <code>mutating func partition(range: Range&lt;Self.Index&gt;) -&gt; Self.Index</code>	http://swiftdoc.org/v2.2/protocol/MutableCollectionType/#func-index_-randomaccessindextype-generator-element_-comparable-partition_
MutableCollectionType.sortInPlace	A										Sort <code>self</code> in-place.\nThe sorting algorithm is not stable (can change the relative order of\nelements that compare equal).\n<strong>Requires:</strong> The less-than operator (<code>func &lt;</code>) defined in\n  the <code>Comparable</code> conformance is a\n  strict weak ordering\n  over the elements in <code>self</code>.\n    Declaration    \n    <code>mutating func sortInPlace()</code>	http://swiftdoc.org/v2.2/protocol/MutableCollectionType/#func-index_-randomaccessindextype-generator-element_-comparable-sortinplace
partition	R	MutableCollectionType.partition										
sortInPlace	R	MutableCollectionType.sortInPlace										
partition	R	MutableCollectionType.partition										
sortInPlace	R	MutableCollectionType.sortInPlace										
_NSFastEnumerationType	A										<pre><code>protocol _NSFastEnumerationType</code></pre>A shadow for the <code>NSFastEnumeration</code> protocol.	http://swiftdoc.org/v2.2/protocol/_NSFastEnumerationType/
_NSFastEnumerationType.countByEnumeratingWithState	A										Declaration    \n    <code>func countByEnumeratingWithState(state: UnsafeMutablePointer&lt;_SwiftNSFastEnumerationState&gt;, objects: UnsafeMutablePointer&lt;AnyObject&gt;, count: Int) -&gt; Int</code>	http://swiftdoc.org/v2.2/protocol/_NSFastEnumerationType/#func-countbyenumeratingwithstate_objects_count_
countByEnumeratingWithState	R	_NSFastEnumerationType.countByEnumeratingWithState										
_IntegerType	A										<pre><code>protocol _IntegerType</code></pre>This protocol is an implementation detail of <code>IntegerType</code>; do\nnot use it directly.	http://swiftdoc.org/v2.2/protocol/_IntegerType/
_IntegerArithmeticType	A										<pre><code>protocol _IntegerArithmeticType</code></pre>This protocol is an implementation detail of <code>IntegerArithmeticType</code>; do\nnot use it directly.\nIts requirements are inherited by <code>IntegerArithmeticType</code> and thus must\nbe satisfied by types conforming to that protocol.	http://swiftdoc.org/v2.2/protocol/_IntegerArithmeticType/
_IntegerArithmeticType.addWithOverflow	A										Adds <code>lhs</code> and <code>rhs</code>, returning the result and a <code>Bool</code> that is\n<code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func addWithOverflow(lhs: Self, _ rhs: Self) -&gt; (Self, overflow: Bool)</code>	http://swiftdoc.org/v2.2/protocol/_IntegerArithmeticType/#func-addwithoverflow__
_IntegerArithmeticType.divideWithOverflow	A										Divides <code>lhs</code> and <code>rhs</code>, returning the result and a <code>Bool</code> that is\n<code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func divideWithOverflow(lhs: Self, _ rhs: Self) -&gt; (Self, overflow: Bool)</code>	http://swiftdoc.org/v2.2/protocol/_IntegerArithmeticType/#func-dividewithoverflow__
_IntegerArithmeticType.multiplyWithOverflow	A										Multiplies <code>lhs</code> and <code>rhs</code>, returning the result and a <code>Bool</code> that is\n<code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func multiplyWithOverflow(lhs: Self, _ rhs: Self) -&gt; (Self, overflow: Bool)</code>	http://swiftdoc.org/v2.2/protocol/_IntegerArithmeticType/#func-multiplywithoverflow__
_IntegerArithmeticType.remainderWithOverflow	A										Divides <code>lhs</code> and <code>rhs</code>, returning the remainder and a <code>Bool</code> that is\n<code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func remainderWithOverflow(lhs: Self, _ rhs: Self) -&gt; (Self, overflow: Bool)</code>	http://swiftdoc.org/v2.2/protocol/_IntegerArithmeticType/#func-remainderwithoverflow__
_IntegerArithmeticType.subtractWithOverflow	A										Subtracts <code>lhs</code> and <code>rhs</code>, returning the result and a <code>Bool</code> that is\n<code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func subtractWithOverflow(lhs: Self, _ rhs: Self) -&gt; (Self, overflow: Bool)</code>	http://swiftdoc.org/v2.2/protocol/_IntegerArithmeticType/#func-subtractwithoverflow__
addWithOverflow	R	_IntegerArithmeticType.addWithOverflow										
divideWithOverflow	R	_IntegerArithmeticType.divideWithOverflow										
multiplyWithOverflow	R	_IntegerArithmeticType.multiplyWithOverflow										
remainderWithOverflow	R	_IntegerArithmeticType.remainderWithOverflow										
subtractWithOverflow	R	_IntegerArithmeticType.subtractWithOverflow										
_DisallowMixedSignArithmetic	A										<pre><code>protocol _DisallowMixedSignArithmetic</code></pre>This protocol is an implementation detail of <code>UnsignedIntegerType</code>;\ndo not use it directly.	http://swiftdoc.org/v2.2/protocol/_DisallowMixedSignArithmetic/
String.UnicodeScalarView	A										<pre><code>struct String.UnicodeScalarView</code></pre>A collection of Unicode scalar values that\nencodes a <code>String</code> value.	http://swiftdoc.org/v2.2/type/String.UnicodeScalarView/
String.UnicodeScalarView.generate	A										Returns a generator over the <code>UnicodeScalar</code>s that comprise\nthis sequence.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; String.UnicodeScalarView.Generator</code>	http://swiftdoc.org/v2.2/type/String.UnicodeScalarView/#func-generate
String.UnicodeScalarView.replaceRange	A										Replace the given <code>subRange</code> of elements with <code>newElements</code>.\nInvalidates all indices with respect to <code>self</code>.\n<strong>Complexity:</strong> O(<code>subRange.count</code>) if <code>subRange.endIndex\n  == self.endIndex</code> and <code>newElements.isEmpty</code>, O(N) otherwise.\n    Declaration    \n    <code>mutating func replaceRange&lt;C : CollectionType where C.Generator.Element == UnicodeScalar&gt;(subRange: Range&lt;String.UnicodeScalarView.Index&gt;, with newElements: C)</code>	http://swiftdoc.org/v2.2/type/String.UnicodeScalarView/#func-replacerange_with_
String.UnicodeScalarView.debugDescription	A										Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/String.UnicodeScalarView/#var-debugdescription_-string
String.UnicodeScalarView.description	A										Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/String.UnicodeScalarView/#var-description_-string
String.UnicodeScalarView.endIndex	A										The &quot;past the end&quot; position.\n<code>endIndex</code> is not a valid argument to <code>subscript</code>, and is always\nreachable from <code>startIndex</code> by zero or more applications of\n<code>successor()</code>.\n    Declaration    \n    <code>var endIndex: String.UnicodeScalarView.Index { get }</code>	http://swiftdoc.org/v2.2/type/String.UnicodeScalarView/#var-endindex_-string-unicodescalarview-index
String.UnicodeScalarView.startIndex	A										The position of the first <code>UnicodeScalar</code> if the <code>String</code> is\nnon-empty; identical to <code>endIndex</code> otherwise.\n    Declaration    \n    <code>var startIndex: String.UnicodeScalarView.Index { get }</code>	http://swiftdoc.org/v2.2/type/String.UnicodeScalarView/#var-startindex_-string-unicodescalarview-index
UnicodeScalarView	R	String.UnicodeScalarView										
generate	R	String.UnicodeScalarView.generate										
replaceRange	R	String.UnicodeScalarView.replaceRange										
debugDescription	R	String.UnicodeScalarView.debugDescription										
description	R	String.UnicodeScalarView.description										
endIndex	R	String.UnicodeScalarView.endIndex										
startIndex	R	String.UnicodeScalarView.startIndex										
UnsafeMutableBufferPointer	A										<pre><code>struct UnsafeMutableBufferPointer&lt;Element&gt;</code></pre>A non-owning pointer to buffer of mutable <code>Element</code>s stored\ncontiguously in memory, presenting a <code>Collection</code> interface to the\nunderlying elements.\nThe pointer should be aligned to <code>alignof(Element.self)</code>.	http://swiftdoc.org/v2.2/type/UnsafeMutableBufferPointer/
UnsafeMutableBufferPointer.generate	A										Returns a generator over the elements of this sequence.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; UnsafeBufferPointerGenerator&lt;Element&gt;</code>	http://swiftdoc.org/v2.2/type/UnsafeMutableBufferPointer/#func-generate
UnsafeMutableBufferPointer.baseAddress	A										A pointer to the first element of the buffer.\n    Declaration    \n    <code>var baseAddress: UnsafeMutablePointer&lt;Element&gt; { get }</code>	http://swiftdoc.org/v2.2/type/UnsafeMutableBufferPointer/#var-baseaddress_-unsafemutablepointer-element
UnsafeMutableBufferPointer.count	A										The number of elements in the buffer.\n    Declaration    \n    <code>var count: Int { get }</code>	http://swiftdoc.org/v2.2/type/UnsafeMutableBufferPointer/#var-count_-int
UnsafeMutableBufferPointer.debugDescription	A										A textual representation of <code>self</code>, suitable for debugging.\n    Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/UnsafeMutableBufferPointer/#var-debugdescription_-string
UnsafeMutableBufferPointer.endIndex	A										The &quot;past the end&quot; position; always identical to <code>count</code>.\n<code>endIndex</code> is not a valid argument to <code>subscript</code>, and is always\nreachable from <code>startIndex</code> by zero or more applications of\n<code>successor()</code>.\n    Declaration    \n    <code>var endIndex: Int { get }</code>	http://swiftdoc.org/v2.2/type/UnsafeMutableBufferPointer/#var-endindex_-int
UnsafeMutableBufferPointer.startIndex	A										Always zero, which is the index of the first element in a\nnon-empty buffer.\n    Declaration    \n    <code>var startIndex: Int { get }</code>	http://swiftdoc.org/v2.2/type/UnsafeMutableBufferPointer/#var-startindex_-int
generate	R	UnsafeMutableBufferPointer.generate										
baseAddress	R	UnsafeMutableBufferPointer.baseAddress										
count	R	UnsafeMutableBufferPointer.count										
debugDescription	R	UnsafeMutableBufferPointer.debugDescription										
endIndex	R	UnsafeMutableBufferPointer.endIndex										
startIndex	R	UnsafeMutableBufferPointer.startIndex										
CollectionType	A										<pre><code>protocol CollectionType</code></pre>A multi-pass sequence with addressable positions.\nPositions are represented by an associated <code>Index</code> type.  Whereas\nan arbitrary sequence may be consumed as it is traversed, a\ncollection is multi-pass: any element may be revisited merely by\nsaving its index.\nThe sequence view of the elements is identical to the collection\nview.  In other words, the following code binds the same series of\nvalues to <code>x</code> as does <code>for x in self {}</code>:\n<pre><code>for i in startIndex..&lt;endIndex {\n  let x = self[i]\n}</code></pre>	http://swiftdoc.org/v2.2/protocol/CollectionType/
CollectionType.prefixThrough	A										Returns <code>prefixUpTo(position.successor())</code>\n<strong>Complexity:</strong> O(1)\n    Declaration    \n    <code>func prefixThrough(position: Self.Index) -&gt; Self.SubSequence</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func-prefixthrough_
CollectionType.prefixUpTo	A										Returns <code>self[startIndex..&lt;end]</code>\n<strong>Complexity:</strong> O(1)\n    Declaration    \n    <code>func prefixUpTo(end: Self.Index) -&gt; Self.SubSequence</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func-prefixupto_
CollectionType.suffixFrom	A										Returns <code>self[start..&lt;endIndex]</code>\n<strong>Complexity:</strong> O(1)\n    Declaration    \n    <code>func suffixFrom(start: Self.Index) -&gt; Self.SubSequence</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func-suffixfrom_
CollectionType.dropFirst	A										Returns a subsequence containing all but the first <code>n</code> elements.\n<strong>Requires:</strong> <code>n &gt;= 0</code>\n<strong>Complexity:</strong> O(<code>n</code>)\n    Declaration    \n    <code>func dropFirst(n: Int) -&gt; Self.SubSequence</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func--dropfirst_
CollectionType.dropLast	A										Returns a subsequence containing all but the last <code>n</code> elements.\n<strong>Requires:</strong> <code>n &gt;= 0</code>\n<strong>Complexity:</strong> O(<code>self.count</code>)\n    Declaration    \n    <code>func dropLast(n: Int) -&gt; Self.SubSequence</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func--droplast_
CollectionType.indexOf	A										Returns the first index where <code>predicate</code> returns <code>true</code> for the\ncorresponding value, or <code>nil</code> if such value is not found.\n<strong>Complexity:</strong> O(<code>self.count</code>).\n    Declaration    \n    <code>func indexOf(@noescape predicate: (Self.Generator.Element) throws -&gt; Bool) rethrows -&gt; Self.Index?</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func--indexof_
CollectionType.prefix	A										Returns a subsequence, up to <code>maxLength</code> in length, containing the\ninitial elements.\nIf <code>maxLength</code> exceeds <code>self.count</code>, the result contains all\nthe elements of <code>self</code>.\n<strong>Requires:</strong> <code>maxLength &gt;= 0</code>\n<strong>Complexity:</strong> O(<code>maxLength</code>)\n    Declaration    \n    <code>func prefix(maxLength: Int) -&gt; Self.SubSequence</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func--prefix_
CollectionType.prefixThrough	A										Returns <code>prefixUpTo(position.successor())</code>\n<strong>Complexity:</strong> O(1)\n    Declaration    \n    <code>func prefixThrough(position: Self.Index) -&gt; Self.SubSequence</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func--prefixthrough_
CollectionType.prefixUpTo	A										Returns <code>self[startIndex..&lt;end]</code>\n<strong>Complexity:</strong> O(1)\n    Declaration    \n    <code>func prefixUpTo(end: Self.Index) -&gt; Self.SubSequence</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func--prefixupto_
CollectionType.suffixFrom	A										Returns <code>self[start..&lt;endIndex]</code>\n<strong>Complexity:</strong> O(1)\n    Declaration    \n    <code>func suffixFrom(start: Self.Index) -&gt; Self.SubSequence</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func--suffixfrom_
CollectionType.generate	A										Declaration    \n    <code>func generate() -&gt; IndexingGenerator&lt;Self&gt;</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func-generator-indexinggenerator-self-generate
CollectionType.flatten	A										A concatenation of the elements of <code>self</code>.\n    Declaration    \n    <code>func flatten() -&gt; FlattenCollection&lt;Self&gt;</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func-generator-element_-collectiontype-flatten
CollectionType.flatten	A										A concatenation of the elements of <code>self</code>.\n    Declaration    \n    <code>func flatten() -&gt; FlattenBidirectionalCollection&lt;Self&gt;</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func-generator-element_-collectiontype-index_-bidirectionalindextype-generator-element-index_-bidirectionalindextype-flatten
CollectionType.indexOf	A										Returns the first index where <code>value</code> appears in <code>self</code> or <code>nil</code> if\n<code>value</code> is not found.\n<strong>Complexity:</strong> O(<code>self.count</code>).\n    Declaration    \n    <code>func indexOf(element: Self.Generator.Element) -&gt; Self.Index?</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func-generator-element_-equatable-indexof_
CollectionType.dropLast	A										Returns a subsequence containing all but the last <code>n</code> elements.\n<strong>Requires:</strong> <code>n &gt;= 0</code>\n<strong>Complexity:</strong> O(<code>n</code>)\n    Declaration    \n    <code>func dropLast(n: Int) -&gt; Self.SubSequence</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func-index_-bidirectionalindextype-droplast_
CollectionType.reverse	A										Returns the elements of <code>self</code> in reverse order.\n<strong>Complexity:</strong> O(1)\n    Declaration    \n    <code>func reverse() -&gt; ReverseCollection&lt;Self&gt;</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func-index_-bidirectionalindextype-reverse
CollectionType.suffix	A										Returns a slice, up to <code>maxLength</code> in length, containing the\nfinal elements of <code>s</code>.\nIf <code>maxLength</code> exceeds <code>s.count</code>, the result contains all\nthe elements of <code>s</code>.\n<strong>Requires:</strong> <code>maxLength &gt;= 0</code>\n<strong>Complexity:</strong> O(<code>maxLength</code>)\n    Declaration    \n    <code>func suffix(maxLength: Int) -&gt; Self.SubSequence</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func-index_-bidirectionalindextype-suffix_
CollectionType.reverse	A										Returns the elements of <code>self</code> in reverse order.\n<strong>Complexity:</strong> O(1)\n    Declaration    \n    <code>func reverse() -&gt; ReverseRandomAccessCollection&lt;Self&gt;</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func-index_-randomaccessindextype-reverse
CollectionType.filter	A										Declaration    \n    <code>func filter(@noescape includeElement: (Self.Base.Generator.Element) -&gt; Bool) -&gt; [Self.Base.Generator.Element]</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func-self_-collectionwrappertype-index-base-index-filter_
CollectionType.map	A										Declaration    \n    <code>func map&lt;T&gt;(@noescape transform: (Self.Base.Generator.Element) -&gt; T) -&gt; [T]</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func-self_-collectionwrappertype-index-base-index-map_
CollectionType.popFirst	A										If <code>!self.isEmpty</code>, remove the first element and return it, otherwise\nreturn <code>nil</code>.\n<strong>Complexity:</strong> O(1)\n    Declaration    \n    <code>mutating func popFirst() -&gt; Self.Generator.Element?</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func-subsequence-self-popfirst
CollectionType.popLast	A										If <code>!self.isEmpty</code>, remove the last element and return it, otherwise\nreturn <code>nil</code>.\n<strong>Complexity:</strong> O(<code>self.count</code>)\nDeprecated: it will be removed in Swift 3.\n    Declaration    \n    <code>mutating func popLast() -&gt; Self.Generator.Element?</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func-subsequence-self-poplast
CollectionType.removeFirst	A										Remove the element at <code>startIndex</code> and return it.\n<strong>Complexity:</strong> O(1)\n<strong>Requires:</strong> <code>!self.isEmpty</code>.\n    Declaration    \n    <code>mutating func removeFirst() -&gt; Self.Generator.Element</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func-subsequence-self-removefirst
CollectionType.removeFirst	A										Remove the first <code>n</code> elements.\n<strong>Complexity:</strong>\n  - O(1) if <code>Index</code> conforms to <code>RandomAccessIndexType</code>\n  - O(n) otherwise\n<strong>Requires:</strong> <code>n &gt;= 0 &amp;&amp; self.count &gt;= n</code>.\n    Declaration    \n    <code>mutating func removeFirst(n: Int)</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func-subsequence-self-removefirst_
CollectionType.popLast	A										If <code>!self.isEmpty</code>, remove the last element and return it, otherwise\nreturn <code>nil</code>.\n<strong>Complexity:</strong> O(1)\n    Declaration    \n    <code>mutating func popLast() -&gt; Self.Generator.Element?</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func-subsequence-self-index_-bidirectionalindextype-poplast
CollectionType.removeLast	A										Remove an element from the end.\n<strong>Complexity:</strong> O(1)\n<strong>Requires:</strong> <code>!self.isEmpty</code>\n    Declaration    \n    <code>mutating func removeLast() -&gt; Self.Generator.Element</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func-subsequence-self-index_-bidirectionalindextype-removelast
CollectionType.removeLast	A										Remove the last <code>n</code> elements.\n<strong>Complexity:</strong>\n  - O(1) if <code>Index</code> conforms to <code>RandomAccessIndexType</code>\n  - O(n) otherwise\n<strong>Requires:</strong> <code>n &gt;= 0 &amp;&amp; self.count &gt;= n</code>.\n    Declaration    \n    <code>mutating func removeLast(n: Int)</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#func-subsequence-self-index_-bidirectionalindextype-removelast_
CollectionType.count	A										Returns the number of elements.\n<strong>Complexity:</strong> O(1) if <code>Index</code> conforms to <code>RandomAccessIndexType</code>;\n  O(N) otherwise.\n    Declaration    \n    <code>var count: Self.Index.Distance { get }</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#var-count_-self-index-distance
CollectionType.first	A										Returns the first element of <code>self</code>, or <code>nil</code> if <code>self</code> is empty.\n    Declaration    \n    <code>var first: Self.Generator.Element? { get }</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#var-first_-self-generator-element
CollectionType.isEmpty	A										Returns <code>true</code> iff <code>self</code> is empty.\n    Declaration    \n    <code>var isEmpty: Bool { get }</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#var-isempty_-bool
CollectionType.count	A										Returns the number of elements.\n<strong>Complexity:</strong> O(1) if <code>Index</code> conforms to <code>RandomAccessIndexType</code>;\n  O(N) otherwise.\n    Declaration    \n    <code>var count: Self.Index.Distance { get }</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#-var-count_-self-index-distance
CollectionType.first	A										Returns the first element of <code>self</code>, or <code>nil</code> if <code>self</code> is empty.\n<strong>Complexity:</strong> O(1)\n    Declaration    \n    <code>var first: Self.Generator.Element? { get }</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#-var-first_-self-generator-element
CollectionType.indices	A										Returns the range of valid index values.\nThe result's <code>endIndex</code> is the same as that of <code>self</code>.  Because\n<code>Range</code> is half-open, iterating the values of the result produces\nall valid subscript arguments for <code>self</code>, omitting its <code>endIndex</code>.\n    Declaration    \n    <code>var indices: Range&lt;Self.Index&gt; { get }</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#-var-indices_-range-self-index
CollectionType.isEmpty	A										Returns <code>true</code> iff <code>self</code> is empty.\n<strong>Complexity:</strong> O(1)\n    Declaration    \n    <code>var isEmpty: Bool { get }</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#-var-isempty_-bool
CollectionType.lazy	A										A collection with contents identical to <code>self</code>, but on which\nnormally-eager operations such as <code>map</code> and <code>filter</code> are\nimplemented lazily.\n<strong>See Also:</strong> <code>LazySequenceType</code>, <code>LazyCollectionType</code>.\n    Declaration    \n    <code>var lazy: LazyCollection&lt;Self&gt; { get }</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#-var-lazy_-lazycollection-self
CollectionType.last	A										Declaration    \n    <code>var last: Self.Generator.Element? { get }</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#index_-bidirectionalindextype-var-last_-self-generator-element
CollectionType.endIndex	A										The collection's &quot;past the end&quot; position.\n<code>endIndex</code> is not a valid argument to <code>subscript</code>, and is always\nreachable from <code>startIndex</code> by zero or more applications of\n<code>successor()</code>.\n    Declaration    \n    <code>var endIndex: Self.Index { get }</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#self_-collectionwrappertype-index-base-index-var-endindex_-self-index
CollectionType.startIndex	A										The position of the first element in a non-empty collection.\nIn an empty collection, <code>startIndex == endIndex</code>.\n    Declaration    \n    <code>var startIndex: Self.Index { get }</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#self_-collectionwrappertype-index-base-index-var-startindex_-self-index
CollectionType.startIndex	A										Declaration    \n    <code>var startIndex: ReverseRandomAccessIndex&lt;Self.Base.Index&gt; { get }</code>	http://swiftdoc.org/v2.2/protocol/CollectionType/#self_-reversecollectiontype-base-index_-randomaccessindextype-var-startindex_-reverserandomaccessindex-self-base-index
prefixThrough	R	CollectionType.prefixThrough										
prefixUpTo	R	CollectionType.prefixUpTo										
suffixFrom	R	CollectionType.suffixFrom										
dropFirst	R	CollectionType.dropFirst										
dropLast	R	CollectionType.dropLast										
indexOf	R	CollectionType.indexOf										
prefix	R	CollectionType.prefix										
prefixThrough	R	CollectionType.prefixThrough										
prefixUpTo	R	CollectionType.prefixUpTo										
suffixFrom	R	CollectionType.suffixFrom										
generate	R	CollectionType.generate										
flatten	R	CollectionType.flatten										
flatten	R	CollectionType.flatten										
indexOf	R	CollectionType.indexOf										
dropLast	R	CollectionType.dropLast										
reverse	R	CollectionType.reverse										
suffix	R	CollectionType.suffix										
reverse	R	CollectionType.reverse										
filter	R	CollectionType.filter										
map	R	CollectionType.map										
popFirst	R	CollectionType.popFirst										
popLast	R	CollectionType.popLast										
removeFirst	R	CollectionType.removeFirst										
removeFirst	R	CollectionType.removeFirst										
popLast	R	CollectionType.popLast										
removeLast	R	CollectionType.removeLast										
removeLast	R	CollectionType.removeLast										
count	R	CollectionType.count										
first	R	CollectionType.first										
isEmpty	R	CollectionType.isEmpty										
count	R	CollectionType.count										
first	R	CollectionType.first										
indices	R	CollectionType.indices										
isEmpty	R	CollectionType.isEmpty										
lazy	R	CollectionType.lazy										
last	R	CollectionType.last										
endIndex	R	CollectionType.endIndex										
startIndex	R	CollectionType.startIndex										
startIndex	R	CollectionType.startIndex										
Operator: ==	A										<pre><code>infix operator == {\n    associativity none\n    precedence 130\n}</code></pre>	http://swiftdoc.org/v2.2/operator/eqeq/
ArraySlice	A										<pre><code>struct ArraySlice&lt;Element&gt;</code></pre>The <code>Array</code>-like type that represents a sub-sequence of any\n<code>Array</code>, <code>ContiguousArray</code>, or other <code>ArraySlice</code>.\n<code>ArraySlice</code> always uses contiguous storage and does not bridge to\nObjective-C.\n<strong>Warning:</strong> Long-term storage of <code>ArraySlice</code> instances is discouraged.\nBecause a <code>ArraySlice</code> presents a view onto the storage of some\nlarger array even after the original array's lifetime ends,\nstoring the slice may prolong the lifetime of elements that are\nno longer accessible, which can manifest as apparent memory and\nobject leakage.  To prevent this effect, use <code>ArraySlice</code> only for\ntransient computation.	http://swiftdoc.org/v2.2/type/ArraySlice/
ArraySlice.appendContentsOf	A										Append the elements of <code>newElements</code> to <code>self</code>.\n<strong>Complexity:</strong> O(length of result).\n    Declaration    \n    <code>mutating func appendContentsOf&lt;S : SequenceType where S.Generator.Element == Element&gt;(newElements: S)</code>	http://swiftdoc.org/v2.2/type/ArraySlice/#func-appendcontentsof-s_-sequencetype-where-s-generator-element-element_-s
ArraySlice.appendContentsOf	A										Append the elements of <code>newElements</code> to <code>self</code>.\n<strong>Complexity:</strong> O(length of result).\n    Declaration    \n    <code>mutating func appendContentsOf&lt;C : CollectionType where C.Generator.Element == Element&gt;(newElements: C)</code>	http://swiftdoc.org/v2.2/type/ArraySlice/#func-appendcontentsof-c_-collectiontype-where-c-generator-element-element_-c
ArraySlice.replaceRange	A										Replace the given <code>subRange</code> of elements with <code>newElements</code>.\n<strong>Complexity:</strong> O(<code>subRange.count</code>) if <code>subRange.endIndex\n  == self.endIndex</code> and <code>newElements.isEmpty</code>, O(N) otherwise.\n    Declaration    \n    <code>mutating func replaceRange&lt;C : CollectionType where C.Generator.Element == _Buffer.Element&gt;(subRange: Range&lt;Int&gt;, with newElements: C)</code>	http://swiftdoc.org/v2.2/type/ArraySlice/#func-replacerange_with_
ArraySlice.withUnsafeBufferPointer	A										Call <code>body(p)</code>, where <code>p</code> is a pointer to the <code>ArraySlice</code>'s\ncontiguous storage.\nOften, the optimizer can eliminate bounds checks within an\narray algorithm, but when that fails, invoking the\nsame algorithm on <code>body</code>'s argument lets you trade safety for\nspeed.\n    Declaration    \n    <code>func withUnsafeBufferPointer&lt;R&gt;(@noescape body: (UnsafeBufferPointer&lt;Element&gt;) throws -&gt; R) rethrows -&gt; R</code>	http://swiftdoc.org/v2.2/type/ArraySlice/#func-withunsafebufferpointer_
ArraySlice.withUnsafeMutableBufferPointer	A										Call <code>body(p)</code>, where <code>p</code> is a pointer to the <code>ArraySlice</code>'s\nmutable contiguous storage.\nOften, the optimizer can eliminate bounds- and uniqueness-checks\nwithin an array algorithm, but when that fails, invoking the\nsame algorithm on <code>body</code>'s argument lets you trade safety for\nspeed.\n<strong>Warning:</strong> Do not rely on anything about <code>self</code> (the <code>ArraySlice</code>\n  that is the target of this method) during the execution of\n  <code>body</code>: it may not appear to have its correct value.  Instead,\n  use only the <code>UnsafeMutableBufferPointer</code> argument to <code>body</code>.\n    Declaration    \n    <code>mutating func withUnsafeMutableBufferPointer&lt;R&gt;(@noescape body: (inout UnsafeMutableBufferPointer&lt;Element&gt;) throws -&gt; R) rethrows -&gt; R</code>	http://swiftdoc.org/v2.2/type/ArraySlice/#func-withunsafemutablebufferpointer_
ArraySlice.capacity	A										The number of elements the <code>ArraySlice</code> can store without reallocation.\n    Declaration    \n    <code>var capacity: Int { get }</code>	http://swiftdoc.org/v2.2/type/ArraySlice/#var-capacity_-int
ArraySlice.count	A										The number of elements the ArraySlice stores.\n    Declaration    \n    <code>var count: Int { get }</code>	http://swiftdoc.org/v2.2/type/ArraySlice/#var-count_-int
ArraySlice.debugDescription	A										A textual representation of <code>self</code>, suitable for debugging.\n    Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/ArraySlice/#var-debugdescription_-string
ArraySlice.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/ArraySlice/#var-description_-string
ArraySlice.endIndex	A										A &quot;past-the-end&quot; element index; the successor of the last valid\nsubscript argument.\n    Declaration    \n    <code>var endIndex: Int { get }</code>	http://swiftdoc.org/v2.2/type/ArraySlice/#var-endindex_-int
ArraySlice.startIndex	A										The position of the first element in a non-empty collection.\nIn an empty collection, <code>startIndex == endIndex</code>.\n    Declaration    \n    <code>var startIndex: Int { get }</code>	http://swiftdoc.org/v2.2/type/ArraySlice/#var-startindex_-int
appendContentsOf	R	ArraySlice.appendContentsOf										
appendContentsOf	R	ArraySlice.appendContentsOf										
replaceRange	R	ArraySlice.replaceRange										
withUnsafeBufferPointer	R	ArraySlice.withUnsafeBufferPointer										
withUnsafeMutableBufferPointer	R	ArraySlice.withUnsafeMutableBufferPointer										
capacity	R	ArraySlice.capacity										
count	R	ArraySlice.count										
debugDescription	R	ArraySlice.debugDescription										
description	R	ArraySlice.description										
endIndex	R	ArraySlice.endIndex										
startIndex	R	ArraySlice.startIndex										
_CVarArgPassedAsDouble	A										<pre><code>protocol _CVarArgPassedAsDouble</code></pre>Floating point types need to be passed differently on x86_64\nsystems.  CoreGraphics uses this to make CGFloat work properly.	http://swiftdoc.org/v2.2/protocol/_CVarArgPassedAsDouble/
_RandomAccessAmbiguity	A										<pre><code>protocol _RandomAccessAmbiguity</code></pre>Used to force conformers of RandomAccessIndexType to implement\n<code>advancedBy</code> methods and <code>distanceTo</code>.	http://swiftdoc.org/v2.2/protocol/_RandomAccessAmbiguity/
_RandomAccessAmbiguity.advancedBy	A										Declaration    \n    <code>func advancedBy(n: Self.Distance) -&gt; Self</code>	http://swiftdoc.org/v2.2/protocol/_RandomAccessAmbiguity/#func--advancedby_
advancedBy	R	_RandomAccessAmbiguity.advancedBy										
String.CharacterView	A										<pre><code>struct String.CharacterView</code></pre>A <code>String</code>'s collection of <code>Character</code>s (extended grapheme\nclusters)\nelements.	http://swiftdoc.org/v2.2/type/String.CharacterView/
String.CharacterView.replaceRange	A										Replace the given <code>subRange</code> of elements with <code>newElements</code>.\nInvalidates all indices with respect to <code>self</code>.\n<strong>Complexity:</strong> O(<code>subRange.count</code>) if <code>subRange.endIndex\n  == self.endIndex</code> and <code>newElements.isEmpty</code>, O(N) otherwise.\n    Declaration    \n    <code>mutating func replaceRange&lt;C : CollectionType where C.Generator.Element == Character&gt;(subRange: Range&lt;String.CharacterView.Index&gt;, with newElements: C)</code>	http://swiftdoc.org/v2.2/type/String.CharacterView/#func-replacerange_with_
String.CharacterView.endIndex	A										The &quot;past the end&quot; position.\n<code>endIndex</code> is not a valid argument to <code>subscript</code>, and is always\nreachable from <code>startIndex</code> by zero or more applications of\n<code>successor()</code>.\n    Declaration    \n    <code>var endIndex: String.CharacterView.Index { get }</code>	http://swiftdoc.org/v2.2/type/String.CharacterView/#var-endindex_-string-characterview-index
String.CharacterView.startIndex	A										The position of the first <code>Character</code> if <code>self</code> is\nnon-empty; identical to <code>endIndex</code> otherwise.\n    Declaration    \n    <code>var startIndex: String.CharacterView.Index { get }</code>	http://swiftdoc.org/v2.2/type/String.CharacterView/#var-startindex_-string-characterview-index
CharacterView	R	String.CharacterView										
replaceRange	R	String.CharacterView.replaceRange										
endIndex	R	String.CharacterView.endIndex										
startIndex	R	String.CharacterView.startIndex										
JoinGenerator	A										<pre><code>struct JoinGenerator&lt;Base : GeneratorType where Base.Element : SequenceType&gt;</code></pre>A generator that presents the elements of the sequences generated\nby <code>Base</code>, concatenated using a given separator.	http://swiftdoc.org/v2.2/type/JoinGenerator/
JoinGenerator.next	A										Advance to the next element and return it, or <code>nil</code> if no next\nelement exists.\n    Declaration    \n    <code>mutating func next() -&gt; Base.Element.Generator.Element?</code>	http://swiftdoc.org/v2.2/type/JoinGenerator/#func-next
next	R	JoinGenerator.next										
Range	A										<pre><code>struct Range&lt;Element : ForwardIndexType&gt;</code></pre>A collection of consecutive discrete index values.\n<strong><code>Element</code>:</strong>  Is both the element type and the index type of the\n  collection.\nLike other collections, a range containing one element has an\n<code>endIndex</code> that is the successor of its <code>startIndex</code>; and an empty\nrange has <code>startIndex == endIndex</code>.\nAxiom: for any <code>Range</code> <code>r</code>, <code>r[i] == i</code>.\nTherefore, if <code>Element</code> has a maximal value, it can serve as an\n<code>endIndex</code>, but can never be contained in a <code>Range&lt;Element&gt;</code>.\nIt also follows from the axiom above that <code>(-99..&lt;100)[0] == 0</code>.\nTo prevent confusion (because some expect the result to be <code>-99</code>),\nin a context where <code>Element</code> is known to be an integer type,\nsubscripting with <code>Element</code> is a compile-time error:\n<pre><code>// error: could not find an overload for 'subscript'...\nprint(Range&lt;Int&gt;(start: -99, end: 100)[0])</code></pre>\nHowever, subscripting that range still works in a generic context:\n<pre><code>func brackets&lt;Element: ForwardIndexType&gt;(x: Range&lt;Element&gt;, _ i: Element) -&gt; Element {\n    return x[i] // Just forward to subscript\n}\nprint(brackets(Range&lt;Int&gt;(start: -99, end: 100), 0))\n// Prints &quot;0&quot;</code></pre>	http://swiftdoc.org/v2.2/type/Range/
Range.generate	A										Returns a generator over the elements of this sequence.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; RangeGenerator&lt;Element&gt;</code>	http://swiftdoc.org/v2.2/type/Range/#func-generate
Range.debugDescription	A										A textual representation of <code>self</code>, suitable for debugging.\n    Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/Range/#var-debugdescription_-string
Range.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/Range/#var-description_-string
Range.endIndex	A										The range's upper bound.\n<code>endIndex</code> is not a valid argument to <code>subscript</code>, and is always\nreachable from <code>startIndex</code> by zero or more applications of\n<code>successor()</code>.\n    Declaration    \n    <code>var endIndex: Element { get set }</code>	http://swiftdoc.org/v2.2/type/Range/#var-endindex_-element
Range.startIndex	A										The range's lower bound.\nIdentical to <code>endIndex</code> in an empty range.\n    Declaration    \n    <code>var startIndex: Element { get set }</code>	http://swiftdoc.org/v2.2/type/Range/#var-startindex_-element
generate	R	Range.generate										
debugDescription	R	Range.debugDescription										
description	R	Range.description										
endIndex	R	Range.endIndex										
startIndex	R	Range.startIndex										
Int64	A										<pre><code>struct Int64</code></pre>A 64-bit signed integer value\ntype.	http://swiftdoc.org/v2.2/type/Int64/
Int64.addWithOverflow	A										Add <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func addWithOverflow(lhs: Int64, _ rhs: Int64) -&gt; (Int64, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Int64/#func-addwithoverflow__
Int64.divideWithOverflow	A										Divide <code>lhs</code> and <code>rhs</code>, returning\na result and a <code>Bool</code>\nthat is <code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func divideWithOverflow(lhs: Int64, _ rhs: Int64) -&gt; (Int64, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Int64/#func-dividewithoverflow__
Int64.multiplyWithOverflow	A										Multiply <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func multiplyWithOverflow(lhs: Int64, _ rhs: Int64) -&gt; (Int64, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Int64/#func-multiplywithoverflow__
Int64.remainderWithOverflow	A										Divide <code>lhs</code> and <code>rhs</code>, returning\nthe remainder and a <code>Bool</code>\nthat is <code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func remainderWithOverflow(lhs: Int64, _ rhs: Int64) -&gt; (Int64, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Int64/#func-remainderwithoverflow__
Int64.subtractWithOverflow	A										Subtract <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func subtractWithOverflow(lhs: Int64, _ rhs: Int64) -&gt; (Int64, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Int64/#func-subtractwithoverflow__
Int64.predecessor	A										Returns the previous consecutive value before <code>self</code>.\n<strong>Requires:</strong> The previous value is representable.\n    Declaration    \n    <code>func predecessor() -&gt; Int64</code>	http://swiftdoc.org/v2.2/type/Int64/#func-predecessor
Int64.successor	A										Returns the next consecutive value after <code>self</code>.\n<strong>Requires:</strong> The next value is representable.\n    Declaration    \n    <code>func successor() -&gt; Int64</code>	http://swiftdoc.org/v2.2/type/Int64/#func-successor
Int64.toIntMax	A										Represent this number using Swift's widest native signed\ninteger type.\n    Declaration    \n    <code>func toIntMax() -&gt; IntMax</code>	http://swiftdoc.org/v2.2/type/Int64/#func-tointmax
Int64.allZeros	A										The empty bitset of type Int64.\n    Declaration    \n    <code>static var allZeros: Int64 { get }</code>	http://swiftdoc.org/v2.2/type/Int64/#static-var-allzeros_-int64
Int64.max	A										Declaration    \n    <code>static var max: Int64 { get }</code>	http://swiftdoc.org/v2.2/type/Int64/#static-var-max_-int64
Int64.min	A										Declaration    \n    <code>static var min: Int64 { get }</code>	http://swiftdoc.org/v2.2/type/Int64/#static-var-min_-int64
Int64.allZeros	A										The empty bitset of type Int64.\n    Declaration    \n    <code>static var allZeros: Int64 { get }</code>	http://swiftdoc.org/v2.2/type/Int64/#static-var-allzeros_-int64
Int64.max	A										Declaration    \n    <code>static var max: Int64 { get }</code>	http://swiftdoc.org/v2.2/type/Int64/#static-var-max_-int64
Int64.min	A										Declaration    \n    <code>static var min: Int64 { get }</code>	http://swiftdoc.org/v2.2/type/Int64/#static-var-min_-int64
Int64.bigEndian	A										Returns the big-endian representation of the integer, changing the\nbyte order if necessary.\n    Declaration    \n    <code>var bigEndian: Int64 { get }</code>	http://swiftdoc.org/v2.2/type/Int64/#var-bigendian_-int64
Int64.byteSwapped	A										Returns the current integer with the byte order swapped.\n    Declaration    \n    <code>var byteSwapped: Int64 { get }</code>	http://swiftdoc.org/v2.2/type/Int64/#var-byteswapped_-int64
Int64.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/Int64/#var-description_-string
Int64.hashValue	A										The hash value.\n<strong>Axiom:</strong> <code>x == y</code> implies <code>x.hashValue == y.hashValue</code>.\n<strong>Note:</strong> The hash value is not guaranteed to be stable across\n  different invocations of the same program.  Do not persist the\n  hash value across program runs.\n    Declaration    \n    <code>var hashValue: Int { get }</code>	http://swiftdoc.org/v2.2/type/Int64/#var-hashvalue_-int
Int64.littleEndian	A										Returns the little-endian representation of the integer, changing the\nbyte order if necessary.\n    Declaration    \n    <code>var littleEndian: Int64 { get }</code>	http://swiftdoc.org/v2.2/type/Int64/#var-littleendian_-int64
addWithOverflow	R	Int64.addWithOverflow										
divideWithOverflow	R	Int64.divideWithOverflow										
multiplyWithOverflow	R	Int64.multiplyWithOverflow										
remainderWithOverflow	R	Int64.remainderWithOverflow										
subtractWithOverflow	R	Int64.subtractWithOverflow										
predecessor	R	Int64.predecessor										
successor	R	Int64.successor										
toIntMax	R	Int64.toIntMax										
allZeros	R	Int64.allZeros										
max	R	Int64.max										
min	R	Int64.min										
allZeros	R	Int64.allZeros										
max	R	Int64.max										
min	R	Int64.min										
bigEndian	R	Int64.bigEndian										
byteSwapped	R	Int64.byteSwapped										
description	R	Int64.description										
hashValue	R	Int64.hashValue										
littleEndian	R	Int64.littleEndian										
LazyFilterCollection	A										<pre><code>struct LazyFilterCollection&lt;Base : CollectionType&gt;</code></pre>A lazy <code>CollectionType</code> wrapper that includes the elements of an\nunderlying collection that satisfy a predicate.\n<strong>Note:</strong> The performance of accessing <code>startIndex</code>, <code>first</code>, any methods\n  that depend on <code>startIndex</code>, or of advancing a <code>LazyFilterIndex</code> depends\n  on how sparsely the filtering predicate is satisfied, and may not offer\n  the usual performance given by <code>CollectionType</code> or <code>ForwardIndexType</code>. Be\n  aware, therefore, that general operations on <code>LazyFilterCollection</code>\n  instances may not have the documented complexity.	http://swiftdoc.org/v2.2/type/LazyFilterCollection/
LazyFilterCollection.generate	A										Returns a generator over the elements of this sequence.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; LazyFilterGenerator&lt;Base.Generator&gt;</code>	http://swiftdoc.org/v2.2/type/LazyFilterCollection/#func-generate
LazyFilterCollection.endIndex	A										The collection's &quot;past the end&quot; position.\n<code>endIndex</code> is not a valid argument to <code>subscript</code>, and is always\nreachable from <code>startIndex</code> by zero or more applications of\n<code>successor()</code>.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>var endIndex: LazyFilterIndex&lt;Base&gt; { get }</code>	http://swiftdoc.org/v2.2/type/LazyFilterCollection/#var-endindex_-lazyfilterindex-base
LazyFilterCollection.startIndex	A										The position of the first element in a non-empty collection.\nIn an empty collection, <code>startIndex == endIndex</code>.\n<strong>Complexity:</strong> O(N), where N is the ratio between unfiltered and\n  filtered collection counts.\n    Declaration    \n    <code>var startIndex: LazyFilterIndex&lt;Base&gt; { get }</code>	http://swiftdoc.org/v2.2/type/LazyFilterCollection/#var-startindex_-lazyfilterindex-base
generate	R	LazyFilterCollection.generate										
endIndex	R	LazyFilterCollection.endIndex										
startIndex	R	LazyFilterCollection.startIndex										
RangeGenerator	A										<pre><code>struct RangeGenerator&lt;Element : ForwardIndexType&gt;</code></pre>A generator over the elements of <code>Range&lt;Element&gt;</code>.	http://swiftdoc.org/v2.2/type/RangeGenerator/
RangeGenerator.next	A										Advance to the next element and return it, or <code>nil</code> if no next\nelement exists.\n    Declaration    \n    <code>mutating func next() -&gt; Element?</code>	http://swiftdoc.org/v2.2/type/RangeGenerator/#func-next
RangeGenerator.endIndex	A										The upper bound of the remaining range; not included in the\ngenerated sequence.\nDeprecated: it will be removed in Swift 3.\n    Declaration    \n    <code>var endIndex: Element { get set }</code>	http://swiftdoc.org/v2.2/type/RangeGenerator/#var-endindex_-element
RangeGenerator.startIndex	A										The lower bound of the remaining range.\nDeprecated: it will be removed in Swift 3.\n    Declaration    \n    <code>var startIndex: Element { get set }</code>	http://swiftdoc.org/v2.2/type/RangeGenerator/#var-startindex_-element
next	R	RangeGenerator.next										
endIndex	R	RangeGenerator.endIndex										
startIndex	R	RangeGenerator.startIndex										
withVaList.withVaList	A										Invoke <code>f</code> with a C <code>va_list</code> argument derived from <code>args</code>.\n    Declaration    \n    <code>func withVaList&lt;R&gt;(args: [CVarArgType], @noescape _ f: CVaListPointer -&gt; R) -&gt; R</code>	http://swiftdoc.org/v2.2/func/withVaList#func-withvalist-r_-cvarargtype_-cvalistpointer-r
withVaList.withVaList	A										Invoke <code>f</code> with a C <code>va_list</code> argument derived from <code>builder</code>.\nDeprecated: it will be removed in Swift 3.\n    Declaration    \n    <code>func withVaList&lt;R&gt;(builder: VaListBuilder, @noescape _ f: CVaListPointer -&gt; R) -&gt; R</code>	http://swiftdoc.org/v2.2/func/withVaList#func-withvalist-r_-valistbuilder_-cvalistpointer-r
withVaList	R	withVaList.withVaList										
withVaList	R	withVaList.withVaList										
sizeof.sizeof	A										Returns the contiguous memory footprint of <code>T</code>.\nDoes not include any dynamically-allocated or &quot;remote&quot; storage.\nIn particular, <code>sizeof(X.self)</code>, when <code>X</code> is a class type, is the\nsame regardless of how many stored properties <code>X</code> has.\n    Declaration    \n    <code>func sizeof&lt;T&gt;(_: T.Type) -&gt; Int</code>	http://swiftdoc.org/v2.2/func/sizeof#func-sizeof-t_-t-type
sizeof	R	sizeof.sizeof										
zip.zip	A										A sequence of pairs built out of two underlying sequences, where\nthe elements of the <code>i</code>th pair are the <code>i</code>th elements of each\nunderlying sequence.\n    Declaration    \n    <code>func zip&lt;Sequence1 : SequenceType, Sequence2 : SequenceType&gt;(sequence1: Sequence1, _ sequence2: Sequence2) -&gt; Zip2Sequence&lt;Sequence1, Sequence2&gt;</code>	http://swiftdoc.org/v2.2/func/zip#func-zip-sequence1_-sequencetype-sequence2_-sequencetype_-sequence1_-sequence2
zip	R	zip.zip										
dump.dump	A										Dump an object's contents using its mirror to standard output.\n    Declaration    \n    <code>func dump&lt;T&gt;(x: T, name: String? = default, indent: Int = default, maxDepth: Int = default, maxItems: Int = default) -&gt; T</code>	http://swiftdoc.org/v2.2/func/dump#func-dump-t_-t-name_-string-indent_-int-maxdepth_-int-maxitems_-int
dump.dump	A										Dump an object's contents using its mirror to the specified output stream.\n    Declaration    \n    <code>func dump&lt;T, TargetStream : OutputStreamType&gt;(x: T, inout _ targetStream: TargetStream, name: String? = default, indent: Int = default, maxDepth: Int = default, maxItems: Int = default) -&gt; T</code>	http://swiftdoc.org/v2.2/func/dump#func-dump-t-targetstream_-outputstreamtype_-t-inout_-targetstream-name_-string-indent_-int-maxdepth_-int-maxitems_-int
dump	R	dump.dump										
dump	R	dump.dump										
sizeofValue.sizeofValue	A										Returns the contiguous memory footprint of  <code>T</code>.\nDoes not include any dynamically-allocated or &quot;remote&quot; storage.\nIn particular, <code>sizeof(a)</code>, when <code>a</code> is a class instance, is the\nsame regardless of how many stored properties <code>a</code> has.\n    Declaration    \n    <code>func sizeofValue&lt;T&gt;(_: T) -&gt; Int</code>	http://swiftdoc.org/v2.2/func/sizeofValue#func-sizeofvalue-t_-t
sizeofValue	R	sizeofValue.sizeofValue										
abs.abs	A										Returns the absolute value of <code>x</code>.\nConcrete instances of <code>SignedNumberType</code> can specialize this\nfunction by conforming to <code>AbsoluteValuable</code>.\n    Declaration    \n    <code>func abs&lt;T : SignedNumberType&gt;(x: T) -&gt; T</code>	http://swiftdoc.org/v2.2/func/abs#func-abs-t_-signednumbertype_-t
abs	R	abs.abs										
debugPrint.debugPrint	A										Writes the textual representations of <code>items</code> most suitable for\ndebugging, separated by <code>separator</code> and terminated by\n<code>terminator</code>, into the standard output.\nThe textual representations are obtained for each <code>item</code> via\nthe expression <code>String(reflecting: item)</code>.\n<strong>Note:</strong> To print without a trailing newline, pass <code>terminator: &quot;&quot;</code>\n<strong>See Also:</strong> <code>print</code>, <code>Streamable</code>, <code>CustomStringConvertible</code>,\n  <code>CustomDebugStringConvertible</code>\n    Declaration    \n    <code>func debugPrint(items: Any..., separator: String = default, terminator: String = default)</code>	http://swiftdoc.org/v2.2/func/debugPrint#func-debugprint_-any-separator_-string-terminator_-string
debugPrint.debugPrint	A										Writes the textual representations of <code>items</code> most suitable for\ndebugging, separated by <code>separator</code> and terminated by\n<code>terminator</code>, into <code>output</code>.\nThe textual representations are obtained for each <code>item</code> via\nthe expression <code>String(reflecting: item)</code>.\n<strong>Note:</strong> To print without a trailing newline, pass <code>terminator: &quot;&quot;</code>\n<strong>See Also:</strong> <code>print</code>, <code>Streamable</code>, <code>CustomStringConvertible</code>,\n  <code>CustomDebugStringConvertible</code>\n    Declaration    \n    <code>func debugPrint&lt;Target : OutputStreamType&gt;(items: Any..., separator: String = default, terminator: String = default, inout toStream output: Target)</code>	http://swiftdoc.org/v2.2/func/debugPrint#func-debugprint-target_-outputstreamtype_-any-separator_-string-terminator_-string-inout-tostream_-target
debugPrint	R	debugPrint.debugPrint										
debugPrint	R	debugPrint.debugPrint										
unsafeUnwrap.unsafeUnwrap	A										<strong>Returns:</strong> <code>nonEmpty!</code>.\n<strong>Requires:</strong> <code>nonEmpty != nil</code>.  In particular, in -O builds, no test\n  is performed to ensure that <code>nonEmpty</code> actually is non-nil.\n<strong>Warning:</strong> Trades safety for performance.  Use <code>unsafeUnwrap</code>\n  only when <code>nonEmpty!</code> has proven to be a performance problem and\n  you are confident that, always, <code>nonEmpty != nil</code>.  It is better\n  than an <code>unsafeBitCast</code> because it's more restrictive, and\n  because checking is still performed in debug builds.\nDeprecated: Will be removed in Swift 3. Use Optional.unsafelyUnwrapped property instead..\n    Declaration    \n    <code>func unsafeUnwrap&lt;T&gt;(nonEmpty: T?) -&gt; T</code>	http://swiftdoc.org/v2.2/func/unsafeUnwrap#func-unsafeunwrap-t_-t
unsafeUnwrap	R	unsafeUnwrap.unsafeUnwrap										
_ArrayType	A										<pre><code>protocol _ArrayType</code></pre>	http://swiftdoc.org/v2.2/protocol/_ArrayType/
_ArrayType.capacity	A										The number of elements the Array can store without reallocation.\n    Declaration    \n    <code>var capacity: Int { get }</code>	http://swiftdoc.org/v2.2/protocol/_ArrayType/#var-capacity_-int
_ArrayType.count	A										The number of elements the Array stores.\n    Declaration    \n    <code>var count: Int { get }</code>	http://swiftdoc.org/v2.2/protocol/_ArrayType/#var-count_-int
capacity	R	_ArrayType.capacity										
count	R	_ArrayType.count										
swap.swap	A										Exchange the values of <code>a</code> and <code>b</code>.\n<strong>Requires:</strong> <code>a</code> and <code>b</code> do not alias each other.\n    Declaration    \n    <code>func swap&lt;T&gt;(inout a: T, inout _ b: T)</code>	http://swiftdoc.org/v2.2/func/swap#func-swap-t-inout_-t-inout_-t
swap	R	swap.swap										
withUnsafeMutablePointer.withUnsafeMutablePointer	A										Invokes <code>body</code> with an <code>UnsafeMutablePointer</code> to <code>arg</code> and returns the\nresult. Useful for calling Objective-C APIs that take &quot;in/out&quot;\nparameters (and default-constructible &quot;out&quot; parameters) by pointer.\n    Declaration    \n    <code>func withUnsafeMutablePointer&lt;T, Result&gt;(inout arg: T, @noescape _ body: UnsafeMutablePointer&lt;T&gt; throws -&gt; Result) rethrows -&gt; Result</code>	http://swiftdoc.org/v2.2/func/withUnsafeMutablePointer#func-withunsafemutablepointer-t-result-inout_-t_-unsafemutablepointer-t-throws-result
withUnsafeMutablePointer	R	withUnsafeMutablePointer.withUnsafeMutablePointer										
unsafeAddressOf.unsafeAddressOf	A										Returns an <code>UnsafePointer</code> to the storage used for <code>object</code>.  There's\nnot much you can do with this other than use it to identify the\nobject.\n    Declaration    \n    <code>func unsafeAddressOf(object: AnyObject) -&gt; UnsafePointer&lt;Void&gt;</code>	http://swiftdoc.org/v2.2/func/unsafeAddressOf#func-unsafeaddressof_-anyobject
unsafeAddressOf	R	unsafeAddressOf.unsafeAddressOf										
strideofValue.strideofValue	A										Returns the least possible interval between distinct instances of\n<code>T</code> in memory.  The result is always positive.\n    Declaration    \n    <code>func strideofValue&lt;T&gt;(_: T) -&gt; Int</code>	http://swiftdoc.org/v2.2/func/strideofValue#func-strideofvalue-t_-t
strideofValue	R	strideofValue.strideofValue										
max.max	A										Returns the greater of <code>x</code> and <code>y</code>.\nIf <code>x == y</code>, returns <code>y</code>.\n    Declaration    \n    <code>func max&lt;T : Comparable&gt;(x: T, _ y: T) -&gt; T</code>	http://swiftdoc.org/v2.2/func/max#func-max-t_-comparable_-t_-t
max.max	A										Returns the greatest argument passed.\nIf there are multiple equal greatest arguments, returns the last one.\n    Declaration    \n    <code>func max&lt;T : Comparable&gt;(x: T, _ y: T, _ z: T, _ rest: T...) -&gt; T</code>	http://swiftdoc.org/v2.2/func/max#func-max-t_-comparable_-t_-t_-t_-t
max	R	max.max										
max	R	max.max										
_ArrayBufferType	A										<pre><code>protocol _ArrayBufferType</code></pre>The underlying buffer for an ArrayType conforms to\n<code>_ArrayBufferType</code>.  This buffer does not provide value semantics.	http://swiftdoc.org/v2.2/protocol/_ArrayBufferType/
_ArrayBufferType.isMutableAndUniquelyReferenced	A										Returns <code>true</code> iff this buffer is backed by a uniquely-referenced mutable\n_ContiguousArrayBuffer.\n<strong>Note:</strong> This function must remain mutating; otherwise the buffer\n  may acquire spurious extra references, which will cause\n  unnecessary reallocation.\n    Declaration    \n    <code>mutating func isMutableAndUniquelyReferenced() -&gt; Bool</code>	http://swiftdoc.org/v2.2/protocol/_ArrayBufferType/#func-ismutableanduniquelyreferenced
_ArrayBufferType.replace	A										Replace the given <code>subRange</code> with the first <code>newCount</code> elements of\nthe given collection.\n<strong>Requires:</strong> This buffer is backed by a uniquely-referenced\n<code>_ContiguousArrayBuffer</code>.\n    Declaration    \n    <code>mutating func replace&lt;C : CollectionType where C.Generator.Element == Element&gt;(subRange subRange: Range&lt;Int&gt;, with newCount: Int, elementsOf newValues: C)</code>	http://swiftdoc.org/v2.2/protocol/_ArrayBufferType/#func-replace-subrange_with_elementsof_
_ArrayBufferType.requestNativeBuffer	A										If this buffer is backed by a <code>_ContiguousArrayBuffer</code>\ncontaining the same number of elements as <code>self</code>, return it.\nOtherwise, return <code>nil</code>.\n    Declaration    \n    <code>func requestNativeBuffer() -&gt; _ContiguousArrayBuffer&lt;Self.Element&gt;?</code>	http://swiftdoc.org/v2.2/protocol/_ArrayBufferType/#func-requestnativebuffer
_ArrayBufferType.requestUniqueMutableBackingBuffer	A										If this buffer is backed by a uniquely-referenced mutable\n<code>_ContiguousArrayBuffer</code> that can be grown in-place to allow the <code>self</code>\nbuffer store <code>minimumCapacity</code> elements, returns that buffer.\nOtherwise, returns <code>nil</code>.\n<strong>Note:</strong> The result's firstElementAddress may not match ours, if we are a\n  _SliceBuffer.\n<strong>Note:</strong> This function must remain mutating; otherwise the buffer\n  may acquire spurious extra references, which will cause\n  unnecessary reallocation.\n    Declaration    \n    <code>mutating func requestUniqueMutableBackingBuffer(minimumCapacity: Int) -&gt; _ContiguousArrayBuffer&lt;Self.Element&gt;?</code>	http://swiftdoc.org/v2.2/protocol/_ArrayBufferType/#func-requestuniquemutablebackingbuffer_
_ArrayBufferType.withUnsafeBufferPointer	A										Call <code>body(p)</code>, where <code>p</code> is an <code>UnsafeBufferPointer</code> over the\nunderlying contiguous storage.  If no such storage exists, it is\ncreated on-demand.\n    Declaration    \n    <code>func withUnsafeBufferPointer&lt;R&gt;(@noescape body: (UnsafeBufferPointer&lt;Self.Element&gt;) throws -&gt; R) rethrows -&gt; R</code>	http://swiftdoc.org/v2.2/protocol/_ArrayBufferType/#func-withunsafebufferpointer_
_ArrayBufferType.withUnsafeMutableBufferPointer	A										Call <code>body(p)</code>, where <code>p</code> is an <code>UnsafeMutableBufferPointer</code>\nover the underlying contiguous storage.\n<strong>Requires:</strong> Such contiguous storage exists or the buffer is empty.\n    Declaration    \n    <code>mutating func withUnsafeMutableBufferPointer&lt;R&gt;(@noescape body: (UnsafeMutableBufferPointer&lt;Self.Element&gt;) throws -&gt; R) rethrows -&gt; R</code>	http://swiftdoc.org/v2.2/protocol/_ArrayBufferType/#func-withunsafemutablebufferpointer_
_ArrayBufferType.replace	A										Declaration    \n    <code>mutating func replace&lt;C : CollectionType where C.Generator.Element == Element&gt;(subRange subRange: Range&lt;Int&gt;, with newCount: Int, elementsOf newValues: C)</code>	http://swiftdoc.org/v2.2/protocol/_ArrayBufferType/#func--replace-subrange_with_elementsof_
_ArrayBufferType.capacity	A										The number of elements the buffer can store without reallocation.\n    Declaration    \n    <code>var capacity: Int { get }</code>	http://swiftdoc.org/v2.2/protocol/_ArrayBufferType/#var-capacity_-int
_ArrayBufferType.count	A										The number of elements the buffer stores.\n    Declaration    \n    <code>var count: Int { get set }</code>	http://swiftdoc.org/v2.2/protocol/_ArrayBufferType/#var-count_-int
_ArrayBufferType.firstElementAddress	A										If the elements are stored contiguously, a pointer to the first\nelement. Otherwise, <code>nil</code>.\n    Declaration    \n    <code>var firstElementAddress: UnsafeMutablePointer&lt;Self.Element&gt; { get }</code>	http://swiftdoc.org/v2.2/protocol/_ArrayBufferType/#var-firstelementaddress_-unsafemutablepointer-self-element
_ArrayBufferType.identity	A										A value that identifies the storage used by the buffer.  Two\nbuffers address the same elements when they have the same\nidentity and count.\n    Declaration    \n    <code>var identity: UnsafePointer&lt;Void&gt; { get }</code>	http://swiftdoc.org/v2.2/protocol/_ArrayBufferType/#var-identity_-unsafepointer-void
_ArrayBufferType.owner	A										An object that keeps the elements stored in this buffer alive.\n    Declaration    \n    <code>var owner: AnyObject { get }</code>	http://swiftdoc.org/v2.2/protocol/_ArrayBufferType/#var-owner_-anyobject
_ArrayBufferType.startIndex	A										Declaration    \n    <code>var startIndex: Int { get }</code>	http://swiftdoc.org/v2.2/protocol/_ArrayBufferType/#var-startindex_-int
_ArrayBufferType.subscriptBaseAddress	A										Returns a base address to which you can add an index <code>i</code> to get the\naddress of the corresponding element at <code>i</code>.\n    Declaration    \n    <code>var subscriptBaseAddress: UnsafeMutablePointer&lt;Self.Element&gt; { get }</code>	http://swiftdoc.org/v2.2/protocol/_ArrayBufferType/#var-subscriptbaseaddress_-unsafemutablepointer-self-element
_ArrayBufferType.subscriptBaseAddress	A										Declaration    \n    <code>var subscriptBaseAddress: UnsafeMutablePointer&lt;Self.Element&gt; { get }</code>	http://swiftdoc.org/v2.2/protocol/_ArrayBufferType/#-var-subscriptbaseaddress_-unsafemutablepointer-self-element
isMutableAndUniquelyReferenced	R	_ArrayBufferType.isMutableAndUniquelyReferenced										
replace	R	_ArrayBufferType.replace										
requestNativeBuffer	R	_ArrayBufferType.requestNativeBuffer										
requestUniqueMutableBackingBuffer	R	_ArrayBufferType.requestUniqueMutableBackingBuffer										
withUnsafeBufferPointer	R	_ArrayBufferType.withUnsafeBufferPointer										
withUnsafeMutableBufferPointer	R	_ArrayBufferType.withUnsafeMutableBufferPointer										
replace	R	_ArrayBufferType.replace										
capacity	R	_ArrayBufferType.capacity										
count	R	_ArrayBufferType.count										
firstElementAddress	R	_ArrayBufferType.firstElementAddress										
identity	R	_ArrayBufferType.identity										
owner	R	_ArrayBufferType.owner										
startIndex	R	_ArrayBufferType.startIndex										
subscriptBaseAddress	R	_ArrayBufferType.subscriptBaseAddress										
subscriptBaseAddress	R	_ArrayBufferType.subscriptBaseAddress										
String.UTF16View	A										<pre><code>struct String.UTF16View</code></pre>A collection of UTF-16 code units that encodes a <code>String</code> value.	http://swiftdoc.org/v2.2/type/String.UTF16View/
String.UTF16View.debugDescription	A										Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/String.UTF16View/#var-debugdescription_-string
String.UTF16View.description	A										Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/String.UTF16View/#var-description_-string
String.UTF16View.endIndex	A										The &quot;past the end&quot; position.\n<code>endIndex</code> is not a valid argument to <code>subscript</code>, and is always\nreachable from <code>startIndex</code> by zero or more applications of\n<code>successor()</code>.\n    Declaration    \n    <code>var endIndex: String.UTF16View.Index { get }</code>	http://swiftdoc.org/v2.2/type/String.UTF16View/#var-endindex_-string-utf16view-index
String.UTF16View.startIndex	A										The position of the first code unit if the <code>String</code> is\nnon-empty; identical to <code>endIndex</code> otherwise.\n    Declaration    \n    <code>var startIndex: String.UTF16View.Index { get }</code>	http://swiftdoc.org/v2.2/type/String.UTF16View/#var-startindex_-string-utf16view-index
debugDescription	R	String.UTF16View.debugDescription										
description	R	String.UTF16View.description										
endIndex	R	String.UTF16View.endIndex										
startIndex	R	String.UTF16View.startIndex										
strideof.strideof	A										Returns the least possible interval between distinct instances of\n<code>T</code> in memory.  The result is always positive.\n    Declaration    \n    <code>func strideof&lt;T&gt;(_: T.Type) -&gt; Int</code>	http://swiftdoc.org/v2.2/func/strideof#func-strideof-t_-t-type
strideof	R	strideof.strideof										
withUnsafeMutablePointers.withUnsafeMutablePointers	A										Like <code>withUnsafeMutablePointer</code>, but passes pointers to <code>arg0</code> and <code>arg1</code>.\n    Declaration    \n    <code>func withUnsafeMutablePointers&lt;A0, A1, Result&gt;(inout arg0: A0, inout _ arg1: A1, @noescape _ body: (UnsafeMutablePointer&lt;A0&gt;, UnsafeMutablePointer&lt;A1&gt;) throws -&gt; Result) rethrows -&gt; Result</code>	http://swiftdoc.org/v2.2/func/withUnsafeMutablePointers#func-withunsafemutablepointers-a0-a1-result-inout_-a0-inout_-a1_-unsafemutablepointer-a0-unsafemutablepointer-a1-throws-result
withUnsafeMutablePointers.withUnsafeMutablePointers	A										Like <code>withUnsafeMutablePointer</code>, but passes pointers to <code>arg0</code>, <code>arg1</code>,\nand <code>arg2</code>.\n    Declaration    \n    <code>func withUnsafeMutablePointers&lt;A0, A1, A2, Result&gt;(inout arg0: A0, inout _ arg1: A1, inout _ arg2: A2, @noescape _ body: (UnsafeMutablePointer&lt;A0&gt;, UnsafeMutablePointer&lt;A1&gt;, UnsafeMutablePointer&lt;A2&gt;) throws -&gt; Result) rethrows -&gt; Result</code>	http://swiftdoc.org/v2.2/func/withUnsafeMutablePointers#func-withunsafemutablepointers-a0-a1-a2-result-inout_-a0-inout_-a1-inout_-a2_-unsafemutablepointer-a0-unsafemutablepointer-a1-unsafemutablepointer-a2-throws-result
withUnsafeMutablePointers	R	withUnsafeMutablePointers.withUnsafeMutablePointers										
withUnsafeMutablePointers	R	withUnsafeMutablePointers.withUnsafeMutablePointers										
print.print	A										Writes the textual representations of <code>items</code>, separated by\n<code>separator</code> and terminated by <code>terminator</code>, into the standard\noutput.\nThe textual representations are obtained for each <code>item</code> via\nthe expression <code>String(item)</code>.\n<strong>Note:</strong> To print without a trailing newline, pass <code>terminator: &quot;&quot;</code>\n<strong>See Also:</strong> <code>debugPrint</code>, <code>Streamable</code>, <code>CustomStringConvertible</code>,\n  <code>CustomDebugStringConvertible</code>\n    Declaration    \n    <code>func print(items: Any..., separator: String = default, terminator: String = default)</code>	http://swiftdoc.org/v2.2/func/print#func-print_-any-separator_-string-terminator_-string
print.print	A										Writes the textual representations of <code>items</code>, separated by\n<code>separator</code> and terminated by <code>terminator</code>, into <code>output</code>.\nThe textual representations are obtained for each <code>item</code> via\nthe expression <code>String(item)</code>.\n<strong>Note:</strong> To print without a trailing newline, pass <code>terminator: &quot;&quot;</code>\n<strong>See Also:</strong> <code>debugPrint</code>, <code>Streamable</code>, <code>CustomStringConvertible</code>,\n  <code>CustomDebugStringConvertible</code>\n    Declaration    \n    <code>func print&lt;Target : OutputStreamType&gt;(items: Any..., separator: String = default, terminator: String = default, inout toStream output: Target)</code>	http://swiftdoc.org/v2.2/func/print#func-print-target_-outputstreamtype_-any-separator_-string-terminator_-string-inout-tostream_-target
print	R	print.print										
print	R	print.print										
withExtendedLifetime.withExtendedLifetime	A										Evaluate <code>f(x)</code> and return its result, ensuring that <code>x</code> is not\ndestroyed before f returns.\n    Declaration    \n    <code>func withExtendedLifetime&lt;T, Result&gt;(x: T, @noescape _ f: T throws -&gt; Result) rethrows -&gt; Result</code>	http://swiftdoc.org/v2.2/func/withExtendedLifetime#func-withextendedlifetime-t-result_-t_-t-throws-result
withExtendedLifetime.withExtendedLifetime	A										Evaluate <code>f()</code> and return its result, ensuring that <code>x</code> is not\ndestroyed before f returns.\n    Declaration    \n    <code>func withExtendedLifetime&lt;T, Result&gt;(x: T, @noescape _ f: () throws -&gt; Result) rethrows -&gt; Result</code>	http://swiftdoc.org/v2.2/func/withExtendedLifetime#func-withextendedlifetime-t-result_-t_-throws-result
withExtendedLifetime	R	withExtendedLifetime.withExtendedLifetime										
withExtendedLifetime	R	withExtendedLifetime.withExtendedLifetime										
unsafeBitCast.unsafeBitCast	A										Returns the bits of <code>x</code>, interpreted as having type <code>U</code>.\n<strong>Warning:</strong> Breaks the guarantees of Swift's type system; use\n  with extreme care.  There's almost always a better way to do\n  anything.\n    Declaration    \n    <code>func unsafeBitCast&lt;T, U&gt;(x: T, _: U.Type) -&gt; U</code>	http://swiftdoc.org/v2.2/func/unsafeBitCast#func-unsafebitcast-t-u_-t_-u-type
unsafeBitCast	R	unsafeBitCast.unsafeBitCast										
withUnsafePointers.withUnsafePointers	A										Like <code>withUnsafePointer</code>, but passes pointers to <code>arg0</code> and <code>arg1</code>.\n    Declaration    \n    <code>func withUnsafePointers&lt;A0, A1, Result&gt;(inout arg0: A0, inout _ arg1: A1, @noescape _ body: (UnsafePointer&lt;A0&gt;, UnsafePointer&lt;A1&gt;) throws -&gt; Result) rethrows -&gt; Result</code>	http://swiftdoc.org/v2.2/func/withUnsafePointers#func-withunsafepointers-a0-a1-result-inout_-a0-inout_-a1_-unsafepointer-a0-unsafepointer-a1-throws-result
withUnsafePointers.withUnsafePointers	A										Like <code>withUnsafePointer</code>, but passes pointers to <code>arg0</code>, <code>arg1</code>,\nand <code>arg2</code>.\n    Declaration    \n    <code>func withUnsafePointers&lt;A0, A1, A2, Result&gt;(inout arg0: A0, inout _ arg1: A1, inout _ arg2: A2, @noescape _ body: (UnsafePointer&lt;A0&gt;, UnsafePointer&lt;A1&gt;, UnsafePointer&lt;A2&gt;) throws -&gt; Result) rethrows -&gt; Result</code>	http://swiftdoc.org/v2.2/func/withUnsafePointers#func-withunsafepointers-a0-a1-a2-result-inout_-a0-inout_-a1-inout_-a2_-unsafepointer-a0-unsafepointer-a1-unsafepointer-a2-throws-result
withUnsafePointers	R	withUnsafePointers.withUnsafePointers										
withUnsafePointers	R	withUnsafePointers.withUnsafePointers										
UInt16	A										<pre><code>struct UInt16</code></pre>A 16-bit unsigned integer value\ntype.	http://swiftdoc.org/v2.2/type/UInt16/
UInt16.addWithOverflow	A										Add <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func addWithOverflow(lhs: UInt16, _ rhs: UInt16) -&gt; (UInt16, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/UInt16/#func-addwithoverflow__
UInt16.divideWithOverflow	A										Divide <code>lhs</code> and <code>rhs</code>, returning\na result and a <code>Bool</code>\nthat is <code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func divideWithOverflow(lhs: UInt16, _ rhs: UInt16) -&gt; (UInt16, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/UInt16/#func-dividewithoverflow__
UInt16.multiplyWithOverflow	A										Multiply <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func multiplyWithOverflow(lhs: UInt16, _ rhs: UInt16) -&gt; (UInt16, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/UInt16/#func-multiplywithoverflow__
UInt16.remainderWithOverflow	A										Divide <code>lhs</code> and <code>rhs</code>, returning\nthe remainder and a <code>Bool</code>\nthat is <code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func remainderWithOverflow(lhs: UInt16, _ rhs: UInt16) -&gt; (UInt16, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/UInt16/#func-remainderwithoverflow__
UInt16.subtractWithOverflow	A										Subtract <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func subtractWithOverflow(lhs: UInt16, _ rhs: UInt16) -&gt; (UInt16, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/UInt16/#func-subtractwithoverflow__
UInt16.predecessor	A										Returns the previous consecutive value before <code>self</code>.\n<strong>Requires:</strong> The previous value is representable.\n    Declaration    \n    <code>func predecessor() -&gt; UInt16</code>	http://swiftdoc.org/v2.2/type/UInt16/#func-predecessor
UInt16.successor	A										Returns the next consecutive value after <code>self</code>.\n<strong>Requires:</strong> The next value is representable.\n    Declaration    \n    <code>func successor() -&gt; UInt16</code>	http://swiftdoc.org/v2.2/type/UInt16/#func-successor
UInt16.toIntMax	A										Explicitly convert to <code>IntMax</code>.\n    Declaration    \n    <code>func toIntMax() -&gt; IntMax</code>	http://swiftdoc.org/v2.2/type/UInt16/#func-tointmax
UInt16.toUIntMax	A										Represent this number using Swift's widest native unsigned\ninteger type.\n    Declaration    \n    <code>func toUIntMax() -&gt; UIntMax</code>	http://swiftdoc.org/v2.2/type/UInt16/#func-touintmax
UInt16.allZeros	A										The empty bitset of type UInt16.\n    Declaration    \n    <code>static var allZeros: UInt16 { get }</code>	http://swiftdoc.org/v2.2/type/UInt16/#static-var-allzeros_-uint16
UInt16.max	A										Declaration    \n    <code>static var max: UInt16 { get }</code>	http://swiftdoc.org/v2.2/type/UInt16/#static-var-max_-uint16
UInt16.min	A										Declaration    \n    <code>static var min: UInt16 { get }</code>	http://swiftdoc.org/v2.2/type/UInt16/#static-var-min_-uint16
UInt16.allZeros	A										The empty bitset of type UInt16.\n    Declaration    \n    <code>static var allZeros: UInt16 { get }</code>	http://swiftdoc.org/v2.2/type/UInt16/#static-var-allzeros_-uint16
UInt16.max	A										Declaration    \n    <code>static var max: UInt16 { get }</code>	http://swiftdoc.org/v2.2/type/UInt16/#static-var-max_-uint16
UInt16.min	A										Declaration    \n    <code>static var min: UInt16 { get }</code>	http://swiftdoc.org/v2.2/type/UInt16/#static-var-min_-uint16
UInt16.bigEndian	A										Returns the big-endian representation of the integer, changing the\nbyte order if necessary.\n    Declaration    \n    <code>var bigEndian: UInt16 { get }</code>	http://swiftdoc.org/v2.2/type/UInt16/#var-bigendian_-uint16
UInt16.byteSwapped	A										Returns the current integer with the byte order swapped.\n    Declaration    \n    <code>var byteSwapped: UInt16 { get }</code>	http://swiftdoc.org/v2.2/type/UInt16/#var-byteswapped_-uint16
UInt16.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/UInt16/#var-description_-string
UInt16.hashValue	A										The hash value.\n<strong>Axiom:</strong> <code>x == y</code> implies <code>x.hashValue == y.hashValue</code>.\n<strong>Note:</strong> The hash value is not guaranteed to be stable across\n  different invocations of the same program.  Do not persist the\n  hash value across program runs.\n    Declaration    \n    <code>var hashValue: Int { get }</code>	http://swiftdoc.org/v2.2/type/UInt16/#var-hashvalue_-int
UInt16.littleEndian	A										Returns the little-endian representation of the integer, changing the\nbyte order if necessary.\n    Declaration    \n    <code>var littleEndian: UInt16 { get }</code>	http://swiftdoc.org/v2.2/type/UInt16/#var-littleendian_-uint16
addWithOverflow	R	UInt16.addWithOverflow										
divideWithOverflow	R	UInt16.divideWithOverflow										
multiplyWithOverflow	R	UInt16.multiplyWithOverflow										
remainderWithOverflow	R	UInt16.remainderWithOverflow										
subtractWithOverflow	R	UInt16.subtractWithOverflow										
predecessor	R	UInt16.predecessor										
successor	R	UInt16.successor										
toIntMax	R	UInt16.toIntMax										
toUIntMax	R	UInt16.toUIntMax										
allZeros	R	UInt16.allZeros										
max	R	UInt16.max										
min	R	UInt16.min										
allZeros	R	UInt16.allZeros										
max	R	UInt16.max										
min	R	UInt16.min										
bigEndian	R	UInt16.bigEndian										
byteSwapped	R	UInt16.byteSwapped										
description	R	UInt16.description										
hashValue	R	UInt16.hashValue										
littleEndian	R	UInt16.littleEndian										
LazyCollectionType	A										<pre><code>protocol LazyCollectionType</code></pre>A collection on which normally-eager operations such as <code>map</code> and\n<code>filter</code> are implemented lazily.\nPlease see <code>LazySequenceType</code> for background; <code>LazyCollectionType</code>\nis an analogous component, but for collections.\nTo add new lazy collection operations, extend this protocol with\nmethods that return lazy wrappers that are themselves\n<code>LazyCollectionType</code>s.\n<strong>See Also:</strong> <code>LazySequenceType</code>, <code>LazyCollection</code>	http://swiftdoc.org/v2.2/protocol/LazyCollectionType/
LazyCollectionType.flatMap	A										Returns the concatenated results of mapping <code>transform</code> over\n<code>self</code>.  Equivalent to \n<pre><code>self.map(transform).flatten()</code></pre>\n<strong>Complexity:</strong> O(1)\n    Declaration    \n    <code>func flatMap&lt;Intermediate : CollectionType where Intermediate.Index : BidirectionalIndexType&gt;(transform: (Self.Elements.Generator.Element) -&gt; Intermediate) -&gt; LazyCollection&lt;FlattenBidirectionalCollection&lt;LazyMapCollection&lt;Self.Elements, Intermediate&gt;&gt;&gt;</code>	http://swiftdoc.org/v2.2/protocol/LazyCollectionType/#func-elements-index_-bidirectionalindextype-flatmap_
LazyCollectionType.flatten	A										A concatenation of the elements of <code>self</code>.\n    Declaration    \n    <code>func flatten() -&gt; LazyCollection&lt;FlattenCollection&lt;Self.Elements&gt;&gt;</code>	http://swiftdoc.org/v2.2/protocol/LazyCollectionType/#func-generator-element_-collectiontype-elements-generator-element_-collectiontype-generator-element-elements-generator-element-flatten
LazyCollectionType.flatten	A										A concatenation of the elements of <code>self</code>.\n    Declaration    \n    <code>func flatten() -&gt; LazyCollection&lt;FlattenBidirectionalCollection&lt;Self.Elements&gt;&gt;</code>	http://swiftdoc.org/v2.2/protocol/LazyCollectionType/#func-generator-element_-collectiontype-index_-bidirectionalindextype-generator-element-index_-bidirectionalindextype-elements-generator-element_-collectiontype-elements-index_-bidirectionalindextype-elements-generator-element-index_-bidirectionalindextype-generator-element-elements-generator-element-flatten
LazyCollectionType.reverse	A										Returns the elements of <code>self</code> in reverse order.\n<strong>Complexity:</strong> O(1)\n    Declaration    \n    <code>func reverse() -&gt; LazyCollection&lt;ReverseCollection&lt;Self.Elements&gt;&gt;</code>	http://swiftdoc.org/v2.2/protocol/LazyCollectionType/#func-index_-bidirectionalindextype-elements-index_-bidirectionalindextype-reverse
LazyCollectionType.reverse	A										Returns the elements of <code>self</code> in reverse order.\n<strong>Complexity:</strong> O(1)\n    Declaration    \n    <code>func reverse() -&gt; LazyCollection&lt;ReverseRandomAccessCollection&lt;Self.Elements&gt;&gt;</code>	http://swiftdoc.org/v2.2/protocol/LazyCollectionType/#func-index_-randomaccessindextype-elements-index_-randomaccessindextype-reverse
flatMap	R	LazyCollectionType.flatMap										
flatten	R	LazyCollectionType.flatten										
flatten	R	LazyCollectionType.flatten										
reverse	R	LazyCollectionType.reverse										
reverse	R	LazyCollectionType.reverse										
MutableSliceable	A										<pre><code>protocol MutableSliceable</code></pre>A collection with mutable slices.\nFor example,\n<pre><code> x[i..&lt;j] = someExpression\n x[i..&lt;j].mutatingMethod()</code></pre>\nDeprecated: MutableSliceable will be removed in Swift 3.  Use 'CollectionType where SubSequence : MutableCollectionType' instead..	http://swiftdoc.org/v2.2/protocol/MutableSliceable/
FloatingPointType	A										<pre><code>protocol FloatingPointType</code></pre>A set of common requirements for Swift's floating point types.	http://swiftdoc.org/v2.2/protocol/FloatingPointType/
FloatingPointType.NaN	A										A quiet NaN.\n    Declaration    \n    <code>static var NaN: Self { get }</code>	http://swiftdoc.org/v2.2/protocol/FloatingPointType/#static-var-nan_-self
FloatingPointType.infinity	A										The positive infinity.\n    Declaration    \n    <code>static var infinity: Self { get }</code>	http://swiftdoc.org/v2.2/protocol/FloatingPointType/#static-var-infinity_-self
FloatingPointType.quietNaN	A										A quiet NaN.\n    Declaration    \n    <code>static var quietNaN: Self { get }</code>	http://swiftdoc.org/v2.2/protocol/FloatingPointType/#static-var-quietnan_-self
FloatingPointType.NaN	A										A quiet NaN.\n    Declaration    \n    <code>static var NaN: Self { get }</code>	http://swiftdoc.org/v2.2/protocol/FloatingPointType/#static-var-nan_-self
FloatingPointType.infinity	A										The positive infinity.\n    Declaration    \n    <code>static var infinity: Self { get }</code>	http://swiftdoc.org/v2.2/protocol/FloatingPointType/#static-var-infinity_-self
FloatingPointType.quietNaN	A										A quiet NaN.\n    Declaration    \n    <code>static var quietNaN: Self { get }</code>	http://swiftdoc.org/v2.2/protocol/FloatingPointType/#static-var-quietnan_-self
FloatingPointType.floatingPointClass	A										The IEEE 754 &quot;class&quot; of this type.\n    Declaration    \n    <code>var floatingPointClass: FloatingPointClassification { get }</code>	http://swiftdoc.org/v2.2/protocol/FloatingPointType/#var-floatingpointclass_-floatingpointclassification
FloatingPointType.isFinite	A										<code>true</code> iff <code>self</code> is zero, subnormal, or normal (not infinity\nor NaN).\n    Declaration    \n    <code>var isFinite: Bool { get }</code>	http://swiftdoc.org/v2.2/protocol/FloatingPointType/#var-isfinite_-bool
FloatingPointType.isInfinite	A										<code>true</code> iff <code>self</code> is infinity.\n    Declaration    \n    <code>var isInfinite: Bool { get }</code>	http://swiftdoc.org/v2.2/protocol/FloatingPointType/#var-isinfinite_-bool
FloatingPointType.isNaN	A										<code>true</code> iff <code>self</code> is NaN.\n    Declaration    \n    <code>var isNaN: Bool { get }</code>	http://swiftdoc.org/v2.2/protocol/FloatingPointType/#var-isnan_-bool
FloatingPointType.isNormal	A										<code>true</code> iff <code>self</code> is normal (not zero, subnormal, infinity, or\nNaN).\n    Declaration    \n    <code>var isNormal: Bool { get }</code>	http://swiftdoc.org/v2.2/protocol/FloatingPointType/#var-isnormal_-bool
FloatingPointType.isSignMinus	A										<code>true</code> iff <code>self</code> is negative.\n    Declaration    \n    <code>var isSignMinus: Bool { get }</code>	http://swiftdoc.org/v2.2/protocol/FloatingPointType/#var-issignminus_-bool
FloatingPointType.isSignaling	A										<code>true</code> iff <code>self</code> is a signaling NaN.\n    Declaration    \n    <code>var isSignaling: Bool { get }</code>	http://swiftdoc.org/v2.2/protocol/FloatingPointType/#var-issignaling_-bool
FloatingPointType.isSubnormal	A										<code>true</code> iff <code>self</code> is subnormal.\n    Declaration    \n    <code>var isSubnormal: Bool { get }</code>	http://swiftdoc.org/v2.2/protocol/FloatingPointType/#var-issubnormal_-bool
FloatingPointType.isZero	A										<code>true</code> iff <code>self</code> is +0.0 or -0.0.\n    Declaration    \n    <code>var isZero: Bool { get }</code>	http://swiftdoc.org/v2.2/protocol/FloatingPointType/#var-iszero_-bool
NaN	R	FloatingPointType.NaN										
infinity	R	FloatingPointType.infinity										
quietNaN	R	FloatingPointType.quietNaN										
NaN	R	FloatingPointType.NaN										
infinity	R	FloatingPointType.infinity										
quietNaN	R	FloatingPointType.quietNaN										
floatingPointClass	R	FloatingPointType.floatingPointClass										
isFinite	R	FloatingPointType.isFinite										
isInfinite	R	FloatingPointType.isInfinite										
isNaN	R	FloatingPointType.isNaN										
isNormal	R	FloatingPointType.isNormal										
isSignMinus	R	FloatingPointType.isSignMinus										
isSignaling	R	FloatingPointType.isSignaling										
isSubnormal	R	FloatingPointType.isSubnormal										
isZero	R	FloatingPointType.isZero										
VaListBuilder	A										<pre><code>class VaListBuilder</code></pre>An object that can manage the lifetime of storage backing a\n<code>CVaListPointer</code>.\nDeprecated: it will be removed in Swift 3.	http://swiftdoc.org/v2.2/type/VaListBuilder/
assert.assert	A										Traditional C-style assert with an optional message.\nUse this function for internal sanity checks that are active\nduring testing but do not impact performance of shipping code.\nTo check for invalid usage in Release builds; see <code>precondition</code>.\nIn playgrounds and -Onone builds (the default for Xcode's Debug\nconfiguration): if <code>condition</code> evaluates to false, stop program\nexecution in a debuggable state after printing <code>message</code>.In -O builds (the default for Xcode's Release configuration),\n<code>condition</code> is not evaluated, and there are no effects.In -Ounchecked builds, <code>condition</code> is not evaluated, but the\noptimizer may assume that it would evaluate to <code>true</code>. Failure\nto satisfy that assumption in -Ounchecked builds is a serious\nprogramming error.\n    Declaration    \n    <code>func assert(@autoclosure condition: () -&gt; Bool, @autoclosure _ message: () -&gt; String = default, file: StaticString = #file, line: UInt = #line)</code>	http://swiftdoc.org/v2.2/func/assert#func-assert_-bool_-string-file_-staticstring-line_-uint
assert	R	assert.assert										
_SignedIntegerType	A										<pre><code>protocol _SignedIntegerType</code></pre>This protocol is an implementation detail of <code>SignedIntegerType</code>;\ndo not use it directly.	http://swiftdoc.org/v2.2/protocol/_SignedIntegerType/
Equatable	A										<pre><code>protocol Equatable</code></pre>Instances of conforming types can be compared for value equality\nusing operators <code>==</code> and <code>!=</code>.\nWhen adopting <code>Equatable</code>, only the <code>==</code> operator is required to be\nimplemented.  The standard library provides an implementation for <code>!=</code>.	http://swiftdoc.org/v2.2/protocol/Equatable/
LazyFilterSequence	A										<pre><code>struct LazyFilterSequence&lt;Base : SequenceType&gt;</code></pre>A sequence whose elements consist of the elements of some base\nsequence that also satisfy a given predicate.\n<strong>Note:</strong> <code>s.lazy.filter { ... }</code>, for an arbitrary sequence <code>s</code>,\n  is a <code>LazyFilterSequence</code>.	http://swiftdoc.org/v2.2/type/LazyFilterSequence/
LazyFilterSequence.generate	A										Returns a generator over the elements of this sequence.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; LazyFilterGenerator&lt;Base.Generator&gt;</code>	http://swiftdoc.org/v2.2/type/LazyFilterSequence/#func-generate
LazyFilterSequence.base	A										The underlying sequence whose elements are being filtered\n    Declaration    \n    <code>var base: Base { get }</code>	http://swiftdoc.org/v2.2/type/LazyFilterSequence/#var-base_-base
generate	R	LazyFilterSequence.generate										
base	R	LazyFilterSequence.base										
Indexable	A										<pre><code>protocol Indexable</code></pre>A type that provides subscript access to its elements.\n<strong>Important:</strong> In most cases, it's best to ignore this protocol and use\n  <code>CollectionType</code> instead, as it has a more complete interface.	http://swiftdoc.org/v2.2/protocol/Indexable/
Indexable.endIndex	A										The collection's &quot;past the end&quot; position.\n<code>endIndex</code> is not a valid argument to <code>subscript</code>, and is always\nreachable from <code>startIndex</code> by zero or more applications of\n<code>successor()</code>.\n<strong>Complexity:</strong> O(1)\n    Declaration    \n    <code>var endIndex: Self.Index { get }</code>	http://swiftdoc.org/v2.2/protocol/Indexable/#var-endindex_-self-index
Indexable.startIndex	A										The position of the first element in a non-empty collection.\nIn an empty collection, <code>startIndex == endIndex</code>.\n<strong>Complexity:</strong> O(1)\n    Declaration    \n    <code>var startIndex: Self.Index { get }</code>	http://swiftdoc.org/v2.2/protocol/Indexable/#var-startindex_-self-index
endIndex	R	Indexable.endIndex										
startIndex	R	Indexable.startIndex										
UnsignedIntegerType	A										<pre><code>protocol UnsignedIntegerType</code></pre>A set of common requirements for Swift's unsigned integer types.	http://swiftdoc.org/v2.2/protocol/UnsignedIntegerType/
UnsignedIntegerType.toUIntMax	A										Represent this number using Swift's widest native unsigned\ninteger type.\n    Declaration    \n    <code>func toUIntMax() -&gt; UIntMax</code>	http://swiftdoc.org/v2.2/protocol/UnsignedIntegerType/#func-touintmax
toUIntMax	R	UnsignedIntegerType.toUIntMax										
_NSDictionaryCoreType	A										<pre><code>protocol _NSDictionaryCoreType</code></pre>A shadow for the &quot;core operations&quot; of NSDictionary.\nCovers a set of operations everyone needs to implement in order to\nbe a useful <code>NSDictionary</code> subclass.	http://swiftdoc.org/v2.2/protocol/_NSDictionaryCoreType/
_NSDictionaryCoreType.getObjects	A										Declaration    \n    <code>func getObjects(objects: UnsafeMutablePointer&lt;AnyObject&gt;, andKeys keys: UnsafeMutablePointer&lt;AnyObject&gt;)</code>	http://swiftdoc.org/v2.2/protocol/_NSDictionaryCoreType/#func-getobjects_andkeys_
_NSDictionaryCoreType.keyEnumerator	A										Declaration    \n    <code>func keyEnumerator() -&gt; _NSEnumeratorType</code>	http://swiftdoc.org/v2.2/protocol/_NSDictionaryCoreType/#func-keyenumerator
_NSDictionaryCoreType.objectForKey	A										Declaration    \n    <code>func objectForKey(aKey: AnyObject) -&gt; AnyObject?</code>	http://swiftdoc.org/v2.2/protocol/_NSDictionaryCoreType/#func-objectforkey_
_NSDictionaryCoreType.count	A										Declaration    \n    <code>var count: Int { get }</code>	http://swiftdoc.org/v2.2/protocol/_NSDictionaryCoreType/#var-count_-int
getObjects	R	_NSDictionaryCoreType.getObjects										
keyEnumerator	R	_NSDictionaryCoreType.keyEnumerator										
objectForKey	R	_NSDictionaryCoreType.objectForKey										
count	R	_NSDictionaryCoreType.count										
_CVarArgAlignedType	A										<pre><code>protocol _CVarArgAlignedType</code></pre>Some types require alignment greater than Int on some architectures.	http://swiftdoc.org/v2.2/protocol/_CVarArgAlignedType/
UInt32	A										<pre><code>struct UInt32</code></pre>A 32-bit unsigned integer value\ntype.	http://swiftdoc.org/v2.2/type/UInt32/
UInt32.addWithOverflow	A										Add <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func addWithOverflow(lhs: UInt32, _ rhs: UInt32) -&gt; (UInt32, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/UInt32/#func-addwithoverflow__
UInt32.divideWithOverflow	A										Divide <code>lhs</code> and <code>rhs</code>, returning\na result and a <code>Bool</code>\nthat is <code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func divideWithOverflow(lhs: UInt32, _ rhs: UInt32) -&gt; (UInt32, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/UInt32/#func-dividewithoverflow__
UInt32.multiplyWithOverflow	A										Multiply <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func multiplyWithOverflow(lhs: UInt32, _ rhs: UInt32) -&gt; (UInt32, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/UInt32/#func-multiplywithoverflow__
UInt32.remainderWithOverflow	A										Divide <code>lhs</code> and <code>rhs</code>, returning\nthe remainder and a <code>Bool</code>\nthat is <code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func remainderWithOverflow(lhs: UInt32, _ rhs: UInt32) -&gt; (UInt32, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/UInt32/#func-remainderwithoverflow__
UInt32.subtractWithOverflow	A										Subtract <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func subtractWithOverflow(lhs: UInt32, _ rhs: UInt32) -&gt; (UInt32, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/UInt32/#func-subtractwithoverflow__
UInt32.predecessor	A										Returns the previous consecutive value before <code>self</code>.\n<strong>Requires:</strong> The previous value is representable.\n    Declaration    \n    <code>func predecessor() -&gt; UInt32</code>	http://swiftdoc.org/v2.2/type/UInt32/#func-predecessor
UInt32.successor	A										Returns the next consecutive value after <code>self</code>.\n<strong>Requires:</strong> The next value is representable.\n    Declaration    \n    <code>func successor() -&gt; UInt32</code>	http://swiftdoc.org/v2.2/type/UInt32/#func-successor
UInt32.toIntMax	A										Explicitly convert to <code>IntMax</code>.\n    Declaration    \n    <code>func toIntMax() -&gt; IntMax</code>	http://swiftdoc.org/v2.2/type/UInt32/#func-tointmax
UInt32.toUIntMax	A										Represent this number using Swift's widest native unsigned\ninteger type.\n    Declaration    \n    <code>func toUIntMax() -&gt; UIntMax</code>	http://swiftdoc.org/v2.2/type/UInt32/#func-touintmax
UInt32.allZeros	A										The empty bitset of type UInt32.\n    Declaration    \n    <code>static var allZeros: UInt32 { get }</code>	http://swiftdoc.org/v2.2/type/UInt32/#static-var-allzeros_-uint32
UInt32.max	A										Declaration    \n    <code>static var max: UInt32 { get }</code>	http://swiftdoc.org/v2.2/type/UInt32/#static-var-max_-uint32
UInt32.min	A										Declaration    \n    <code>static var min: UInt32 { get }</code>	http://swiftdoc.org/v2.2/type/UInt32/#static-var-min_-uint32
UInt32.allZeros	A										The empty bitset of type UInt32.\n    Declaration    \n    <code>static var allZeros: UInt32 { get }</code>	http://swiftdoc.org/v2.2/type/UInt32/#static-var-allzeros_-uint32
UInt32.max	A										Declaration    \n    <code>static var max: UInt32 { get }</code>	http://swiftdoc.org/v2.2/type/UInt32/#static-var-max_-uint32
UInt32.min	A										Declaration    \n    <code>static var min: UInt32 { get }</code>	http://swiftdoc.org/v2.2/type/UInt32/#static-var-min_-uint32
UInt32.bigEndian	A										Returns the big-endian representation of the integer, changing the\nbyte order if necessary.\n    Declaration    \n    <code>var bigEndian: UInt32 { get }</code>	http://swiftdoc.org/v2.2/type/UInt32/#var-bigendian_-uint32
UInt32.byteSwapped	A										Returns the current integer with the byte order swapped.\n    Declaration    \n    <code>var byteSwapped: UInt32 { get }</code>	http://swiftdoc.org/v2.2/type/UInt32/#var-byteswapped_-uint32
UInt32.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/UInt32/#var-description_-string
UInt32.hashValue	A										The hash value.\n<strong>Axiom:</strong> <code>x == y</code> implies <code>x.hashValue == y.hashValue</code>.\n<strong>Note:</strong> The hash value is not guaranteed to be stable across\n  different invocations of the same program.  Do not persist the\n  hash value across program runs.\n    Declaration    \n    <code>var hashValue: Int { get }</code>	http://swiftdoc.org/v2.2/type/UInt32/#var-hashvalue_-int
UInt32.littleEndian	A										Returns the little-endian representation of the integer, changing the\nbyte order if necessary.\n    Declaration    \n    <code>var littleEndian: UInt32 { get }</code>	http://swiftdoc.org/v2.2/type/UInt32/#var-littleendian_-uint32
addWithOverflow	R	UInt32.addWithOverflow										
divideWithOverflow	R	UInt32.divideWithOverflow										
multiplyWithOverflow	R	UInt32.multiplyWithOverflow										
remainderWithOverflow	R	UInt32.remainderWithOverflow										
subtractWithOverflow	R	UInt32.subtractWithOverflow										
predecessor	R	UInt32.predecessor										
successor	R	UInt32.successor										
toIntMax	R	UInt32.toIntMax										
toUIntMax	R	UInt32.toUIntMax										
allZeros	R	UInt32.allZeros										
max	R	UInt32.max										
min	R	UInt32.min										
allZeros	R	UInt32.allZeros										
max	R	UInt32.max										
min	R	UInt32.min										
bigEndian	R	UInt32.bigEndian										
byteSwapped	R	UInt32.byteSwapped										
description	R	UInt32.description										
hashValue	R	UInt32.hashValue										
littleEndian	R	UInt32.littleEndian										
String.UTF8View	A										<pre><code>struct String.UTF8View</code></pre>A collection of UTF-8 code units that encodes a <code>String</code> value.	http://swiftdoc.org/v2.2/type/String.UTF8View/
String.UTF8View.debugDescription	A										Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/String.UTF8View/#var-debugdescription_-string
String.UTF8View.description	A										Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/String.UTF8View/#var-description_-string
String.UTF8View.endIndex	A										The &quot;past the end&quot; position.\n<code>endIndex</code> is not a valid argument to <code>subscript</code>, and is always\nreachable from <code>startIndex</code> by zero or more applications of\n<code>successor()</code>.\n    Declaration    \n    <code>var endIndex: String.UTF8View.Index { get }</code>	http://swiftdoc.org/v2.2/type/String.UTF8View/#var-endindex_-string-utf8view-index
String.UTF8View.startIndex	A										The position of the first code unit if the <code>String</code> is\nnon-empty; identical to <code>endIndex</code> otherwise.\n    Declaration    \n    <code>var startIndex: String.UTF8View.Index { get }</code>	http://swiftdoc.org/v2.2/type/String.UTF8View/#var-startindex_-string-utf8view-index
debugDescription	R	String.UTF8View.debugDescription										
description	R	String.UTF8View.description										
endIndex	R	String.UTF8View.endIndex										
startIndex	R	String.UTF8View.startIndex										
fatalError.fatalError	A										Unconditionally print a <code>message</code> and stop execution.\n    Declaration    \n    <code>@noreturn  func fatalError(@autoclosure message: () -&gt; String = default, file: StaticString = #file, line: UInt = #line)</code>	http://swiftdoc.org/v2.2/func/fatalError#func-fatalerror_-string-file_-staticstring-line_-uint
fatalError	R	fatalError.fatalError										
alignof.alignof	A										Returns the minimum memory alignment of <code>T</code>.\n    Declaration    \n    <code>func alignof&lt;T&gt;(_: T.Type) -&gt; Int</code>	http://swiftdoc.org/v2.2/func/alignof#func-alignof-t_-t-type
alignof	R	alignof.alignof										
anyGenerator.anyGenerator	A										Declaration    \n    <code>func anyGenerator&lt;G : GeneratorType&gt;(base: G) -&gt; AnyGenerator&lt;G.Element&gt;</code>	http://swiftdoc.org/v2.2/func/anyGenerator#func-anygenerator-g_-generatortype_-g
anyGenerator.anyGenerator	A										Declaration    \n    <code>func anyGenerator&lt;Element&gt;(body: () -&gt; Element?) -&gt; AnyGenerator&lt;Element&gt;</code>	http://swiftdoc.org/v2.2/func/anyGenerator#func-anygenerator-element_-element
anyGenerator	R	anyGenerator.anyGenerator										
anyGenerator	R	anyGenerator.anyGenerator										
isUniquelyReferenced.isUniquelyReferenced	A										Returns <code>true</code> iff <code>object</code> is a non-<code>@objc</code> class instance with a single\nstrong reference.\nDoes not modify <code>object</code>; the use of <code>inout</code> is an\nimplementation artifact.Weak references do not affect the result of this function.\nUseful for implementing the copy-on-write optimization for the\ndeep storage of value types:\n<pre><code>mutating func modifyMe(arg: X) {\n  if isUniquelyReferenced(&amp;myStorage) {\n    myStorage.modifyInPlace(arg)\n  }\n  else {\n    myStorage = myStorage.createModified(arg)\n  }\n}</code></pre>\nThis function is safe to use for <code>mutating</code> functions in\nmultithreaded code because a false positive would imply that there\nis already a user-level data race on the value being mutated.\n    Declaration    \n    <code>func isUniquelyReferenced&lt;T : NonObjectiveCBase&gt;(inout object: T) -&gt; Bool</code>	http://swiftdoc.org/v2.2/func/isUniquelyReferenced#func-isuniquelyreferenced-t_-nonobjectivecbase-inout_-t
isUniquelyReferenced	R	isUniquelyReferenced.isUniquelyReferenced										
alignofValue.alignofValue	A										Returns the minimum memory alignment of <code>T</code>.\n    Declaration    \n    <code>func alignofValue&lt;T&gt;(_: T) -&gt; Int</code>	http://swiftdoc.org/v2.2/func/alignofValue#func-alignofvalue-t_-t
alignofValue	R	alignofValue.alignofValue										
isUniquelyReferencedNonObjC.isUniquelyReferencedNonObjC	A										Returns <code>true</code> iff <code>object</code> is a non-<code>@objc</code> class instance with\na single strong reference.\nDoes not modify <code>object</code>; the use of <code>inout</code> is an\nimplementation artifact.If <code>object</code> is an Objective-C class instance, returns <code>false</code>.Weak references do not affect the result of this function.\nUseful for implementing the copy-on-write optimization for the\ndeep storage of value types:\n<pre><code>mutating func modifyMe(arg: X) {\n  if isUniquelyReferencedNonObjC(&amp;myStorage) {\n    myStorage.modifyInPlace(arg)\n  }\n  else {\n    myStorage = self.createModified(myStorage, arg)\n  }\n}</code></pre>\nThis function is safe to use for <code>mutating</code> functions in\nmultithreaded code because a false positive would imply that there\nis already a user-level data race on the value being mutated.\n    Declaration    \n    <code>func isUniquelyReferencedNonObjC&lt;T : AnyObject&gt;(inout object: T) -&gt; Bool</code>	http://swiftdoc.org/v2.2/func/isUniquelyReferencedNonObjC#func-isuniquelyreferencednonobjc-t_-anyobject-inout_-t
isUniquelyReferencedNonObjC.isUniquelyReferencedNonObjC	A										Returns <code>true</code> iff <code>object</code> is a non-<code>@objc</code> class instance with\na single strong reference.\nDoes not modify <code>object</code>; the use of <code>inout</code> is an\nimplementation artifact.If <code>object</code> is an Objective-C class instance, returns <code>false</code>.Weak references do not affect the result of this function.\nUseful for implementing the copy-on-write optimization for the\ndeep storage of value types:\n<pre><code>mutating func modifyMe(arg: X) {\n  if isUniquelyReferencedNonObjC(&amp;myStorage) {\n    myStorage.modifyInPlace(arg)\n  }\n  else {\n    myStorage = self.createModified(myStorage, arg)\n  }\n}</code></pre>\nThis function is safe to use for <code>mutating</code> functions in\nmultithreaded code because a false positive would imply that there\nis already a user-level data race on the value being mutated.\n    Declaration    \n    <code>func isUniquelyReferencedNonObjC&lt;T : AnyObject&gt;(inout object: T?) -&gt; Bool</code>	http://swiftdoc.org/v2.2/func/isUniquelyReferencedNonObjC#func-isuniquelyreferencednonobjc-t_-anyobject-inout_-t
isUniquelyReferencedNonObjC	R	isUniquelyReferencedNonObjC.isUniquelyReferencedNonObjC										
isUniquelyReferencedNonObjC	R	isUniquelyReferencedNonObjC.isUniquelyReferencedNonObjC										
assertionFailure.assertionFailure	A										Indicate that an internal sanity check failed.\nUse this function to stop the program, without impacting the\nperformance of shipping code, when control flow is not expected to\nreach the call (e.g. in the <code>default</code> case of a <code>switch</code> where you\nhave knowledge that one of the other cases must be satisfied). To\nprotect code from invalid usage in Release builds; see\n<code>preconditionFailure</code>.\nIn playgrounds and -Onone builds (the default for Xcode's Debug\nconfiguration) stop program execution in a debuggable state\nafter printing <code>message</code>.In -O builds, has no effect.In -Ounchecked builds, the optimizer may assume that this\nfunction will never be called. Failure to satisfy that assumption\nis a serious programming error.\n    Declaration    \n    <code>func assertionFailure(@autoclosure message: () -&gt; String = default, file: StaticString = #file, line: UInt = #line)</code>	http://swiftdoc.org/v2.2/func/assertionFailure#func-assertionfailure_-string-file_-staticstring-line_-uint
assertionFailure	R	assertionFailure.assertionFailure										
withUnsafePointer.withUnsafePointer	A										Invokes <code>body</code> with an <code>UnsafePointer</code> to <code>arg</code> and returns the\nresult. Useful for calling Objective-C APIs that take &quot;in/out&quot;\nparameters (and default-constructible &quot;out&quot; parameters) by pointer.\n    Declaration    \n    <code>func withUnsafePointer&lt;T, Result&gt;(inout arg: T, @noescape _ body: UnsafePointer&lt;T&gt; throws -&gt; Result) rethrows -&gt; Result</code>	http://swiftdoc.org/v2.2/func/withUnsafePointer#func-withunsafepointer-t-result-inout_-t_-unsafepointer-t-throws-result
withUnsafePointer	R	withUnsafePointer.withUnsafePointer										
AnyRandomAccessIndex	A										<pre><code>struct AnyRandomAccessIndex</code></pre>A wrapper over an underlying <code>RandomAccessIndexType</code> that hides\nthe specific underlying type.\n<strong>See Also:</strong> <code>AnyRandomAccessCollection</code>	http://swiftdoc.org/v2.2/type/AnyRandomAccessIndex/
AnyRandomAccessIndex.predecessor	A										Returns the previous consecutive value in a discrete sequence of\n<code>AnyRandomAccessIndex</code> values.\n<strong>Requires:</strong> <code>self</code> has a well-defined predecessor.\n    Declaration    \n    <code>func predecessor() -&gt; AnyRandomAccessIndex</code>	http://swiftdoc.org/v2.2/type/AnyRandomAccessIndex/#func-predecessor
AnyRandomAccessIndex.successor	A										Returns the next consecutive value in a discrete sequence of\n<code>AnyRandomAccessIndex</code> values.\n<strong>Requires:</strong> <code>self</code> has a well-defined successor.\n    Declaration    \n    <code>func successor() -&gt; AnyRandomAccessIndex</code>	http://swiftdoc.org/v2.2/type/AnyRandomAccessIndex/#func-successor
predecessor	R	AnyRandomAccessIndex.predecessor										
successor	R	AnyRandomAccessIndex.successor										
BidirectionalIndexType	A										<pre><code>protocol BidirectionalIndexType</code></pre>An index that can step backwards via application of its\n<code>predecessor()</code> method.	http://swiftdoc.org/v2.2/protocol/BidirectionalIndexType/
BidirectionalIndexType.predecessor	A										Returns the previous consecutive value in a discrete sequence.\nIf <code>self</code> has a well-defined successor,\n<code>self.successor().predecessor() == self</code>.  If <code>self</code> has a\nwell-defined predecessor, <code>self.predecessor().successor() ==\nself</code>.\n<strong>Requires:</strong> <code>self</code> has a well-defined predecessor.\n    Declaration    \n    <code>func predecessor() -&gt; Self</code>	http://swiftdoc.org/v2.2/protocol/BidirectionalIndexType/#func-predecessor
BidirectionalIndexType.predecessor	A										Returns the previous consecutive value before <code>self</code>.\n<strong>Requires:</strong> The previous value is representable.\n    Declaration    \n    <code>func predecessor() -&gt; Self</code>	http://swiftdoc.org/v2.2/protocol/BidirectionalIndexType/#func-self_-reverseindextype-predecessor
BidirectionalIndexType.successor	A										Returns the next consecutive value after <code>self</code>.\n<strong>Requires:</strong> The next value is representable.\n    Declaration    \n    <code>func successor() -&gt; Self</code>	http://swiftdoc.org/v2.2/protocol/BidirectionalIndexType/#func-self_-reverseindextype-successor
predecessor	R	BidirectionalIndexType.predecessor										
predecessor	R	BidirectionalIndexType.predecessor										
successor	R	BidirectionalIndexType.successor										
ReverseIndexType	A										<pre><code>protocol ReverseIndexType</code></pre>An index that traverses the same positions as an underlying index,\nwith inverted traversal direction.	http://swiftdoc.org/v2.2/protocol/ReverseIndexType/
ReverseIndexType.base	A										The successor position in the underlying (un-reversed)\ncollection.\nIf <code>self</code> is <code>advance(c.reverse.startIndex, n)</code>, then:\n- <code>self.base</code> is <code>advance(c.endIndex, -n)</code>.\n- if <code>n</code> != <code>c.count</code>, then <code>c.reverse[self]</code> is \n  equivalent to <code>[self.base.predecessor()]</code>.\n    Declaration    \n    <code>var base: Self.Base { get }</code>	http://swiftdoc.org/v2.2/protocol/ReverseIndexType/#var-base_-self-base
base	R	ReverseIndexType.base										
EmptyGenerator	A										<pre><code>struct EmptyGenerator&lt;Element&gt;</code></pre>A generator that never produces an element.\n<strong>See Also:</strong> <code>EmptyCollection&lt;Element&gt;</code>.	http://swiftdoc.org/v2.2/type/EmptyGenerator/
EmptyGenerator.next	A										Returns <code>nil</code>, indicating that there are no more elements.\n    Declaration    \n    <code>mutating func next() -&gt; Element?</code>	http://swiftdoc.org/v2.2/type/EmptyGenerator/#func-next
next	R	EmptyGenerator.next										
UnsafeMutablePointer	A										<pre><code>struct UnsafeMutablePointer&lt;Memory&gt;</code></pre>A pointer to an object of type <code>Memory</code>.  This type provides no automated\nmemory management, and therefore the user must take care to allocate\nand free memory appropriately.\nThe pointer should be aligned to <code>alignof(Memory.self)</code>.\nThe pointer can be in one of the following states:\nMemory is not allocated (for example, pointer is null, or memory has\nbeen deallocated previously).Memory is allocated, but value has not been initialized.Memory is allocated and value is initialized.	http://swiftdoc.org/v2.2/type/UnsafeMutablePointer/
UnsafeMutablePointer.alloc	A										Allocate memory for <code>num</code> objects of type <code>Memory</code>.\n<strong>Postcondition:</strong> The memory is allocated, but not initialized.\n    Declaration    \n    <code>static func alloc(num: Int) -&gt; UnsafeMutablePointer&lt;Memory&gt;</code>	http://swiftdoc.org/v2.2/type/UnsafeMutablePointer/#func-alloc_
UnsafeMutablePointer.assignBackwardFrom	A										Assign from <code>count</code> values beginning at <code>source</code> into\ninitialized memory, proceeding from the last value to the first.\nUse this for assigning ranges into later memory that may overlap\nwith the source range.\n<strong>Requires:</strong> Either <code>source</code> precedes <code>self</code> or follows <code>self + count</code>.\n    Declaration    \n    <code>func assignBackwardFrom(source: UnsafeMutablePointer&lt;Memory&gt;, count: Int)</code>	http://swiftdoc.org/v2.2/type/UnsafeMutablePointer/#func-assignbackwardfrom_count_
UnsafeMutablePointer.assignFrom	A										Assign from <code>count</code> values beginning at source into initialized\nmemory, proceeding from the first element to the last.\n    Declaration    \n    <code>func assignFrom(source: UnsafeMutablePointer&lt;Memory&gt;, count: Int)</code>	http://swiftdoc.org/v2.2/type/UnsafeMutablePointer/#func-assignfrom_count_
UnsafeMutablePointer.dealloc	A										Deallocate <code>num</code> objects.\n<strong><code>num</code>:</strong>  Number of objects to deallocate.  Should match exactly\n  the value that was passed to <code>alloc()</code> (partial deallocations are not\n  possible).\n<strong>Precondition:</strong> The memory is not initialized.\n<strong>Postcondition:</strong> The memory has been deallocated.\n    Declaration    \n    <code>func dealloc(num: Int)</code>	http://swiftdoc.org/v2.2/type/UnsafeMutablePointer/#func-dealloc_
UnsafeMutablePointer.destroy	A										Destroy the object the pointer points to.\n<strong>Precondition:</strong> The memory is initialized.\n<strong>Postcondition:</strong> The value has been destroyed and the memory must\n  be initialized before being used again.\n    Declaration    \n    <code>func destroy()</code>	http://swiftdoc.org/v2.2/type/UnsafeMutablePointer/#func-destroy
UnsafeMutablePointer.destroy	A										Destroy the <code>count</code> objects the pointer points to.\n<strong>Precondition:</strong> The memory is initialized.\n<strong>Postcondition:</strong> The value has been destroyed and the memory must\n  be initialized before being used again.\n    Declaration    \n    <code>func destroy(count: Int)</code>	http://swiftdoc.org/v2.2/type/UnsafeMutablePointer/#func-destroy_
UnsafeMutablePointer.initialize	A										Initialize the value the pointer points to, to construct\nan object where there was no object previously stored.\n<strong>Precondition:</strong> The memory is not initialized.\n<strong>Postcondition:</strong> The memory is initialized; the value should eventually\n  be destroyed or moved from to avoid leaks.\n    Declaration    \n    <code>func initialize(newvalue: Memory)</code>	http://swiftdoc.org/v2.2/type/UnsafeMutablePointer/#func-initialize_
UnsafeMutablePointer.initializeFrom	A										Copy the elements of <code>C</code> into raw memory.\n<strong>Precondition:</strong> The memory is not initialized.\n    Declaration    \n    <code>func initializeFrom&lt;C : CollectionType where C.Generator.Element == Memory&gt;(source: C)</code>	http://swiftdoc.org/v2.2/type/UnsafeMutablePointer/#func-initializefrom_
UnsafeMutablePointer.initializeFrom	A										Copy <code>count</code> values beginning at source into raw memory.\n<strong>Precondition:</strong> The memory is not initialized.\n<strong>Requires:</strong> <code>self</code> and <code>source</code> may not overlap.\n    Declaration    \n    <code>func initializeFrom(source: UnsafeMutablePointer&lt;Memory&gt;, count: Int)</code>	http://swiftdoc.org/v2.2/type/UnsafeMutablePointer/#func-initializefrom_count_
UnsafeMutablePointer.move	A										Retrieve the value the pointer points to, moving it away\nfrom the location referenced in memory.\nEquivalent to reading <code>memory</code> property and calling <code>destroy()</code>,\nbut more efficient.\n<strong>Precondition:</strong> The memory is initialized.\n<strong>Postcondition:</strong> The value has been destroyed and the memory must\n  be initialized before being used again.\n    Declaration    \n    <code>func move() -&gt; Memory</code>	http://swiftdoc.org/v2.2/type/UnsafeMutablePointer/#func-move
UnsafeMutablePointer.moveAssignFrom	A										Assign from <code>count</code> values beginning at <code>source</code> into initialized\nmemory, transforming the source values into raw memory.\n<strong>Requires:</strong> The <code>self</code> and <code>source</code> ranges may not overlap.\n    Declaration    \n    <code>func moveAssignFrom(source: UnsafeMutablePointer&lt;Memory&gt;, count: Int)</code>	http://swiftdoc.org/v2.2/type/UnsafeMutablePointer/#func-moveassignfrom_count_
UnsafeMutablePointer.moveInitializeBackwardFrom	A										Move <code>count</code> values beginning at <code>source</code> into uninitialized memory,\ntransforming the source values into raw memory, proceeding from\nthe last value to the first.  Use this for copying ranges into\nlater memory that may overlap with the source range.\n<strong>Requires:</strong> Either <code>source</code> precedes <code>self</code> or follows <code>self + count</code>.\n    Declaration    \n    <code>func moveInitializeBackwardFrom(source: UnsafeMutablePointer&lt;Memory&gt;, count: Int)</code>	http://swiftdoc.org/v2.2/type/UnsafeMutablePointer/#func-moveinitializebackwardfrom_count_
UnsafeMutablePointer.moveInitializeFrom	A										Move <code>count</code> values beginning at source into raw memory,\ntransforming the source values into raw memory.\n    Declaration    \n    <code>func moveInitializeFrom(source: UnsafeMutablePointer&lt;Memory&gt;, count: Int)</code>	http://swiftdoc.org/v2.2/type/UnsafeMutablePointer/#func-moveinitializefrom_count_
UnsafeMutablePointer.predecessor	A										Returns the previous consecutive value before <code>self</code>.\n<strong>Requires:</strong> The previous value is representable.\n    Declaration    \n    <code>func predecessor() -&gt; UnsafeMutablePointer&lt;Memory&gt;</code>	http://swiftdoc.org/v2.2/type/UnsafeMutablePointer/#func-predecessor
UnsafeMutablePointer.successor	A										Returns the next consecutive value after <code>self</code>.\n<strong>Requires:</strong> The next value is representable.\n    Declaration    \n    <code>func successor() -&gt; UnsafeMutablePointer&lt;Memory&gt;</code>	http://swiftdoc.org/v2.2/type/UnsafeMutablePointer/#func-successor
UnsafeMutablePointer.debugDescription	A										A textual representation of <code>self</code>, suitable for debugging.\n    Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/UnsafeMutablePointer/#var-debugdescription_-string
UnsafeMutablePointer.hashValue	A										The hash value.\n<strong>Axiom:</strong> <code>x == y</code> implies <code>x.hashValue == y.hashValue</code>.\n<strong>Note:</strong> The hash value is not guaranteed to be stable across\n  different invocations of the same program.  Do not persist the\n  hash value across program runs.\n    Declaration    \n    <code>var hashValue: Int { get }</code>	http://swiftdoc.org/v2.2/type/UnsafeMutablePointer/#var-hashvalue_-int
UnsafeMutablePointer.memory	A										Access the underlying raw memory, getting and setting values.\n    Declaration    \n    <code>var memory: Memory { get set }</code>	http://swiftdoc.org/v2.2/type/UnsafeMutablePointer/#var-memory_-memory
alloc	R	UnsafeMutablePointer.alloc										
assignBackwardFrom	R	UnsafeMutablePointer.assignBackwardFrom										
assignFrom	R	UnsafeMutablePointer.assignFrom										
dealloc	R	UnsafeMutablePointer.dealloc										
destroy	R	UnsafeMutablePointer.destroy										
destroy	R	UnsafeMutablePointer.destroy										
initialize	R	UnsafeMutablePointer.initialize										
initializeFrom	R	UnsafeMutablePointer.initializeFrom										
initializeFrom	R	UnsafeMutablePointer.initializeFrom										
move	R	UnsafeMutablePointer.move										
moveAssignFrom	R	UnsafeMutablePointer.moveAssignFrom										
moveInitializeBackwardFrom	R	UnsafeMutablePointer.moveInitializeBackwardFrom										
moveInitializeFrom	R	UnsafeMutablePointer.moveInitializeFrom										
predecessor	R	UnsafeMutablePointer.predecessor										
successor	R	UnsafeMutablePointer.successor										
debugDescription	R	UnsafeMutablePointer.debugDescription										
hashValue	R	UnsafeMutablePointer.hashValue										
memory	R	UnsafeMutablePointer.memory										
Mirror	A										<pre><code>struct Mirror</code></pre>Representation of the sub-structure and optional &quot;display style&quot;\nof any arbitrary subject instance.\nDescribes the parts---such as stored properties, collection\nelements, tuple elements, or the active enumeration case---that\nmake up a particular instance.  May also supply a &quot;display style&quot;\nproperty that suggests how this structure might be rendered.\nMirrors are used by playgrounds and the debugger.	http://swiftdoc.org/v2.2/type/Mirror/
Mirror.customMirror	A										Declaration    \n    <code>func customMirror() -&gt; Mirror</code>	http://swiftdoc.org/v2.2/type/Mirror/#func-custommirror
Mirror.descendant	A										Returns a specific descendant of the reflected subject, or <code>nil</code>\nif no such descendant exists.\nA <code>String</code> argument selects the first <code>Child</code> with a matching label.\nAn integer argument n select the nth <code>Child</code>.  For example:\n  var d = Mirror(reflecting: x).descendant(1, &quot;two&quot;, 3)\nis equivalent to:\n<pre><code>var d = nil\nlet children = Mirror(reflecting: x).children\nlet p0 = children.startIndex.advancedBy(1, limit: children.endIndex)\nif p0 != children.endIndex {\n  let grandChildren = Mirror(reflecting: children[p0].value).children\n  SeekTwo: for g in grandChildren {\n    if g.label == &quot;two&quot; {\n      let greatGrandChildren = Mirror(reflecting: g.value).children\n      let p1 = greatGrandChildren.startIndex.advancedBy(3,\n        limit: greatGrandChildren.endIndex)\n      if p1 != endIndex { d = greatGrandChildren[p1].value }\n      break SeekTwo\n    }\n  }</code></pre>\nAs you can see, complexity for each element of the argument list\ndepends on the argument type and capabilities of the collection\nused to initialize the corresponding subject's parent's mirror.\nEach <code>String</code> argument results in a linear search.  In short,\nthis function is suitable for exploring the structure of a\n<code>Mirror</code> in a REPL or playground, but don't expect it to be\nefficient.\n    Declaration    \n    <code>func descendant(first: MirrorPathType, _ rest: MirrorPathType...) -&gt; Any?</code>	http://swiftdoc.org/v2.2/type/Mirror/#func-descendant__
Mirror.superclassMirror	A										Declaration    \n    <code>func superclassMirror() -&gt; Mirror?</code>	http://swiftdoc.org/v2.2/type/Mirror/#func-superclassmirror
Mirror.children	A										A collection of <code>Child</code> elements describing the structure of the\nreflected subject.\n    Declaration    \n    <code>var children: Children { get }</code>	http://swiftdoc.org/v2.2/type/Mirror/#var-children_-children
Mirror.description	A										Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/Mirror/#var-description_-string
Mirror.displayStyle	A										Suggests a display style for the reflected subject.\n    Declaration    \n    <code>var displayStyle: Mirror.DisplayStyle? { get }</code>	http://swiftdoc.org/v2.2/type/Mirror/#var-displaystyle_-mirror-displaystyle
Mirror.subjectType	A										The static type of the subject being reflected.\nThis type may differ from the subject's dynamic type when <code>self</code>\nis the <code>superclassMirror()</code> of another mirror.\n    Declaration    \n    <code>var subjectType: Any.Type { get }</code>	http://swiftdoc.org/v2.2/type/Mirror/#var-subjecttype_-any-type
customMirror	R	Mirror.customMirror										
descendant	R	Mirror.descendant										
superclassMirror	R	Mirror.superclassMirror										
children	R	Mirror.children										
description	R	Mirror.description										
displayStyle	R	Mirror.displayStyle										
subjectType	R	Mirror.subjectType										
Operator: ^	A										<pre><code>infix operator ^ {\n    associativity left\n    precedence 140\n}</code></pre>	http://swiftdoc.org/v2.2/operator/crt/
IntegerLiteralConvertible	A										<pre><code>protocol IntegerLiteralConvertible</code></pre>Conforming types can be initialized with integer literals.	http://swiftdoc.org/v2.2/protocol/IntegerLiteralConvertible/
Int8	A										<pre><code>struct Int8</code></pre>An 8-bit signed integer value\ntype.	http://swiftdoc.org/v2.2/type/Int8/
Int8.addWithOverflow	A										Add <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func addWithOverflow(lhs: Int8, _ rhs: Int8) -&gt; (Int8, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Int8/#func-addwithoverflow__
Int8.divideWithOverflow	A										Divide <code>lhs</code> and <code>rhs</code>, returning\na result and a <code>Bool</code>\nthat is <code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func divideWithOverflow(lhs: Int8, _ rhs: Int8) -&gt; (Int8, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Int8/#func-dividewithoverflow__
Int8.multiplyWithOverflow	A										Multiply <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func multiplyWithOverflow(lhs: Int8, _ rhs: Int8) -&gt; (Int8, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Int8/#func-multiplywithoverflow__
Int8.remainderWithOverflow	A										Divide <code>lhs</code> and <code>rhs</code>, returning\nthe remainder and a <code>Bool</code>\nthat is <code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func remainderWithOverflow(lhs: Int8, _ rhs: Int8) -&gt; (Int8, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Int8/#func-remainderwithoverflow__
Int8.subtractWithOverflow	A										Subtract <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func subtractWithOverflow(lhs: Int8, _ rhs: Int8) -&gt; (Int8, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Int8/#func-subtractwithoverflow__
Int8.predecessor	A										Returns the previous consecutive value before <code>self</code>.\n<strong>Requires:</strong> The previous value is representable.\n    Declaration    \n    <code>func predecessor() -&gt; Int8</code>	http://swiftdoc.org/v2.2/type/Int8/#func-predecessor
Int8.successor	A										Returns the next consecutive value after <code>self</code>.\n<strong>Requires:</strong> The next value is representable.\n    Declaration    \n    <code>func successor() -&gt; Int8</code>	http://swiftdoc.org/v2.2/type/Int8/#func-successor
Int8.toIntMax	A										Represent this number using Swift's widest native signed\ninteger type.\n    Declaration    \n    <code>func toIntMax() -&gt; IntMax</code>	http://swiftdoc.org/v2.2/type/Int8/#func-tointmax
Int8.allZeros	A										The empty bitset of type Int8.\n    Declaration    \n    <code>static var allZeros: Int8 { get }</code>	http://swiftdoc.org/v2.2/type/Int8/#static-var-allzeros_-int8
Int8.max	A										Declaration    \n    <code>static var max: Int8 { get }</code>	http://swiftdoc.org/v2.2/type/Int8/#static-var-max_-int8
Int8.min	A										Declaration    \n    <code>static var min: Int8 { get }</code>	http://swiftdoc.org/v2.2/type/Int8/#static-var-min_-int8
Int8.allZeros	A										The empty bitset of type Int8.\n    Declaration    \n    <code>static var allZeros: Int8 { get }</code>	http://swiftdoc.org/v2.2/type/Int8/#static-var-allzeros_-int8
Int8.max	A										Declaration    \n    <code>static var max: Int8 { get }</code>	http://swiftdoc.org/v2.2/type/Int8/#static-var-max_-int8
Int8.min	A										Declaration    \n    <code>static var min: Int8 { get }</code>	http://swiftdoc.org/v2.2/type/Int8/#static-var-min_-int8
Int8.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/Int8/#var-description_-string
Int8.hashValue	A										The hash value.\n<strong>Axiom:</strong> <code>x == y</code> implies <code>x.hashValue == y.hashValue</code>.\n<strong>Note:</strong> The hash value is not guaranteed to be stable across\n  different invocations of the same program.  Do not persist the\n  hash value across program runs.\n    Declaration    \n    <code>var hashValue: Int { get }</code>	http://swiftdoc.org/v2.2/type/Int8/#var-hashvalue_-int
addWithOverflow	R	Int8.addWithOverflow										
divideWithOverflow	R	Int8.divideWithOverflow										
multiplyWithOverflow	R	Int8.multiplyWithOverflow										
remainderWithOverflow	R	Int8.remainderWithOverflow										
subtractWithOverflow	R	Int8.subtractWithOverflow										
predecessor	R	Int8.predecessor										
successor	R	Int8.successor										
toIntMax	R	Int8.toIntMax										
allZeros	R	Int8.allZeros										
max	R	Int8.max										
min	R	Int8.min										
allZeros	R	Int8.allZeros										
max	R	Int8.max										
min	R	Int8.min										
description	R	Int8.description										
hashValue	R	Int8.hashValue										
ManagedBufferPointer	A										<pre><code>struct ManagedBufferPointer&lt;Value, Element&gt;</code></pre>Contains a buffer object, and provides access to an instance of\n<code>Value</code> and contiguous storage for an arbitrary number of\n<code>Element</code> instances stored in that buffer.\nFor most purposes, the <code>ManagedBuffer</code> class works fine for this\npurpose, and can simply be used on its own.  However, in cases\nwhere objects of various different classes must serve as storage,\n<code>ManagedBufferPointer</code> is needed.\nA valid buffer class is non-<code>@objc</code>, with no declared stored\n  properties.  Its <code>deinit</code> must destroy its\n  stored <code>Value</code> and any constructed <code>Element</code>s.\nExample Buffer Class\n<pre><code> class MyBuffer&lt;Element&gt; { // non-@objc\n   typealias Manager = ManagedBufferPointer&lt;(Int,String), Element&gt;\n   deinit {\n     Manager(unsafeBufferObject: self).withUnsafeMutablePointers {\n       (pointerToValue, pointerToElements) -&gt; Void in\n       pointerToElements.destroy(self.count)\n       pointerToValue.destroy()\n     }\n   }\n   // All properties are *computed* based on members of the Value\n   var count: Int {\n     return Manager(unsafeBufferObject: self).value.0\n   }\n   var name: String {\n     return Manager(unsafeBufferObject: self).value.1\n   }\n }</code></pre>	http://swiftdoc.org/v2.2/type/ManagedBufferPointer/
ManagedBufferPointer.holdsUniqueOrPinnedReference	A										Returns <code>true</code> iff either <code>self</code> holds the only strong reference\nto its buffer or the pinned has been 'pinned'.\nSee <code>isUniquelyReferenced</code> for details.\n    Declaration    \n    <code>mutating func holdsUniqueOrPinnedReference() -&gt; Bool</code>	http://swiftdoc.org/v2.2/type/ManagedBufferPointer/#func-holdsuniqueorpinnedreference
ManagedBufferPointer.holdsUniqueReference	A										Returns <code>true</code> iff <code>self</code> holds the only strong reference to its buffer.\nSee <code>isUniquelyReferenced</code> for details.\n    Declaration    \n    <code>mutating func holdsUniqueReference() -&gt; Bool</code>	http://swiftdoc.org/v2.2/type/ManagedBufferPointer/#func-holdsuniquereference
ManagedBufferPointer.withUnsafeMutablePointerToElements	A										Call <code>body</code> with an <code>UnsafeMutablePointer</code> to the <code>Element</code>\nstorage.\n<strong>Note:</strong> This pointer is only valid for the duration of the\n  call to <code>body</code>.\n    Declaration    \n    <code>func withUnsafeMutablePointerToElements&lt;R&gt;(body: (UnsafeMutablePointer&lt;Element&gt;) -&gt; R) -&gt; R</code>	http://swiftdoc.org/v2.2/type/ManagedBufferPointer/#func-withunsafemutablepointertoelements_
ManagedBufferPointer.withUnsafeMutablePointerToValue	A										Call <code>body</code> with an <code>UnsafeMutablePointer</code> to the stored\n<code>Value</code>.\n<strong>Note:</strong> This pointer is only valid\n  for the duration of the call to <code>body</code>.\n    Declaration    \n    <code>func withUnsafeMutablePointerToValue&lt;R&gt;(body: (UnsafeMutablePointer&lt;Value&gt;) -&gt; R) -&gt; R</code>	http://swiftdoc.org/v2.2/type/ManagedBufferPointer/#func-withunsafemutablepointertovalue_
ManagedBufferPointer.withUnsafeMutablePointers	A										Call <code>body</code> with <code>UnsafeMutablePointer</code>s to the stored <code>Value</code>\nand raw <code>Element</code> storage.\n<strong>Note:</strong> These pointers are only valid for the duration of the\n  call to <code>body</code>.\n    Declaration    \n    <code>func withUnsafeMutablePointers&lt;R&gt;(body: (UnsafeMutablePointer&lt;Value&gt;, UnsafeMutablePointer&lt;Element&gt;) -&gt; R) -&gt; R</code>	http://swiftdoc.org/v2.2/type/ManagedBufferPointer/#func-withunsafemutablepointers_
ManagedBufferPointer.allocatedElementCount	A										The actual number of elements that can be stored in this object.\nThis value may be nontrivial to compute; it is usually a good\nidea to store this information in the &quot;value&quot; area when\nan instance is created.\n    Declaration    \n    <code>var allocatedElementCount: Int { get }</code>	http://swiftdoc.org/v2.2/type/ManagedBufferPointer/#var-allocatedelementcount_-int
ManagedBufferPointer.buffer	A										Returns the object instance being used for storage.\n    Declaration    \n    <code>var buffer: AnyObject { get }</code>	http://swiftdoc.org/v2.2/type/ManagedBufferPointer/#var-buffer_-anyobject
ManagedBufferPointer.value	A										The stored <code>Value</code> instance.\n    Declaration    \n    <code>var value: Value { get set }</code>	http://swiftdoc.org/v2.2/type/ManagedBufferPointer/#var-value_-value
holdsUniqueOrPinnedReference	R	ManagedBufferPointer.holdsUniqueOrPinnedReference										
holdsUniqueReference	R	ManagedBufferPointer.holdsUniqueReference										
withUnsafeMutablePointerToElements	R	ManagedBufferPointer.withUnsafeMutablePointerToElements										
withUnsafeMutablePointerToValue	R	ManagedBufferPointer.withUnsafeMutablePointerToValue										
withUnsafeMutablePointers	R	ManagedBufferPointer.withUnsafeMutablePointers										
allocatedElementCount	R	ManagedBufferPointer.allocatedElementCount										
buffer	R	ManagedBufferPointer.buffer										
value	R	ManagedBufferPointer.value										
ContiguousArray	A										<pre><code>struct ContiguousArray&lt;Element&gt;</code></pre>A fast, contiguously-stored array of <code>Element</code>.\nEfficiency is equivalent to that of <code>Array</code>, unless <code>Element</code> is a\n<code>class</code> or <code>@objc</code> <code>protocol</code> type, in which case using\n<code>ContiguousArray</code> may be more efficient.  Note, however, that\n<code>ContiguousArray</code> does not bridge to Objective-C.  See <code>Array</code>,\nwith which <code>ContiguousArray</code> shares most properties, for more\ndetail.	http://swiftdoc.org/v2.2/type/ContiguousArray/
ContiguousArray.appendContentsOf	A										Append the elements of <code>newElements</code> to <code>self</code>.\n<strong>Complexity:</strong> O(length of result).\n    Declaration    \n    <code>mutating func appendContentsOf&lt;S : SequenceType where S.Generator.Element == Element&gt;(newElements: S)</code>	http://swiftdoc.org/v2.2/type/ContiguousArray/#func-appendcontentsof-s_-sequencetype-where-s-generator-element-element_-s
ContiguousArray.appendContentsOf	A										Append the elements of <code>newElements</code> to <code>self</code>.\n<strong>Complexity:</strong> O(length of result).\n    Declaration    \n    <code>mutating func appendContentsOf&lt;C : CollectionType where C.Generator.Element == Element&gt;(newElements: C)</code>	http://swiftdoc.org/v2.2/type/ContiguousArray/#func-appendcontentsof-c_-collectiontype-where-c-generator-element-element_-c
ContiguousArray.popLast	A										If <code>!self.isEmpty</code>, remove the last element and return it, otherwise\nreturn <code>nil</code>.\n<strong>Complexity:</strong> O(1)\n    Declaration    \n    <code>mutating func popLast() -&gt; Element?</code>	http://swiftdoc.org/v2.2/type/ContiguousArray/#func-poplast
ContiguousArray.replaceRange	A										Replace the given <code>subRange</code> of elements with <code>newElements</code>.\n<strong>Complexity:</strong> O(<code>subRange.count</code>) if <code>subRange.endIndex\n  == self.endIndex</code> and <code>newElements.isEmpty</code>, O(N) otherwise.\n    Declaration    \n    <code>mutating func replaceRange&lt;C : CollectionType where C.Generator.Element == _Buffer.Element&gt;(subRange: Range&lt;Int&gt;, with newElements: C)</code>	http://swiftdoc.org/v2.2/type/ContiguousArray/#func-replacerange_with_
ContiguousArray.withUnsafeBufferPointer	A										Call <code>body(p)</code>, where <code>p</code> is a pointer to the <code>ContiguousArray</code>'s\ncontiguous storage.\nOften, the optimizer can eliminate bounds checks within an\narray algorithm, but when that fails, invoking the\nsame algorithm on <code>body</code>'s argument lets you trade safety for\nspeed.\n    Declaration    \n    <code>func withUnsafeBufferPointer&lt;R&gt;(@noescape body: (UnsafeBufferPointer&lt;Element&gt;) throws -&gt; R) rethrows -&gt; R</code>	http://swiftdoc.org/v2.2/type/ContiguousArray/#func-withunsafebufferpointer_
ContiguousArray.withUnsafeMutableBufferPointer	A										Call <code>body(p)</code>, where <code>p</code> is a pointer to the <code>ContiguousArray</code>'s\nmutable contiguous storage.\nOften, the optimizer can eliminate bounds- and uniqueness-checks\nwithin an array algorithm, but when that fails, invoking the\nsame algorithm on <code>body</code>'s argument lets you trade safety for\nspeed.\n<strong>Warning:</strong> Do not rely on anything about <code>self</code> (the <code>ContiguousArray</code>\n  that is the target of this method) during the execution of\n  <code>body</code>: it may not appear to have its correct value.  Instead,\n  use only the <code>UnsafeMutableBufferPointer</code> argument to <code>body</code>.\n    Declaration    \n    <code>mutating func withUnsafeMutableBufferPointer&lt;R&gt;(@noescape body: (inout UnsafeMutableBufferPointer&lt;Element&gt;) throws -&gt; R) rethrows -&gt; R</code>	http://swiftdoc.org/v2.2/type/ContiguousArray/#func-withunsafemutablebufferpointer_
ContiguousArray.capacity	A										The number of elements the <code>ContiguousArray</code> can store without reallocation.\n    Declaration    \n    <code>var capacity: Int { get }</code>	http://swiftdoc.org/v2.2/type/ContiguousArray/#var-capacity_-int
ContiguousArray.count	A										The number of elements the ContiguousArray stores.\n    Declaration    \n    <code>var count: Int { get }</code>	http://swiftdoc.org/v2.2/type/ContiguousArray/#var-count_-int
ContiguousArray.debugDescription	A										A textual representation of <code>self</code>, suitable for debugging.\n    Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/ContiguousArray/#var-debugdescription_-string
ContiguousArray.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/ContiguousArray/#var-description_-string
ContiguousArray.endIndex	A										A &quot;past-the-end&quot; element index; the successor of the last valid\nsubscript argument.\n    Declaration    \n    <code>var endIndex: Int { get }</code>	http://swiftdoc.org/v2.2/type/ContiguousArray/#var-endindex_-int
ContiguousArray.startIndex	A										Always zero, which is the index of the first element when non-empty.\n    Declaration    \n    <code>var startIndex: Int { get }</code>	http://swiftdoc.org/v2.2/type/ContiguousArray/#var-startindex_-int
appendContentsOf	R	ContiguousArray.appendContentsOf										
appendContentsOf	R	ContiguousArray.appendContentsOf										
popLast	R	ContiguousArray.popLast										
replaceRange	R	ContiguousArray.replaceRange										
withUnsafeBufferPointer	R	ContiguousArray.withUnsafeBufferPointer										
withUnsafeMutableBufferPointer	R	ContiguousArray.withUnsafeMutableBufferPointer										
capacity	R	ContiguousArray.capacity										
count	R	ContiguousArray.count										
debugDescription	R	ContiguousArray.debugDescription										
description	R	ContiguousArray.description										
endIndex	R	ContiguousArray.endIndex										
startIndex	R	ContiguousArray.startIndex										
AnyForwardCollection	A										<pre><code>struct AnyForwardCollection&lt;Element&gt;</code></pre>A type-erased wrapper over any collection with indices that\nsupport forward traversal.\nForwards operations to an arbitrary underlying collection having the\nsame <code>Element</code> type, hiding the specifics of the underlying\n<code>CollectionType</code>.\n<strong>See Also:</strong> <code>AnyBidirectionalType</code>, <code>AnyRandomAccessType</code>	http://swiftdoc.org/v2.2/type/AnyForwardCollection/
AnyForwardCollection.generate	A										Returns a generator over the elements of this collection.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; AnyGenerator&lt;Element&gt;</code>	http://swiftdoc.org/v2.2/type/AnyForwardCollection/#func-generate
AnyForwardCollection.count	A										The number of elements.\n<strong>Complexity:</strong> O(N).\n    Declaration    \n    <code>var count: IntMax { get }</code>	http://swiftdoc.org/v2.2/type/AnyForwardCollection/#var-count_-intmax
AnyForwardCollection.endIndex	A										The collection's &quot;past the end&quot; position.\n<code>endIndex</code> is not a valid argument to <code>subscript</code>, and is always\nreachable from <code>startIndex</code> by zero or more applications of\n<code>successor()</code>.\n    Declaration    \n    <code>var endIndex: AnyForwardIndex { get }</code>	http://swiftdoc.org/v2.2/type/AnyForwardCollection/#var-endindex_-anyforwardindex
AnyForwardCollection.startIndex	A										The position of the first element in a non-empty collection.\nIn an empty collection, <code>startIndex == endIndex</code>.\n    Declaration    \n    <code>var startIndex: AnyForwardIndex { get }</code>	http://swiftdoc.org/v2.2/type/AnyForwardCollection/#var-startindex_-anyforwardindex
generate	R	AnyForwardCollection.generate										
count	R	AnyForwardCollection.count										
endIndex	R	AnyForwardCollection.endIndex										
startIndex	R	AnyForwardCollection.startIndex										
GeneratorSequence	A										<pre><code>struct GeneratorSequence&lt;Base : GeneratorType&gt;</code></pre>A sequence built around a generator of type <code>G</code>.\nUseful mostly to recover the ability to use <code>for</code>...<code>in</code>,\ngiven just a generator <code>g</code>:\n<pre><code>for x in GeneratorSequence(g) { ... }</code></pre>	http://swiftdoc.org/v2.2/type/GeneratorSequence/
GeneratorSequence.next	A										Advance to the next element and return it, or <code>nil</code> if no next\nelement exists.\n<strong>Requires:</strong> <code>next()</code> has not been applied to a copy of <code>self</code>\n  since the copy was made, and no preceding call to <code>self.next()</code>\n  has returned <code>nil</code>.\n    Declaration    \n    <code>mutating func next() -&gt; Base.Element?</code>	http://swiftdoc.org/v2.2/type/GeneratorSequence/#func-next
next	R	GeneratorSequence.next										
GeneratorOfOne	A										<pre><code>struct GeneratorOfOne&lt;Element&gt;</code></pre>A generator that produces one or fewer instances of <code>Element</code>.	http://swiftdoc.org/v2.2/type/GeneratorOfOne/
GeneratorOfOne.next	A										Advance to the next element and return it, or <code>nil</code> if no next\nelement exists.\n<strong>Requires:</strong> <code>next()</code> has not been applied to a copy of <code>self</code>\n  since the copy was made, and no preceding call to <code>self.next()</code>\n  has returned <code>nil</code>.\n    Declaration    \n    <code>mutating func next() -&gt; Element?</code>	http://swiftdoc.org/v2.2/type/GeneratorOfOne/#func-next
next	R	GeneratorOfOne.next										
LazyFilterGenerator	A										<pre><code>struct LazyFilterGenerator&lt;Base : GeneratorType&gt;</code></pre>A generator that produces the elements produced by some base\ngenerator that also satisfy a given predicate.\n<strong>Note:</strong> This is the associated <code>Generator</code> of <code>LazyFilterSequence</code>\nand <code>LazyFilterCollection</code>.	http://swiftdoc.org/v2.2/type/LazyFilterGenerator/
LazyFilterGenerator.next	A										Advances to the next element and returns it, or <code>nil</code> if no next\nelement exists.\n<strong>Requires:</strong> <code>next()</code> has not been applied to a copy of <code>self</code>\n  since the copy was made, and no preceding call to <code>self.next()</code>\n  has returned <code>nil</code>.\n    Declaration    \n    <code>mutating func next() -&gt; Base.Element?</code>	http://swiftdoc.org/v2.2/type/LazyFilterGenerator/#func-next
LazyFilterGenerator.base	A										The underlying generator whose elements are being filtered\n    Declaration    \n    <code>var base: Base { get }</code>	http://swiftdoc.org/v2.2/type/LazyFilterGenerator/#var-base_-base
next	R	LazyFilterGenerator.next										
base	R	LazyFilterGenerator.base										
_MirrorType	A										<pre><code>protocol _MirrorType</code></pre>The type returned by <code>_reflect(x)</code>; supplies an API for runtime\nreflection on <code>x</code>.	http://swiftdoc.org/v2.2/protocol/_MirrorType/
_MirrorType.count	A										The count of <code>value</code>'s logical children.\n    Declaration    \n    <code>var count: Int { get }</code>	http://swiftdoc.org/v2.2/protocol/_MirrorType/#var-count_-int
_MirrorType.disposition	A										How <code>value</code> should be presented in an IDE.\n    Declaration    \n    <code>var disposition: _MirrorDisposition { get }</code>	http://swiftdoc.org/v2.2/protocol/_MirrorType/#var-disposition_-mirrordisposition
_MirrorType.objectIdentifier	A										A unique identifier for <code>value</code> if it is a class instance; <code>nil</code>\notherwise.\n    Declaration    \n    <code>var objectIdentifier: ObjectIdentifier? { get }</code>	http://swiftdoc.org/v2.2/protocol/_MirrorType/#var-objectidentifier_-objectidentifier
_MirrorType.quickLookObject	A										A rich representation of <code>value</code> for an IDE, or <code>nil</code> if none is supplied.\n    Declaration    \n    <code>var quickLookObject: PlaygroundQuickLook? { get }</code>	http://swiftdoc.org/v2.2/protocol/_MirrorType/#var-quicklookobject_-playgroundquicklook
_MirrorType.summary	A										A string description of <code>value</code>.\n    Declaration    \n    <code>var summary: String { get }</code>	http://swiftdoc.org/v2.2/protocol/_MirrorType/#var-summary_-string
_MirrorType.value	A										The instance being reflected.\n    Declaration    \n    <code>var value: Any { get }</code>	http://swiftdoc.org/v2.2/protocol/_MirrorType/#var-value_-any
_MirrorType.valueType	A										Identical to <code>value.dynamicType</code>.\n    Declaration    \n    <code>var valueType: Any.Type { get }</code>	http://swiftdoc.org/v2.2/protocol/_MirrorType/#var-valuetype_-any-type
count	R	_MirrorType.count										
disposition	R	_MirrorType.disposition										
objectIdentifier	R	_MirrorType.objectIdentifier										
quickLookObject	R	_MirrorType.quickLookObject										
summary	R	_MirrorType.summary										
value	R	_MirrorType.value										
valueType	R	_MirrorType.valueType										
ReverseCollection	A										<pre><code>struct ReverseCollection&lt;Base : CollectionType where Base.Index : BidirectionalIndexType&gt;</code></pre>A Collection that presents the elements of its <code>Base</code> collection\nin reverse order.\n<strong>Note:</strong> This type is the result of <code>x.reverse()</code> where <code>x</code> is a\n  collection having bidirectional indices.\nThe <code>reverse()</code> method is always lazy when applied to a collection\nwith bidirectional indices, but does not implicitly confer\nlaziness on algorithms applied to its result.  In other words, for\nordinary collections <code>c</code> having bidirectional indices:\n<code>c.reverse()</code> does not create new storage<code>c.reverse().map(f)</code> maps eagerly and returns a new array<code>c.lazy.reverse().map(f)</code> maps lazily and returns a <code>LazyMapCollection</code>\n<strong>See Also:</strong> <code>ReverseRandomAccessCollection</code>	http://swiftdoc.org/v2.2/type/ReverseCollection/
LazyCollection	A										<pre><code>struct LazyCollection&lt;Base : CollectionType&gt;</code></pre>A collection containing the same elements as a <code>Base</code> collection,\nbut on which some operations such as <code>map</code> and <code>filter</code> are\nimplemented lazily.\n<strong>See Also:</strong> <code>LazySequenceType</code>, <code>LazyCollection</code>	http://swiftdoc.org/v2.2/type/LazyCollection/
LazyCollection.generate	A										Returns a generator over the elements of this sequence.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; Base.Generator</code>	http://swiftdoc.org/v2.2/type/LazyCollection/#func-generate
LazyCollection.elements	A										The underlying collection\n    Declaration    \n    <code>var elements: Base { get }</code>	http://swiftdoc.org/v2.2/type/LazyCollection/#var-elements_-base
LazyCollection.endIndex	A										The collection's &quot;past the end&quot; position.\n<code>endIndex</code> is not a valid argument to <code>subscript</code>, and is always\nreachable from <code>startIndex</code> by zero or more applications of\n<code>successor()</code>.\n    Declaration    \n    <code>var endIndex: Base.Index { get }</code>	http://swiftdoc.org/v2.2/type/LazyCollection/#var-endindex_-base-index
LazyCollection.startIndex	A										The position of the first element in a non-empty collection.\nIn an empty collection, <code>startIndex == endIndex</code>.\n    Declaration    \n    <code>var startIndex: Base.Index { get }</code>	http://swiftdoc.org/v2.2/type/LazyCollection/#var-startindex_-base-index
generate	R	LazyCollection.generate										
elements	R	LazyCollection.elements										
endIndex	R	LazyCollection.endIndex										
startIndex	R	LazyCollection.startIndex										
IndexingGenerator	A										<pre><code>struct IndexingGenerator&lt;Elements : Indexable&gt;</code></pre>A generator for an arbitrary collection.  Provided <code>C</code>\nconforms to the other requirements of <code>Indexable</code>,\n<code>IndexingGenerator&lt;C&gt;</code> can be used as the result of <code>C</code>'s\n<code>generate()</code> method.  For example:\n<pre><code> struct MyCollection : CollectionType {\n   struct Index : ForwardIndexType { /* implementation hidden */ }\n   subscript(i: Index) -&gt; MyElement { /* implementation hidden */ }\n   func generate() -&gt; IndexingGenerator&lt;MyCollection&gt; { // &lt;===\n     return IndexingGenerator(self)\n   }\n }</code></pre>	http://swiftdoc.org/v2.2/type/IndexingGenerator/
IndexingGenerator.next	A										Advance to the next element and return it, or <code>nil</code> if no next\nelement exists.\n<strong>Requires:</strong> No preceding call to <code>self.next()</code> has returned <code>nil</code>.\n    Declaration    \n    <code>mutating func next() -&gt; Elements._Element?</code>	http://swiftdoc.org/v2.2/type/IndexingGenerator/#func-next
next	R	IndexingGenerator.next										
Double	A										<pre><code>struct Double</code></pre>A double-precision floating-point value type.	http://swiftdoc.org/v2.2/type/Double/
Double.abs	A										Returns the absolute value of <code>x</code>.\n    Declaration    \n    <code>static func abs(x: Double) -&gt; Double</code>	http://swiftdoc.org/v2.2/type/Double/#func-abs_
Double.advancedBy	A										Returns a <code>Self</code> <code>x</code> such that <code>self.distanceTo(x)</code> approximates\n<code>n</code>.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func advancedBy(amount: Double) -&gt; Double</code>	http://swiftdoc.org/v2.2/type/Double/#func-advancedby_
Double.distanceTo	A										Returns a stride <code>x</code> such that <code>self.advancedBy(x)</code> approximates\n<code>other</code>.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func distanceTo(other: Double) -&gt; Double</code>	http://swiftdoc.org/v2.2/type/Double/#func-distanceto_
Double.NaN	A										A quiet NaN.\n    Declaration    \n    <code>static var NaN: Double { get }</code>	http://swiftdoc.org/v2.2/type/Double/#static-var-nan_-double
Double.infinity	A										The positive infinity.\n    Declaration    \n    <code>static var infinity: Double { get }</code>	http://swiftdoc.org/v2.2/type/Double/#static-var-infinity_-double
Double.quietNaN	A										A quiet NaN.\n    Declaration    \n    <code>static var quietNaN: Double { get }</code>	http://swiftdoc.org/v2.2/type/Double/#static-var-quietnan_-double
Double.NaN	A										A quiet NaN.\n    Declaration    \n    <code>static var NaN: Double { get }</code>	http://swiftdoc.org/v2.2/type/Double/#static-var-nan_-double
Double.infinity	A										The positive infinity.\n    Declaration    \n    <code>static var infinity: Double { get }</code>	http://swiftdoc.org/v2.2/type/Double/#static-var-infinity_-double
Double.quietNaN	A										A quiet NaN.\n    Declaration    \n    <code>static var quietNaN: Double { get }</code>	http://swiftdoc.org/v2.2/type/Double/#static-var-quietnan_-double
Double.debugDescription	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/Double/#var-debugdescription_-string
Double.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/Double/#var-description_-string
Double.floatingPointClass	A										The IEEE 754 &quot;class&quot; of this type.\n    Declaration    \n    <code>var floatingPointClass: FloatingPointClassification { get }</code>	http://swiftdoc.org/v2.2/type/Double/#var-floatingpointclass_-floatingpointclassification
Double.hashValue	A										The hash value.\n<strong>Axiom:</strong> <code>x == y</code> implies <code>x.hashValue == y.hashValue</code>.\n<strong>Note:</strong> The hash value is not guaranteed to be stable across\n  different invocations of the same program.  Do not persist the\n  hash value across program runs.\n    Declaration    \n    <code>var hashValue: Int { get }</code>	http://swiftdoc.org/v2.2/type/Double/#var-hashvalue_-int
Double.isFinite	A										<code>true</code> iff <code>self</code> is zero, subnormal, or normal (not infinity\nor NaN).\n    Declaration    \n    <code>var isFinite: Bool { get }</code>	http://swiftdoc.org/v2.2/type/Double/#var-isfinite_-bool
Double.isInfinite	A										<code>true</code> iff <code>self</code> is infinity.\n    Declaration    \n    <code>var isInfinite: Bool { get }</code>	http://swiftdoc.org/v2.2/type/Double/#var-isinfinite_-bool
Double.isNaN	A										<code>true</code> iff <code>self</code> is NaN.\n    Declaration    \n    <code>var isNaN: Bool { get }</code>	http://swiftdoc.org/v2.2/type/Double/#var-isnan_-bool
Double.isNormal	A										<code>true</code> iff <code>self</code> is normal (not zero, subnormal, infinity, or\nNaN).\n    Declaration    \n    <code>var isNormal: Bool { get }</code>	http://swiftdoc.org/v2.2/type/Double/#var-isnormal_-bool
Double.isSignMinus	A										<code>true</code> iff <code>self</code> is negative.\n    Declaration    \n    <code>var isSignMinus: Bool { get }</code>	http://swiftdoc.org/v2.2/type/Double/#var-issignminus_-bool
Double.isSignaling	A										<code>true</code> iff <code>self</code> is a signaling NaN.\n    Declaration    \n    <code>var isSignaling: Bool { get }</code>	http://swiftdoc.org/v2.2/type/Double/#var-issignaling_-bool
Double.isSubnormal	A										<code>true</code> iff <code>self</code> is subnormal.\n    Declaration    \n    <code>var isSubnormal: Bool { get }</code>	http://swiftdoc.org/v2.2/type/Double/#var-issubnormal_-bool
Double.isZero	A										<code>true</code> iff <code>self</code> is +0.0 or -0.0.\n    Declaration    \n    <code>var isZero: Bool { get }</code>	http://swiftdoc.org/v2.2/type/Double/#var-iszero_-bool
abs	R	Double.abs										
advancedBy	R	Double.advancedBy										
distanceTo	R	Double.distanceTo										
NaN	R	Double.NaN										
infinity	R	Double.infinity										
quietNaN	R	Double.quietNaN										
NaN	R	Double.NaN										
infinity	R	Double.infinity										
quietNaN	R	Double.quietNaN										
debugDescription	R	Double.debugDescription										
description	R	Double.description										
floatingPointClass	R	Double.floatingPointClass										
hashValue	R	Double.hashValue										
isFinite	R	Double.isFinite										
isInfinite	R	Double.isInfinite										
isNaN	R	Double.isNaN										
isNormal	R	Double.isNormal										
isSignMinus	R	Double.isSignMinus										
isSignaling	R	Double.isSignaling										
isSubnormal	R	Double.isSubnormal										
isZero	R	Double.isZero										
FlattenSequence	A										<pre><code>struct FlattenSequence&lt;Base : SequenceType where Base.Generator.Element : SequenceType&gt;</code></pre>A flattened view of a base sequence-of-sequences.\nThe elements of this view are a concatenation of the elements of\neach sequence in the base.\nThe <code>flatten</code> property is always lazy, but does not implicitly\nconfer laziness on algorithms applied to its result.  In other\nwords, for ordinary sequences <code>s</code>:\n<code>s.flatten()</code> does not create new storage<code>s.flatten().map(f)</code> maps eagerly and returns a new array<code>s.lazy.flatten().map(f)</code> maps lazily and returns a <code>LazyMapSequence</code>\n<strong>See Also:</strong> <code>FlattenCollection</code>	http://swiftdoc.org/v2.2/type/FlattenSequence/
FlattenSequence.generate	A										Returns a generator over the elements of this sequence.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; FlattenGenerator&lt;Base.Generator&gt;</code>	http://swiftdoc.org/v2.2/type/FlattenSequence/#func-generate
generate	R	FlattenSequence.generate										
LazyMapSequence	A										<pre><code>struct LazyMapSequence&lt;Base : SequenceType, Element&gt;</code></pre>A <code>SequenceType</code> whose elements consist of those in a <code>Base</code>\n<code>SequenceType</code> passed through a transform function returning <code>Element</code>.\nThese elements are computed lazily, each time they're read, by\ncalling the transform function on a base element.	http://swiftdoc.org/v2.2/type/LazyMapSequence/
LazyMapSequence.generate	A										Returns a generator over the elements of this sequence.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; LazyMapGenerator&lt;Base.Generator, Element&gt;</code>	http://swiftdoc.org/v2.2/type/LazyMapSequence/#func-generate
generate	R	LazyMapSequence.generate										
PermutationGenerator	A										<pre><code>struct PermutationGenerator&lt;C : CollectionType, Indices : SequenceType where C.Index == Indices.Generator.Element&gt;</code></pre>A generator that adapts a collection <code>C</code> and any sequence of\nits <code>Index</code> type to present the collection's elements in a\npermuted order.\nDeprecated: PermitationGenerator will be removed in Swift 3.	http://swiftdoc.org/v2.2/type/PermutationGenerator/
PermutationGenerator.next	A										Advance to the next element and return it, or <code>nil</code> if no next\nelement exists.\n<strong>Requires:</strong> No preceding call to <code>self.next()</code> has returned <code>nil</code>.\n    Declaration    \n    <code>mutating func next() -&gt; C.Generator.Element?</code>	http://swiftdoc.org/v2.2/type/PermutationGenerator/#func-next
next	R	PermutationGenerator.next										
_NSDictionaryType	A										<pre><code>protocol _NSDictionaryType</code></pre>A shadow for the API of <code>NSDictionary</code> we will use in the core\nstdlib.\n<code>NSDictionary</code> operations, in addition to those on\n<code>_NSDictionaryCoreType</code>, that we need to use from the core stdlib.\nDistinct from <code>_NSDictionaryCoreType</code> because we don't want to be\nforced to implement operations that <code>NSDictionary</code> already\nsupplies.	http://swiftdoc.org/v2.2/protocol/_NSDictionaryType/
_DestructorSafeContainer	A										<pre><code>protocol _DestructorSafeContainer</code></pre>A container is destructor safe if whether it may store to memory on\ndestruction only depends on its type parameters.\nFor example, whether <code>Array&lt;Element&gt;</code> may store to memory on destruction\ndepends only on <code>Element</code>.\nIf <code>Element</code> is an <code>Int</code> we know the <code>Array&lt;Int&gt;</code> does not store to memory\nduring destruction. If <code>Element</code> is an arbitrary class\n<code>Array&lt;MemoryUnsafeDestructorClass&gt;</code> then the compiler will deduce may\nstore to memory on destruction because <code>MemoryUnsafeDestructorClass</code>'s\ndestructor may store to memory on destruction.	http://swiftdoc.org/v2.2/protocol/_DestructorSafeContainer/
ReverseRandomAccessIndex	A										<pre><code>struct ReverseRandomAccessIndex&lt;Base : RandomAccessIndexType&gt;</code></pre>A wrapper for a <code>RandomAccessIndexType</code> that reverses its\ndirection of traversal.	http://swiftdoc.org/v2.2/type/ReverseRandomAccessIndex/
ReverseRandomAccessIndex.base	A										The successor position in the underlying (un-reversed)\ncollection.\nIf <code>self</code> is <code>advance(c.reverse.startIndex, n)</code>, then:\n- <code>self.base</code> is <code>advance(c.endIndex, -n)</code>.\n- if <code>n</code> != <code>c.count</code>, then <code>c.reverse[self]</code> is \n  equivalent to <code>[self.base.predecessor()]</code>.\n    Declaration    \n    <code>var base: Base { get }</code>	http://swiftdoc.org/v2.2/type/ReverseRandomAccessIndex/#var-base_-base
base	R	ReverseRandomAccessIndex.base										
String.CharacterView.Index	A										<pre><code>struct String.CharacterView.Index</code></pre>A character position.	http://swiftdoc.org/v2.2/type/String.CharacterView.Index/
String.CharacterView.Index.predecessor	A										Returns the previous consecutive value before <code>self</code>.\n<strong>Requires:</strong> The previous value is representable.\n    Declaration    \n    <code>func predecessor() -&gt; String.CharacterView.Index</code>	http://swiftdoc.org/v2.2/type/String.CharacterView.Index/#func-predecessor
String.CharacterView.Index.samePositionIn	A										Returns the position in <code>utf8</code> that corresponds exactly\nto <code>self</code>.\n<strong>Requires:</strong> <code>self</code> is an element of <code>String(utf8).indices</code>.\n    Declaration    \n    <code>func samePositionIn(utf8: String.UTF8View) -&gt; String.UTF8View.Index</code>	http://swiftdoc.org/v2.2/type/String.CharacterView.Index/#func-samepositionin_-string-utf8view
String.CharacterView.Index.samePositionIn	A										Returns the position in <code>utf16</code> that corresponds exactly\nto <code>self</code>.\n<strong>Requires:</strong> <code>self</code> is an element of <code>String(utf16).indices</code>.\n    Declaration    \n    <code>func samePositionIn(utf16: String.UTF16View) -&gt; String.UTF16View.Index</code>	http://swiftdoc.org/v2.2/type/String.CharacterView.Index/#func-samepositionin_-string-utf16view
String.CharacterView.Index.samePositionIn	A										Returns the position in <code>unicodeScalars</code> that corresponds exactly\nto <code>self</code>.\n<strong>Requires:</strong> <code>self</code> is an element of <code>String(unicodeScalars).indices</code>.\n    Declaration    \n    <code>func samePositionIn(unicodeScalars: String.UnicodeScalarView) -&gt; String.UnicodeScalarView.Index</code>	http://swiftdoc.org/v2.2/type/String.CharacterView.Index/#func-samepositionin_-string-unicodescalarview
String.CharacterView.Index.successor	A										Returns the next consecutive value after <code>self</code>.\n<strong>Requires:</strong> The next value is representable.\n    Declaration    \n    <code>func successor() -&gt; String.CharacterView.Index</code>	http://swiftdoc.org/v2.2/type/String.CharacterView.Index/#func-successor
Index	R	String.CharacterView.Index										
predecessor	R	String.CharacterView.Index.predecessor										
samePositionIn	R	String.CharacterView.Index.samePositionIn										
samePositionIn	R	String.CharacterView.Index.samePositionIn										
samePositionIn	R	String.CharacterView.Index.samePositionIn										
successor	R	String.CharacterView.Index.successor										
StrideTo	A										<pre><code>struct StrideTo&lt;Element : Strideable&gt;</code></pre>A <code>SequenceType</code> of values formed by striding over a half-open interval.	http://swiftdoc.org/v2.2/type/StrideTo/
StrideTo.generate	A										Returns a generator over the elements of this sequence.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; StrideToGenerator&lt;Element&gt;</code>	http://swiftdoc.org/v2.2/type/StrideTo/#func-generate
generate	R	StrideTo.generate										
StaticString	A										<pre><code>struct StaticString</code></pre>A simple string designed to represent text that is &quot;knowable at\ncompile-time&quot;.\nLogically speaking, each instance looks something like this:\n<pre><code> enum StaticString {\n    case ASCII(start: UnsafePointer&lt;UInt8&gt;, length: Int)\n    case UTF8(start: UnsafePointer&lt;UInt8&gt;, length: Int)\n    case Scalar(UnicodeScalar)\n }</code></pre>	http://swiftdoc.org/v2.2/type/StaticString/
StaticString.withUTF	A										Invoke <code>body</code> with a buffer containing the UTF-8 code units of\n<code>self</code>.\nThis method works regardless of what <code>self</code> stores.\n    Declaration    \n    <code>func withUTF8Buffer&lt;R&gt;(@noescape body: (UnsafeBufferPointer&lt;UInt8&gt;) -&gt; R) -&gt; R</code>	http://swiftdoc.org/v2.2/type/StaticString/#func-withutf8buffer_
StaticString.byteSize	A										If <code>self</code> stores a pointer to ASCII or UTF-8 code units, the\nlength in bytes of that data.\nIf <code>self</code> stores a single Unicode scalar value, the value of\n<code>byteSize</code> is unspecified.\n    Declaration    \n    <code>var byteSize: Int { get }</code>	http://swiftdoc.org/v2.2/type/StaticString/#var-bytesize_-int
StaticString.debugDescription	A										A textual representation of <code>self</code>, suitable for debugging.\n    Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/StaticString/#var-debugdescription_-string
StaticString.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/StaticString/#var-description_-string
StaticString.hasPointerRepresentation	A										<code>true</code> iff <code>self</code> stores a pointer to ASCII or UTF-8 code units.\n    Declaration    \n    <code>var hasPointerRepresentation: Bool { get }</code>	http://swiftdoc.org/v2.2/type/StaticString/#var-haspointerrepresentation_-bool
StaticString.isASCII	A										<code>true</code> if <code>self</code> stores a pointer to ASCII code units.\nIf <code>self</code> stores a single Unicode scalar value, the value of\n<code>isASCII</code> is unspecified.\n    Declaration    \n    <code>var isASCII: Bool { get }</code>	http://swiftdoc.org/v2.2/type/StaticString/#var-isascii_-bool
StaticString.stringValue	A										Returns a <code>String</code> representing the same sequence of Unicode\nscalar values as <code>self</code> does.\n    Declaration    \n    <code>var stringValue: String { get }</code>	http://swiftdoc.org/v2.2/type/StaticString/#var-stringvalue_-string
StaticString.unicodeScalar	A										The stored Unicode scalar value.\n<strong>Requires:</strong> <code>self</code> stores a single Unicode scalar value.\n    Declaration    \n    <code>var unicodeScalar: UnicodeScalar { get }</code>	http://swiftdoc.org/v2.2/type/StaticString/#var-unicodescalar_-unicodescalar
StaticString.utf	A										A pointer to the beginning of UTF-8 code units.\n<strong>Requires:</strong> <code>self</code> stores a pointer to either ASCII or UTF-8 code\n  units.\n    Declaration    \n    <code>var utf8Start: UnsafePointer&lt;UInt8&gt; { get }</code>	http://swiftdoc.org/v2.2/type/StaticString/#var-utf8start_-unsafepointer-uint8
withUTF	R	StaticString.withUTF										
byteSize	R	StaticString.byteSize										
debugDescription	R	StaticString.debugDescription										
description	R	StaticString.description										
hasPointerRepresentation	R	StaticString.hasPointerRepresentation										
isASCII	R	StaticString.isASCII										
stringValue	R	StaticString.stringValue										
unicodeScalar	R	StaticString.unicodeScalar										
utf	R	StaticString.utf										
Int32	A										<pre><code>struct Int32</code></pre>A 32-bit signed integer value\ntype.	http://swiftdoc.org/v2.2/type/Int32/
Int32.addWithOverflow	A										Add <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func addWithOverflow(lhs: Int32, _ rhs: Int32) -&gt; (Int32, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Int32/#func-addwithoverflow__
Int32.divideWithOverflow	A										Divide <code>lhs</code> and <code>rhs</code>, returning\na result and a <code>Bool</code>\nthat is <code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func divideWithOverflow(lhs: Int32, _ rhs: Int32) -&gt; (Int32, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Int32/#func-dividewithoverflow__
Int32.multiplyWithOverflow	A										Multiply <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func multiplyWithOverflow(lhs: Int32, _ rhs: Int32) -&gt; (Int32, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Int32/#func-multiplywithoverflow__
Int32.remainderWithOverflow	A										Divide <code>lhs</code> and <code>rhs</code>, returning\nthe remainder and a <code>Bool</code>\nthat is <code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func remainderWithOverflow(lhs: Int32, _ rhs: Int32) -&gt; (Int32, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Int32/#func-remainderwithoverflow__
Int32.subtractWithOverflow	A										Subtract <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func subtractWithOverflow(lhs: Int32, _ rhs: Int32) -&gt; (Int32, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Int32/#func-subtractwithoverflow__
Int32.predecessor	A										Returns the previous consecutive value before <code>self</code>.\n<strong>Requires:</strong> The previous value is representable.\n    Declaration    \n    <code>func predecessor() -&gt; Int32</code>	http://swiftdoc.org/v2.2/type/Int32/#func-predecessor
Int32.successor	A										Returns the next consecutive value after <code>self</code>.\n<strong>Requires:</strong> The next value is representable.\n    Declaration    \n    <code>func successor() -&gt; Int32</code>	http://swiftdoc.org/v2.2/type/Int32/#func-successor
Int32.toIntMax	A										Represent this number using Swift's widest native signed\ninteger type.\n    Declaration    \n    <code>func toIntMax() -&gt; IntMax</code>	http://swiftdoc.org/v2.2/type/Int32/#func-tointmax
Int32.allZeros	A										The empty bitset of type Int32.\n    Declaration    \n    <code>static var allZeros: Int32 { get }</code>	http://swiftdoc.org/v2.2/type/Int32/#static-var-allzeros_-int32
Int32.max	A										Declaration    \n    <code>static var max: Int32 { get }</code>	http://swiftdoc.org/v2.2/type/Int32/#static-var-max_-int32
Int32.min	A										Declaration    \n    <code>static var min: Int32 { get }</code>	http://swiftdoc.org/v2.2/type/Int32/#static-var-min_-int32
Int32.allZeros	A										The empty bitset of type Int32.\n    Declaration    \n    <code>static var allZeros: Int32 { get }</code>	http://swiftdoc.org/v2.2/type/Int32/#static-var-allzeros_-int32
Int32.max	A										Declaration    \n    <code>static var max: Int32 { get }</code>	http://swiftdoc.org/v2.2/type/Int32/#static-var-max_-int32
Int32.min	A										Declaration    \n    <code>static var min: Int32 { get }</code>	http://swiftdoc.org/v2.2/type/Int32/#static-var-min_-int32
Int32.bigEndian	A										Returns the big-endian representation of the integer, changing the\nbyte order if necessary.\n    Declaration    \n    <code>var bigEndian: Int32 { get }</code>	http://swiftdoc.org/v2.2/type/Int32/#var-bigendian_-int32
Int32.byteSwapped	A										Returns the current integer with the byte order swapped.\n    Declaration    \n    <code>var byteSwapped: Int32 { get }</code>	http://swiftdoc.org/v2.2/type/Int32/#var-byteswapped_-int32
Int32.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/Int32/#var-description_-string
Int32.hashValue	A										The hash value.\n<strong>Axiom:</strong> <code>x == y</code> implies <code>x.hashValue == y.hashValue</code>.\n<strong>Note:</strong> The hash value is not guaranteed to be stable across\n  different invocations of the same program.  Do not persist the\n  hash value across program runs.\n    Declaration    \n    <code>var hashValue: Int { get }</code>	http://swiftdoc.org/v2.2/type/Int32/#var-hashvalue_-int
Int32.littleEndian	A										Returns the little-endian representation of the integer, changing the\nbyte order if necessary.\n    Declaration    \n    <code>var littleEndian: Int32 { get }</code>	http://swiftdoc.org/v2.2/type/Int32/#var-littleendian_-int32
addWithOverflow	R	Int32.addWithOverflow										
divideWithOverflow	R	Int32.divideWithOverflow										
multiplyWithOverflow	R	Int32.multiplyWithOverflow										
remainderWithOverflow	R	Int32.remainderWithOverflow										
subtractWithOverflow	R	Int32.subtractWithOverflow										
predecessor	R	Int32.predecessor										
successor	R	Int32.successor										
toIntMax	R	Int32.toIntMax										
allZeros	R	Int32.allZeros										
max	R	Int32.max										
min	R	Int32.min										
allZeros	R	Int32.allZeros										
max	R	Int32.max										
min	R	Int32.min										
bigEndian	R	Int32.bigEndian										
byteSwapped	R	Int32.byteSwapped										
description	R	Int32.description										
hashValue	R	Int32.hashValue										
littleEndian	R	Int32.littleEndian										
Slice	A										<pre><code>struct Slice&lt;Base : Indexable&gt;</code></pre>A view into a sub-sequence of elements of another collection.\nA <code>Slice</code> instance stores the base collection, the start and end indices of\nthe view.  It does not copy the elements from the collection into separate\nstorage. Thus, creating a slice has <code>O(1)</code> complexity.\nA <code>Slice</code> instance inherits the value or reference semantics of the base\ncollection.  That is, if a <code>Slice</code> instance is wrapped around a mutable\ncollection that has value semantics (for example, <code>Array</code>), mutating the\noriginal collection would not affect the copy stored inside of the slice.\nAn element of a slice is located under the same index in the slice and in\nthe base collection, as long as neither the collection or the slice were\nmutated.  Thus, indices of a slice can be used interchangeably with indices\nof the base collection.\n<strong>Warning:</strong> Long-term storage of <code>Slice</code> instances is discouraged.\n  Because a <code>Slice</code> presents a view onto the storage of some larger\n  collection even after the original collection goes out of scope, storing\n  the slice may prolong the lifetime of elements that are no longer\n  accessible, which can manifest as apparent memory and object leakage.  To\n  prevent this effect, use slices only for transient computation.	http://swiftdoc.org/v2.2/type/Slice/
Slice.endIndex	A										Declaration    \n    <code>var endIndex: Base.Index { get }</code>	http://swiftdoc.org/v2.2/type/Slice/#var-endindex_-base-index
Slice.startIndex	A										Declaration    \n    <code>var startIndex: Base.Index { get }</code>	http://swiftdoc.org/v2.2/type/Slice/#var-startindex_-base-index
endIndex	R	Slice.endIndex										
startIndex	R	Slice.startIndex										
StrideThrough	A										<pre><code>struct StrideThrough&lt;Element : Strideable&gt;</code></pre>A <code>SequenceType</code> of values formed by striding over a closed interval.	http://swiftdoc.org/v2.2/type/StrideThrough/
StrideThrough.generate	A										Returns a generator over the elements of this sequence.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; StrideThroughGenerator&lt;Element&gt;</code>	http://swiftdoc.org/v2.2/type/StrideThrough/#func-generate
generate	R	StrideThrough.generate										
AnyBidirectionalIndex	A										<pre><code>struct AnyBidirectionalIndex</code></pre>A wrapper over an underlying <code>BidirectionalIndexType</code> that hides\nthe specific underlying type.\n<strong>See Also:</strong> <code>AnyBidirectionalCollection</code>	http://swiftdoc.org/v2.2/type/AnyBidirectionalIndex/
AnyBidirectionalIndex.predecessor	A										Returns the previous consecutive value in a discrete sequence of\n<code>AnyBidirectionalIndex</code> values.\n<strong>Requires:</strong> <code>self</code> has a well-defined predecessor.\n    Declaration    \n    <code>func predecessor() -&gt; AnyBidirectionalIndex</code>	http://swiftdoc.org/v2.2/type/AnyBidirectionalIndex/#func-predecessor
AnyBidirectionalIndex.successor	A										Returns the next consecutive value in a discrete sequence of\n<code>AnyBidirectionalIndex</code> values.\n<strong>Requires:</strong> <code>self</code> has a well-defined successor.\n    Declaration    \n    <code>func successor() -&gt; AnyBidirectionalIndex</code>	http://swiftdoc.org/v2.2/type/AnyBidirectionalIndex/#func-successor
predecessor	R	AnyBidirectionalIndex.predecessor										
successor	R	AnyBidirectionalIndex.successor										
LazyMapGenerator	A										<pre><code>struct LazyMapGenerator&lt;Base : GeneratorType, Element&gt;</code></pre>The <code>GeneratorType</code> used by <code>MapSequence</code> and <code>MapCollection</code>.\nProduces each element by passing the output of the <code>Base</code>\n<code>GeneratorType</code> through a transform function returning <code>Element</code>.	http://swiftdoc.org/v2.2/type/LazyMapGenerator/
LazyMapGenerator.next	A										Advance to the next element and return it, or <code>nil</code> if no next\nelement exists.\n<strong>Requires:</strong> <code>next()</code> has not been applied to a copy of <code>self</code>\n  since the copy was made, and no preceding call to <code>self.next()</code>\n  has returned <code>nil</code>.\n    Declaration    \n    <code>mutating func next() -&gt; Element?</code>	http://swiftdoc.org/v2.2/type/LazyMapGenerator/#func-next
LazyMapGenerator.base	A										Declaration    \n    <code>var base: Base { get }</code>	http://swiftdoc.org/v2.2/type/LazyMapGenerator/#var-base_-base
next	R	LazyMapGenerator.next										
base	R	LazyMapGenerator.base										
Operator: +=	A										<pre><code>infix operator += {\n    associativity right\n    precedence 90\n    assignment\n}</code></pre>	http://swiftdoc.org/v2.2/operator/plseq/
LazySequence	A										<pre><code>struct LazySequence&lt;Base : SequenceType&gt;</code></pre>A sequence containing the same elements as a <code>Base</code> sequence, but\non which some operations such as <code>map</code> and <code>filter</code> are\nimplemented lazily.\n<strong>See Also:</strong> <code>LazySequenceType</code>	http://swiftdoc.org/v2.2/type/LazySequence/
LazySequence.elements	A										The <code>Base</code> (presumably non-lazy) sequence from which <code>self</code> was created.\n    Declaration    \n    <code>var elements: Base { get }</code>	http://swiftdoc.org/v2.2/type/LazySequence/#var-elements_-base
elements	R	LazySequence.elements										
UnicodeScalar	A										<pre><code>struct UnicodeScalar</code></pre>A Unicode scalar value.	http://swiftdoc.org/v2.2/type/UnicodeScalar/
UnicodeScalar.escape	A										Returns a String representation of <code>self</code> .\n<strong><code>forceASCII</code>:</strong>  If <code>true</code>, forces most values into a numeric\n  representation.\n    Declaration    \n    <code>func escape(asASCII forceASCII: Bool) -&gt; String</code>	http://swiftdoc.org/v2.2/type/UnicodeScalar/#func-escape-asascii_
UnicodeScalar.isASCII	A										Returns <code>true</code> if this is an ASCII character (code point 0 to 127\ninclusive).\n    Declaration    \n    <code>func isASCII() -&gt; Bool</code>	http://swiftdoc.org/v2.2/type/UnicodeScalar/#func-isascii
UnicodeScalar.writeTo	A										Write a textual representation of <code>self</code> into <code>target</code>.\n    Declaration    \n    <code>func writeTo&lt;Target : OutputStreamType&gt;(inout target: Target)</code>	http://swiftdoc.org/v2.2/type/UnicodeScalar/#func-writeto-inout_
UnicodeScalar.debugDescription	A										A textual representation of <code>self</code>, suitable for debugging.\n    Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/UnicodeScalar/#var-debugdescription_-string
UnicodeScalar.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/UnicodeScalar/#var-description_-string
UnicodeScalar.hashValue	A										The hash value.\n<strong>Axiom:</strong> <code>x == y</code> implies <code>x.hashValue == y.hashValue</code>.\n<strong>Note:</strong> The hash value is not guaranteed to be stable across\n  different invocations of the same program.  Do not persist the\n  hash value across program runs.\n    Declaration    \n    <code>var hashValue: Int { get }</code>	http://swiftdoc.org/v2.2/type/UnicodeScalar/#var-hashvalue_-int
UnicodeScalar.value	A										A numeric representation of <code>self</code>.\n    Declaration    \n    <code>var value: UInt32 { get }</code>	http://swiftdoc.org/v2.2/type/UnicodeScalar/#var-value_-uint32
escape	R	UnicodeScalar.escape										
isASCII	R	UnicodeScalar.isASCII										
writeTo	R	UnicodeScalar.writeTo										
debugDescription	R	UnicodeScalar.debugDescription										
description	R	UnicodeScalar.description										
hashValue	R	UnicodeScalar.hashValue										
value	R	UnicodeScalar.value										
String.UTF16View.Index	A										<pre><code>struct String.UTF16View.Index</code></pre>A position in a string's collection of UTF-16 code units.	http://swiftdoc.org/v2.2/type/String.UTF16View.Index/
String.UTF16View.Index.predecessor	A										Declaration    \n    <code>func predecessor() -&gt; String.UTF16View.Index</code>	http://swiftdoc.org/v2.2/type/String.UTF16View.Index/#func-predecessor
String.UTF16View.Index.samePositionIn	A										Returns the position in <code>characters</code> that corresponds exactly\nto <code>self</code>, or if no such position exists, <code>nil</code>.\n<strong>Requires:</strong> <code>self</code> is an element of <code>characters.utf16.indices</code>.\n    Declaration    \n    <code>func samePositionIn(characters: String) -&gt; Index?</code>	http://swiftdoc.org/v2.2/type/String.UTF16View.Index/#func-samepositionin_-string
String.UTF16View.Index.samePositionIn	A										Returns the position in <code>utf8</code> that corresponds exactly\nto <code>self</code>, or if no such position exists, <code>nil</code>.\n<strong>Requires:</strong> <code>self</code> is an element of\n  <code>String(utf8)!.utf16.indices</code>.\n    Declaration    \n    <code>func samePositionIn(utf8: String.UTF8View) -&gt; String.UTF8View.Index?</code>	http://swiftdoc.org/v2.2/type/String.UTF16View.Index/#func-samepositionin_-string-utf8view
String.UTF16View.Index.samePositionIn	A										Returns the position in <code>unicodeScalars</code> that corresponds exactly\nto <code>self</code>, or if no such position exists, <code>nil</code>.\n<strong>Requires:</strong> <code>self</code> is an element of\n  <code>String(unicodeScalars).utf16.indices</code>.\n    Declaration    \n    <code>func samePositionIn(unicodeScalars: String.UnicodeScalarView) -&gt; UnicodeScalarIndex?</code>	http://swiftdoc.org/v2.2/type/String.UTF16View.Index/#func-samepositionin_-string-unicodescalarview
String.UTF16View.Index.successor	A										Declaration    \n    <code>func successor() -&gt; String.UTF16View.Index</code>	http://swiftdoc.org/v2.2/type/String.UTF16View.Index/#func-successor
Index	R	String.UTF16View.Index										
predecessor	R	String.UTF16View.Index.predecessor										
samePositionIn	R	String.UTF16View.Index.samePositionIn										
samePositionIn	R	String.UTF16View.Index.samePositionIn										
samePositionIn	R	String.UTF16View.Index.samePositionIn										
successor	R	String.UTF16View.Index.successor										
SignedIntegerType	A										<pre><code>protocol SignedIntegerType</code></pre>A set of common requirements for Swift's signed integer types.	http://swiftdoc.org/v2.2/protocol/SignedIntegerType/
ReverseRandomAccessCollection	A										<pre><code>struct ReverseRandomAccessCollection&lt;Base : CollectionType where Base.Index : RandomAccessIndexType&gt;</code></pre>A Collection that presents the elements of its <code>Base</code> collection\nin reverse order.\n<strong>Note:</strong> This type is the result of <code>x.reverse()</code> where <code>x</code> is a\n  collection having random access indices.\n<strong>See Also:</strong> <code>ReverseCollection</code>	http://swiftdoc.org/v2.2/type/ReverseRandomAccessCollection/
String	A										<pre><code>struct String</code></pre>An arbitrary Unicode string value.\nUnicode-Correct\nSwift strings are designed to be Unicode-correct.  In particular,\nthe APIs make it easy to write code that works correctly, and does\nnot surprise end-users, regardless of where you venture in the\nUnicode character space.  For example, the <code>==</code> operator checks\nfor Unicode canonical\nequivalence,\nso two different representations of the same string will always\ncompare equal.\nLocale-Insensitive\nThe fundamental operations on Swift strings are not sensitive to\nlocale settings.  That's because, for example, the validity of a\n<code>Dictionary&lt;String, T&gt;</code> in a running program depends on a given\nstring comparison having a single, stable result.  Therefore,\nSwift always uses the default,\nun-tailored Unicode\nalgorithms for basic string operations.\nImporting <code>Foundation</code> endows swift strings with the full power of\nthe <code>NSString</code> API, which allows you to choose more complex\nlocale-sensitive operations explicitly.\nValue Semantics\nEach string variable, <code>let</code> binding, or stored property has an\nindependent value, so mutations to the string are not observable\nthrough its copies:\n<pre><code>var a = &quot;foo&quot;\nvar b = a\nb.appendContentsOf(&quot;bar&quot;)\nprint(&quot;a=\(a), b=\(b)&quot;)     // a=foo, b=foobar</code></pre>\nStrings use Copy-on-Write so that their data is only copied\nlazily, upon mutation, when more than one string instance is using\nthe same buffer.  Therefore, the first in any sequence of mutating\noperations may cost <code>O(N)</code> time and space, where <code>N</code> is the length\nof the string's (unspecified) underlying representation.\nViews\n<code>String</code> is not itself a collection of anything.  Instead, it has\nproperties that present the string's contents as meaningful\ncollections:\n  <strong><code>characters</code>:</strong> a collection of <code>Character</code> (extended grapheme\n    cluster)\n    elements, a unit of text that is meaningful to most humans.\n  <strong><code>unicodeScalars</code>:</strong> a collection of <code>UnicodeScalar</code> (Unicode\n    scalar\n    values)\n    the 21-bit codes that are the basic unit of Unicode.  These\n    values are equivalent to UTF-32 code units.\n  <strong><code>utf16</code>:</strong> a collection of <code>UTF16.CodeUnit</code>, the 16-bit\n    elements of the string's UTF-16 encoding.\n  <strong><code>utf8</code>:</strong> a collection of <code>UTF8.CodeUnit</code>, the 8-bit\n    elements of the string's UTF-8 encoding.\nGrowth and Capacity\nWhen a string's contiguous storage fills up, new storage must be\nallocated and characters must be moved to the new storage.\n<code>String</code> uses an exponential growth strategy that makes <code>append</code> a\nconstant time operation when amortized over many invocations.\nObjective-C Bridge\n<code>String</code> is bridged to Objective-C as <code>NSString</code>, and a <code>String</code>\nthat originated in Objective-C may store its characters in an\n<code>NSString</code>.  Since any arbitrary subclass of <code>NSString</code> can\nbecome a <code>String</code>, there are no guarantees about representation or\nefficiency in this case.  Since <code>NSString</code> is immutable, it is\njust as though the storage was shared by some copy: the first in\nany sequence of mutating operations causes elements to be copied\ninto unique, contiguous storage which may cost <code>O(N)</code> time and\nspace, where <code>N</code> is the length of the string representation (or\nmore, if the underlying <code>NSString</code> has unusual performance\ncharacteristics).	http://swiftdoc.org/v2.2/type/String/
String.availableStringEncodings	A										[Foundation] Returns an Array of the encodings string objects support\nin the application’s environment.\n \n    Declaration    \n    <code>static func availableStringEncodings() -&gt; [NSStringEncoding]</code>	http://swiftdoc.org/v2.2/type/String/#func-availablestringencodings
String.defaultCStringEncoding	A										[Foundation] Returns the C-string encoding assumed for any method accepting\na C string as an argument.\n    Declaration    \n    <code>static func defaultCStringEncoding() -&gt; NSStringEncoding</code>	http://swiftdoc.org/v2.2/type/String/#func-defaultcstringencoding
String.fromCString	A										Creates a new <code>String</code> by copying the nul-terminated UTF-8 data\nreferenced by a <code>CString</code>.\nReturns <code>nil</code> if the <code>CString</code> is <code>NULL</code> or if it contains ill-formed\nUTF-8 code unit sequences.\n    Declaration    \n    <code>static func fromCString(cs: UnsafePointer&lt;CChar&gt;) -&gt; String?</code>	http://swiftdoc.org/v2.2/type/String/#func-fromcstring_
String.fromCStringRepairingIllFormedUTF	A										Creates a new <code>String</code> by copying the nul-terminated UTF-8 data\nreferenced by a <code>CString</code>.\nReturns <code>nil</code> if the <code>CString</code> is <code>NULL</code>.  If <code>CString</code> contains\nill-formed UTF-8 code unit sequences, replaces them with replacement\ncharacters (U+FFFD).\n    Declaration    \n    <code>static func fromCStringRepairingIllFormedUTF8(cs: UnsafePointer&lt;CChar&gt;) -&gt; (String?, hadError: Bool)</code>	http://swiftdoc.org/v2.2/type/String/#func-fromcstringrepairingillformedutf8_
String.localizedNameOfStringEncoding	A										Returns a human-readable string giving the name of a given encoding.\n    Declaration    \n    <code>static func localizedNameOfStringEncoding(encoding: NSStringEncoding) -&gt; String</code>	http://swiftdoc.org/v2.2/type/String/#func-localizednameofstringencoding_
String.localizedStringWithFormat	A										[Foundation] Returns a string created by using a given format string as a\ntemplate into which the remaining argument values are substituted\naccording to the user's default locale.\n    Declaration    \n    <code>static func localizedStringWithFormat(format: String, _ arguments: CVarArgType...) -&gt; String</code>	http://swiftdoc.org/v2.2/type/String/#func-localizedstringwithformat__
String.append	A										Declaration    \n    <code>mutating func append(c: Character)</code>	http://swiftdoc.org/v2.2/type/String/#func-append_-character
String.append	A										Append <code>x</code> to <code>self</code>.\n<strong>Complexity:</strong> Amortized O(1).\n    Declaration    \n    <code>mutating func append(x: UnicodeScalar)</code>	http://swiftdoc.org/v2.2/type/String/#func-append_-unicodescalar
String.appendContentsOf	A										Append the elements of <code>other</code> to <code>self</code>.\n    Declaration    \n    <code>mutating func appendContentsOf(other: String)</code>	http://swiftdoc.org/v2.2/type/String/#func-appendcontentsof_-string
String.appendContentsOf	A										Declaration    \n    <code>mutating func appendContentsOf&lt;S : SequenceType where S.Generator.Element == Character&gt;(newElements: S)</code>	http://swiftdoc.org/v2.2/type/String/#func-appendcontentsof-s_-sequencetype-where-s-generator-element-character_-s
String.cStringUsingEncoding	A										[Foundation] Returns a representation of the <code>String</code> as a C string\nusing a given encoding.\n    Declaration    \n    <code>func cStringUsingEncoding(encoding: NSStringEncoding) -&gt; [CChar]?</code>	http://swiftdoc.org/v2.2/type/String/#func-cstringusingencoding_
String.canBeConvertedToEncoding	A										[Foundation] Returns a Boolean value that indicates whether the\n<code>String</code> can be converted to a given encoding without loss of\ninformation.\n    Declaration    \n    <code>func canBeConvertedToEncoding(encoding: NSStringEncoding) -&gt; Bool</code>	http://swiftdoc.org/v2.2/type/String/#func-canbeconvertedtoencoding_
String.capitalizedStringWithLocale	A										[Foundation] Returns a capitalized representation of the <code>String</code>\nusing the specified locale.\n    Declaration    \n    <code>func capitalizedStringWithLocale(locale: NSLocale?) -&gt; String</code>	http://swiftdoc.org/v2.2/type/String/#func-capitalizedstringwithlocale_
String.caseInsensitiveCompare	A										[Foundation] Returns the result of invoking <code>compare:options:</code> with\n<code>NSCaseInsensitiveSearch</code> as the only option.\n    Declaration    \n    <code>func caseInsensitiveCompare(aString: String) -&gt; NSComparisonResult</code>	http://swiftdoc.org/v2.2/type/String/#func-caseinsensitivecompare_
String.commonPrefixWithString	A										[Foundation] Returns a string containing characters the <code>String</code> and a\ngiven string have in common, starting from the beginning of each\nup to the first characters that aren’t equivalent.\n \n    Declaration    \n    <code>func commonPrefixWithString(aString: String, options: NSStringCompareOptions) -&gt; String</code>	http://swiftdoc.org/v2.2/type/String/#func-commonprefixwithstring_options_
String.compare	A										[Foundation] Compares the string using the specified options and\nreturns the lexical ordering for the range.\n    Declaration    \n    <code>func compare(aString: String, options mask: NSStringCompareOptions = default, range: Range&lt;Index&gt;? = default, locale: NSLocale? = default) -&gt; NSComparisonResult</code>	http://swiftdoc.org/v2.2/type/String/#func-compare_options_range_locale_
String.completePathIntoString	A										[Foundation] Interprets the <code>String</code> as a path in the file system and\nattempts to perform filename completion, returning a numeric\nvalue that indicates whether a match was possible, and by\nreference the longest path that matches the <code>String</code>.\nReturns the actual number of matching paths.\n    Declaration    \n    <code>func completePathIntoString(outputName: UnsafeMutablePointer&lt;String&gt; = default, caseSensitive: Bool, matchesIntoArray: UnsafeMutablePointer&lt;[String]&gt; = default, filterTypes: [String]? = default) -&gt; Int</code>	http://swiftdoc.org/v2.2/type/String/#func-completepathintostring_casesensitive_matchesintoarray_filtertypes_
String.componentsSeparatedByCharactersInSet	A										[Foundation] Returns an array containing substrings from the <code>String</code>\nthat have been divided by characters in a given set.\n    Declaration    \n    <code>func componentsSeparatedByCharactersInSet(separator: NSCharacterSet) -&gt; [String]</code>	http://swiftdoc.org/v2.2/type/String/#func-componentsseparatedbycharactersinset_
String.componentsSeparatedByString	A										[Foundation] Returns an array containing substrings from the <code>String</code>\nthat have been divided by a given separator.\n    Declaration    \n    <code>func componentsSeparatedByString(separator: String) -&gt; [String]</code>	http://swiftdoc.org/v2.2/type/String/#func-componentsseparatedbystring_
String.containsString	A										[Foundation] Returns <code>true</code> iff <code>other</code> is non-empty and contained within\n<code>self</code> by case-sensitive, non-literal search.\nEquivalent to <code>self.rangeOfString(other) != nil</code>\n    Declaration    \n    <code>func containsString(other: String) -&gt; Bool</code>	http://swiftdoc.org/v2.2/type/String/#func-containsstring_
String.dataUsingEncoding	A										[Foundation] Returns an <code>NSData</code> object containing a representation of\nthe <code>String</code> encoded using a given encoding.\n    Declaration    \n    <code>func dataUsingEncoding(encoding: NSStringEncoding, allowLossyConversion: Bool = default) -&gt; NSData?</code>	http://swiftdoc.org/v2.2/type/String/#func-datausingencoding_allowlossyconversion_
String.enumerateLines	A										[Foundation] Enumerates all the lines in a string.\n    Declaration    \n    <code>func enumerateLines(body: (line: String, inout stop: Bool) -&gt; ())</code>	http://swiftdoc.org/v2.2/type/String/#func-enumeratelines_
String.enumerateLinguisticTagsInRange	A										[Foundation] Performs linguistic analysis on the specified string by\nenumerating the specific range of the string, providing the\nBlock with the located tags.\n    Declaration    \n    <code>func enumerateLinguisticTagsInRange(range: Range&lt;Index&gt;, scheme tagScheme: String, options opts: NSLinguisticTaggerOptions, orthography: NSOrthography?, _ body: (String, Range&lt;Index&gt;, Range&lt;Index&gt;, inout Bool) -&gt; ())</code>	http://swiftdoc.org/v2.2/type/String/#func-enumeratelinguistictagsinrange_scheme_options_orthography__
String.enumerateSubstringsInRange	A										[Foundation] Enumerates the substrings of the specified type in the\nspecified range of the string.\n    Declaration    \n    <code>func enumerateSubstringsInRange(range: Range&lt;Index&gt;, options opts: NSStringEnumerationOptions, _ body: (substring: String?, substringRange: Range&lt;Index&gt;, enclosingRange: Range&lt;Index&gt;, inout Bool) -&gt; ())</code>	http://swiftdoc.org/v2.2/type/String/#func-enumeratesubstringsinrange_options_-body_-substring_-string-substringrange_-range-index_
String.getBytes	A										[Foundation] Writes the given <code>range</code> of characters into <code>buffer</code> in a given\n<code>encoding</code>, without any allocations.  Does not NULL-terminate.\n<strong><code>buffer</code>:</strong>  A buffer into which to store the bytes from\n  the receiver. The returned bytes are not NUL-terminated.\n<strong><code>maxBufferCount</code>:</strong>  The maximum number of bytes to write\n  to buffer.\n<strong><code>usedBufferCount</code>:</strong>  The number of bytes used from\n  buffer. Pass <code>nil</code> if you do not need this value.\n<strong><code>encoding</code>:</strong>  The encoding to use for the returned bytes.\n<strong><code>options</code>:</strong>  A mask to specify options to use for\n  converting the receiver’s contents to <code>encoding</code> (if conversion\n  is necessary).\n<strong><code>range</code>:</strong>  The range of characters in the receiver to get.\n<strong><code>leftover</code>:</strong>  The remaining range. Pass <code>nil</code> If you do\n  not need this value.\n<strong>Returns:</strong> <code>true</code> iff some characters were converted.\n<strong>Note:</strong> Conversion stops when the buffer fills or when the\n  conversion isn't possible due to the chosen encoding.\n<strong>Note:</strong> will get a maximum of <code>min(buffer.count, maxLength)</code> bytes.\n    Declaration    \n    <code>func getBytes(inout buffer: [UInt8], maxLength maxBufferCount: Int, usedLength usedBufferCount: UnsafeMutablePointer&lt;Int&gt;, encoding: NSStringEncoding, options: NSStringEncodingConversionOptions, range: Range&lt;Index&gt;, remainingRange leftover: UnsafeMutablePointer&lt;Range&lt;Index&gt;&gt;) -&gt; Bool</code>	http://swiftdoc.org/v2.2/type/String/#func-getbytes-inout_maxlength_usedlength_encoding_options_range_remainingrange_
String.getCString	A										[Foundation] Converts the <code>String</code>’s content to a given encoding and\nstores them in a buffer.\n<strong>Note:</strong> will store a maximum of <code>min(buffer.count, maxLength)</code> bytes.\n    Declaration    \n    <code>func getCString(inout buffer: [CChar], maxLength: Int, encoding: NSStringEncoding) -&gt; Bool</code>	http://swiftdoc.org/v2.2/type/String/#func-getcstring-inout_maxlength_encoding_
String.getLineStart	A										[Foundation] Returns by reference the beginning of the first line and\nthe end of the last line touched by the given range.\n    Declaration    \n    <code>func getLineStart(start: UnsafeMutablePointer&lt;Index&gt;, end: UnsafeMutablePointer&lt;Index&gt;, contentsEnd: UnsafeMutablePointer&lt;Index&gt;, forRange: Range&lt;Index&gt;)</code>	http://swiftdoc.org/v2.2/type/String/#func-getlinestart_end_contentsend_forrange_
String.getParagraphStart	A										[Foundation] Returns by reference the beginning of the first paragraph\nand the end of the last paragraph touched by the given range.\n    Declaration    \n    <code>func getParagraphStart(start: UnsafeMutablePointer&lt;Index&gt;, end: UnsafeMutablePointer&lt;Index&gt;, contentsEnd: UnsafeMutablePointer&lt;Index&gt;, forRange: Range&lt;Index&gt;)</code>	http://swiftdoc.org/v2.2/type/String/#func-getparagraphstart_end_contentsend_forrange_
String.hasPrefix	A										Returns <code>true</code> iff <code>self</code> begins with <code>prefix</code>.\n    Declaration    \n    <code>func hasPrefix(prefix: String) -&gt; Bool</code>	http://swiftdoc.org/v2.2/type/String/#func-hasprefix_
String.hasSuffix	A										Returns <code>true</code> iff <code>self</code> ends with <code>suffix</code>.\n    Declaration    \n    <code>func hasSuffix(suffix: String) -&gt; Bool</code>	http://swiftdoc.org/v2.2/type/String/#func-hassuffix_
String.insert	A										Insert <code>newElement</code> at index <code>i</code>.\nInvalidates all indices with respect to <code>self</code>.\n<strong>Complexity:</strong> O(<code>self.count</code>).\n    Declaration    \n    <code>mutating func insert(newElement: Character, atIndex i: Index)</code>	http://swiftdoc.org/v2.2/type/String/#func-insert_atindex_
String.insertContentsOf	A										Insert <code>newElements</code> at index <code>i</code>.\nInvalidates all indices with respect to <code>self</code>.\n<strong>Complexity:</strong> O(<code>self.count + newElements.count</code>).\n    Declaration    \n    <code>mutating func insertContentsOf&lt;S : CollectionType where S.Generator.Element == Character&gt;(newElements: S, at i: Index)</code>	http://swiftdoc.org/v2.2/type/String/#func-insertcontentsof_at_
String.lengthOfBytesUsingEncoding	A										[Foundation] Returns the number of bytes required to store the\n<code>String</code> in a given encoding.\n    Declaration    \n    <code>func lengthOfBytesUsingEncoding(encoding: NSStringEncoding) -&gt; Int</code>	http://swiftdoc.org/v2.2/type/String/#func-lengthofbytesusingencoding_
String.lineRangeForRange	A										[Foundation] Returns the range of characters representing the line or lines\ncontaining a given range.\n    Declaration    \n    <code>func lineRangeForRange(aRange: Range&lt;Index&gt;) -&gt; Range&lt;Index&gt;</code>	http://swiftdoc.org/v2.2/type/String/#func-linerangeforrange_
String.linguisticTagsInRange	A										[Foundation] Returns an array of linguistic tags for the specified\nrange and requested tags within the receiving string.\n    Declaration    \n    <code>func linguisticTagsInRange(range: Range&lt;Index&gt;, scheme tagScheme: String, options opts: NSLinguisticTaggerOptions = default, orthography: NSOrthography? = default, tokenRanges: UnsafeMutablePointer&lt;[Range&lt;Index&gt;]&gt; = default) -&gt; [String]</code>	http://swiftdoc.org/v2.2/type/String/#func-linguistictagsinrange_scheme_options_orthography_tokenranges_
String.localizedCaseInsensitiveCompare	A										[Foundation] Compares the string and a given string using a\ncase-insensitive, localized, comparison.\n    Declaration    \n    <code>func localizedCaseInsensitiveCompare(aString: String) -&gt; NSComparisonResult</code>	http://swiftdoc.org/v2.2/type/String/#func-localizedcaseinsensitivecompare_
String.localizedCaseInsensitiveContainsString	A										[Foundation] Returns <code>true</code> iff <code>other</code> is non-empty and contained within\n<code>self</code> by case-insensitive, non-literal search, taking into\naccount the current locale.\nLocale-independent case-insensitive operation, and other needs,\ncan be achieved by calling\n<code>rangeOfString(_:options:,range:_locale:_)</code>.\nEquivalent to\n<pre><code>self.rangeOfString(\n  other, options: .CaseInsensitiveSearch,\n  locale: NSLocale.currentLocale()) != nil</code></pre>\n    Declaration    \n    <code>func localizedCaseInsensitiveContainsString(other: String) -&gt; Bool</code>	http://swiftdoc.org/v2.2/type/String/#func-localizedcaseinsensitivecontainsstring_
String.localizedCompare	A										[Foundation] Compares the string and a given string using a localized\ncomparison.\n    Declaration    \n    <code>func localizedCompare(aString: String) -&gt; NSComparisonResult</code>	http://swiftdoc.org/v2.2/type/String/#func-localizedcompare_
String.localizedStandardCompare	A										[Foundation] Compares strings as sorted by the Finder.\n    Declaration    \n    <code>func localizedStandardCompare(string: String) -&gt; NSComparisonResult</code>	http://swiftdoc.org/v2.2/type/String/#func-localizedstandardcompare_
String.localizedStandardContainsString	A										[Foundation] Returns <code>true</code> if <code>self</code> contains <code>string</code>, taking the current locale\ninto account.\nThis is the most appropriate method for doing user-level string searches,\nsimilar to how searches are done generally in the system.  The search is\nlocale-aware, case and diacritic insensitive.  The exact list of search\noptions applied may change over time.\n    Declaration    \n    <code>func localizedStandardContainsString(string: String) -&gt; Bool</code>	http://swiftdoc.org/v2.2/type/String/#func-localizedstandardcontainsstring_
String.localizedStandardRangeOfString	A										[Foundation] Finds and returns the range of the first occurrence of a given string,\ntaking the current locale into account.  Returns <code>nil</code> if the string was\nnot found.\nThis is the most appropriate method for doing user-level string searches,\nsimilar to how searches are done generally in the system.  The search is\nlocale-aware, case and diacritic insensitive.  The exact list of search\noptions applied may change over time.\n    Declaration    \n    <code>func localizedStandardRangeOfString(string: String) -&gt; Range&lt;Index&gt;?</code>	http://swiftdoc.org/v2.2/type/String/#func-localizedstandardrangeofstring_
String.lowercaseStringWithLocale	A										[Foundation] Returns a version of the string with all letters\nconverted to lowercase, taking into account the specified\nlocale.\n    Declaration    \n    <code>func lowercaseStringWithLocale(locale: NSLocale?) -&gt; String</code>	http://swiftdoc.org/v2.2/type/String/#func-lowercasestringwithlocale_
String.maximumLengthOfBytesUsingEncoding	A										[Foundation] Returns the maximum number of bytes needed to store the\n<code>String</code> in a given encoding.\n    Declaration    \n    <code>func maximumLengthOfBytesUsingEncoding(encoding: NSStringEncoding) -&gt; Int</code>	http://swiftdoc.org/v2.2/type/String/#func-maximumlengthofbytesusingencoding_
String.paragraphRangeForRange	A										[Foundation] Returns the range of characters representing the\nparagraph or paragraphs containing a given range.\n    Declaration    \n    <code>func paragraphRangeForRange(aRange: Range&lt;Index&gt;) -&gt; Range&lt;Index&gt;</code>	http://swiftdoc.org/v2.2/type/String/#func-paragraphrangeforrange_
String.propertyList	A										[Foundation] Parses the <code>String</code> as a text representation of a\nproperty list, returning an NSString, NSData, NSArray, or\nNSDictionary object, according to the topmost element.\n    Declaration    \n    <code>func propertyList() -&gt; AnyObject</code>	http://swiftdoc.org/v2.2/type/String/#func-propertylist
String.propertyListFromStringsFileFormat	A										[Foundation] Returns a dictionary object initialized with the keys and\nvalues found in the <code>String</code>.\n    Declaration    \n    <code>func propertyListFromStringsFileFormat() -&gt; [String : String]</code>	http://swiftdoc.org/v2.2/type/String/#func-propertylistfromstringsfileformat
String.rangeOfCharacterFromSet	A										[Foundation] Finds and returns the range in the <code>String</code> of the first\ncharacter from a given character set found in a given range with\ngiven options.\n    Declaration    \n    <code>func rangeOfCharacterFromSet(aSet: NSCharacterSet, options mask: NSStringCompareOptions = default, range aRange: Range&lt;Index&gt;? = default) -&gt; Range&lt;Index&gt;?</code>	http://swiftdoc.org/v2.2/type/String/#func-rangeofcharacterfromset_options_range_
String.rangeOfComposedCharacterSequenceAtIndex	A										[Foundation] Returns the range in the <code>String</code> of the composed\ncharacter sequence located at a given index.\n    Declaration    \n    <code>func rangeOfComposedCharacterSequenceAtIndex(anIndex: Index) -&gt; Range&lt;Index&gt;</code>	http://swiftdoc.org/v2.2/type/String/#func-rangeofcomposedcharactersequenceatindex_
String.rangeOfComposedCharacterSequencesForRange	A										[Foundation] Returns the range in the string of the composed character\nsequences for a given range.\n    Declaration    \n    <code>func rangeOfComposedCharacterSequencesForRange(range: Range&lt;Index&gt;) -&gt; Range&lt;Index&gt;</code>	http://swiftdoc.org/v2.2/type/String/#func-rangeofcomposedcharactersequencesforrange_
String.rangeOfString	A										[Foundation] Finds and returns the range of the first occurrence of a\ngiven string within a given range of the <code>String</code>, subject to\ngiven options, using the specified locale, if any.\n    Declaration    \n    <code>func rangeOfString(aString: String, options mask: NSStringCompareOptions = default, range searchRange: Range&lt;Index&gt;? = default, locale: NSLocale? = default) -&gt; Range&lt;Index&gt;?</code>	http://swiftdoc.org/v2.2/type/String/#func-rangeofstring_options_range_locale_
String.removeAll	A										Remove all characters.\nInvalidates all indices with respect to <code>self</code>.\n<strong><code>keepCapacity</code>:</strong>  If <code>true</code>, prevents the release of\n  allocated storage, which can be a useful optimization\n  when <code>self</code> is going to be grown again.\n    Declaration    \n    <code>mutating func removeAll(keepCapacity keepCapacity: Bool = default)</code>	http://swiftdoc.org/v2.2/type/String/#func-removeall-keepcapacity_
String.removeAtIndex	A										Remove and return the element at index <code>i</code>.\nInvalidates all indices with respect to <code>self</code>.\n<strong>Complexity:</strong> O(<code>self.count</code>).\n    Declaration    \n    <code>mutating func removeAtIndex(i: Index) -&gt; Character</code>	http://swiftdoc.org/v2.2/type/String/#func-removeatindex_
String.removeRange	A										Remove the indicated <code>subRange</code> of characters.\nInvalidates all indices with respect to <code>self</code>.\n<strong>Complexity:</strong> O(<code>self.count</code>).\n    Declaration    \n    <code>mutating func removeRange(subRange: Range&lt;Index&gt;)</code>	http://swiftdoc.org/v2.2/type/String/#func-removerange_
String.replaceRange	A										Replace the given <code>subRange</code> of elements with <code>newElements</code>.\nInvalidates all indices with respect to <code>self</code>.\n<strong>Complexity:</strong> O(<code>subRange.count</code>) if <code>subRange.endIndex\n  == self.endIndex</code> and <code>newElements.isEmpty</code>, O(N) otherwise.\n    Declaration    \n    <code>mutating func replaceRange(subRange: Range&lt;Index&gt;, with newElements: String)</code>	http://swiftdoc.org/v2.2/type/String/#func-replacerange_-range-index-with_-string
String.replaceRange	A										Replace the given <code>subRange</code> of elements with <code>newElements</code>.\nInvalidates all indices with respect to <code>self</code>.\n<strong>Complexity:</strong> O(<code>subRange.count</code>) if <code>subRange.endIndex\n  == self.endIndex</code> and <code>newElements.isEmpty</code>, O(N) otherwise.\n    Declaration    \n    <code>mutating func replaceRange&lt;C : CollectionType where C.Generator.Element == Character&gt;(subRange: Range&lt;Index&gt;, with newElements: C)</code>	http://swiftdoc.org/v2.2/type/String/#func-replacerange-c_-collectiontype-where-c-generator-element-character_-range-index-with_-c
String.reserveCapacity	A										Declaration    \n    <code>mutating func reserveCapacity(n: Int)</code>	http://swiftdoc.org/v2.2/type/String/#func-reservecapacity_
String.stringByAddingPercentEncodingWithAllowedCharacters	A										[Foundation] Returns a new string made from the <code>String</code> by replacing\nall characters not in the specified set with percent encoded\ncharacters.\n    Declaration    \n    <code>func stringByAddingPercentEncodingWithAllowedCharacters(allowedCharacters: NSCharacterSet) -&gt; String?</code>	http://swiftdoc.org/v2.2/type/String/#func-stringbyaddingpercentencodingwithallowedcharacters_
String.stringByAddingPercentEscapesUsingEncoding	A										[Foundation] Returns a representation of the <code>String</code> using a given\nencoding to determine the percent escapes necessary to convert\nthe <code>String</code> into a legal URL string.\nDeprecated: Use stringByAddingPercentEncodingWithAllowedCharacters(_:) instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid..\n    Declaration    \n    <code>func stringByAddingPercentEscapesUsingEncoding(encoding: NSStringEncoding) -&gt; String?</code>	http://swiftdoc.org/v2.2/type/String/#func-stringbyaddingpercentescapesusingencoding_
String.stringByAppendingFormat	A										[Foundation] Returns a string made by appending to the <code>String</code> a\nstring constructed from a given format string and the following\narguments.\n    Declaration    \n    <code>func stringByAppendingFormat(format: String, _ arguments: CVarArgType...) -&gt; String</code>	http://swiftdoc.org/v2.2/type/String/#func-stringbyappendingformat__
String.stringByAppendingString	A										[Foundation] Returns a new string made by appending a given string to\nthe <code>String</code>.\n    Declaration    \n    <code>func stringByAppendingString(aString: String) -&gt; String</code>	http://swiftdoc.org/v2.2/type/String/#func-stringbyappendingstring_
String.stringByApplyingTransform	A										[Foundation] Perform string transliteration.\n    Declaration    \n    <code>func stringByApplyingTransform(transform: String, reverse: Bool) -&gt; String?</code>	http://swiftdoc.org/v2.2/type/String/#func-stringbyapplyingtransform_reverse_
String.stringByFoldingWithOptions	A										[Foundation] Returns a string with the given character folding options\napplied.\n    Declaration    \n    <code>func stringByFoldingWithOptions(options: NSStringCompareOptions, locale: NSLocale?) -&gt; String</code>	http://swiftdoc.org/v2.2/type/String/#func-stringbyfoldingwithoptions_locale_
String.stringByPaddingToLength	A										[Foundation] Returns a new string formed from the <code>String</code> by either\nremoving characters from the end, or by appending as many\noccurrences as necessary of a given pad string.\n    Declaration    \n    <code>func stringByPaddingToLength(newLength: Int, withString padString: String, startingAtIndex padIndex: Int) -&gt; String</code>	http://swiftdoc.org/v2.2/type/String/#func-stringbypaddingtolength_withstring_startingatindex_
String.stringByReplacingCharactersInRange	A										[Foundation] Returns a new string in which the characters in a\nspecified range of the <code>String</code> are replaced by a given string.\n    Declaration    \n    <code>func stringByReplacingCharactersInRange(range: Range&lt;Index&gt;, withString replacement: String) -&gt; String</code>	http://swiftdoc.org/v2.2/type/String/#func-stringbyreplacingcharactersinrange_withstring_
String.stringByReplacingOccurrencesOfString	A										[Foundation] Returns a new string in which all occurrences of a target\nstring in a specified range of the <code>String</code> are replaced by\nanother given string.\n    Declaration    \n    <code>func stringByReplacingOccurrencesOfString(target: String, withString replacement: String, options: NSStringCompareOptions = default, range searchRange: Range&lt;Index&gt;? = default) -&gt; String</code>	http://swiftdoc.org/v2.2/type/String/#func-stringbyreplacingoccurrencesofstring_withstring_options_range_
String.stringByReplacingPercentEscapesUsingEncoding	A										[Foundation] Returns a new string made by replacing in the <code>String</code>\nall percent escapes with the matching characters as determined\nby a given encoding.\nDeprecated: Use stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding..\n    Declaration    \n    <code>func stringByReplacingPercentEscapesUsingEncoding(encoding: NSStringEncoding) -&gt; String?</code>	http://swiftdoc.org/v2.2/type/String/#func-stringbyreplacingpercentescapesusingencoding_
String.stringByTrimmingCharactersInSet	A										[Foundation] Returns a new string made by removing from both ends of\nthe <code>String</code> characters contained in a given character set.\n    Declaration    \n    <code>func stringByTrimmingCharactersInSet(set: NSCharacterSet) -&gt; String</code>	http://swiftdoc.org/v2.2/type/String/#func-stringbytrimmingcharactersinset_
String.substringFromIndex	A										[Foundation] Returns a new string containing the characters of the\n<code>String</code> from the one at a given index to the end.\n    Declaration    \n    <code>func substringFromIndex(index: Index) -&gt; String</code>	http://swiftdoc.org/v2.2/type/String/#func-substringfromindex_
String.substringToIndex	A										[Foundation] Returns a new string containing the characters of the\n<code>String</code> up to, but not including, the one at a given index.\n    Declaration    \n    <code>func substringToIndex(index: Index) -&gt; String</code>	http://swiftdoc.org/v2.2/type/String/#func-substringtoindex_
String.substringWithRange	A										[Foundation] Returns a string object containing the characters of the\n<code>String</code> that lie within a given range.\n    Declaration    \n    <code>func substringWithRange(aRange: Range&lt;Index&gt;) -&gt; String</code>	http://swiftdoc.org/v2.2/type/String/#func-substringwithrange_
String.uppercaseStringWithLocale	A										[Foundation] Returns a version of the string with all letters\nconverted to uppercase, taking into account the specified\nlocale.\n    Declaration    \n    <code>func uppercaseStringWithLocale(locale: NSLocale?) -&gt; String</code>	http://swiftdoc.org/v2.2/type/String/#func-uppercasestringwithlocale_
String.withCString	A										Invoke <code>f</code> on the contents of this string, represented as\na nul-terminated array of char, ensuring that the array's\nlifetime extends through the execution of <code>f</code>.\n    Declaration    \n    <code>func withCString&lt;Result&gt;(@noescape f: UnsafePointer&lt;Int8&gt; throws -&gt; Result) rethrows -&gt; Result</code>	http://swiftdoc.org/v2.2/type/String/#func-withcstring_
String.withMutableCharacters	A										Efficiently mutate <code>self</code> by applying <code>body</code> to its <code>characters</code>.\n<strong>Warning:</strong> Do not rely on anything about <code>self</code> (the <code>String</code>\n  that is the target of this method) during the execution of\n  <code>body</code>: it may not appear to have its correct value.  Instead,\n  use only the <code>String.CharacterView</code> argument to <code>body</code>.\n    Declaration    \n    <code>mutating func withMutableCharacters&lt;R&gt;(body: (inout String.CharacterView) -&gt; R) -&gt; R</code>	http://swiftdoc.org/v2.2/type/String/#func-withmutablecharacters_
String.write	A										Append <code>other</code> to this stream.\n    Declaration    \n    <code>mutating func write(other: String)</code>	http://swiftdoc.org/v2.2/type/String/#func-write_
String.writeTo	A										Write a textual representation of <code>self</code> into <code>target</code>.\n    Declaration    \n    <code>func writeTo&lt;Target : OutputStreamType&gt;(inout target: Target)</code>	http://swiftdoc.org/v2.2/type/String/#func-writeto-inout_
String.writeToFile	A										[Foundation] Writes the contents of the <code>String</code> to a file at a given\npath using a given encoding.\n    Declaration    \n    <code>func writeToFile(path: String, atomically useAuxiliaryFile: Bool, encoding enc: NSStringEncoding) throws</code>	http://swiftdoc.org/v2.2/type/String/#func-writetofile_atomically_encoding_
String.writeToURL	A										[Foundation] Writes the contents of the <code>String</code> to the URL specified\nby url using the specified encoding.\n    Declaration    \n    <code>func writeToURL(url: NSURL, atomically useAuxiliaryFile: Bool, encoding enc: NSStringEncoding) throws</code>	http://swiftdoc.org/v2.2/type/String/#func-writetourl_atomically_encoding_
String.capitalizedString	A										[Foundation] Produce a string with the first character from each word changed\nto the corresponding uppercase value.\n    Declaration    \n    <code>var capitalizedString: String { get }</code>	http://swiftdoc.org/v2.2/type/String/#var-capitalizedstring_-string
String.characters	A										A collection of <code>Characters</code> representing the <code>String</code>'s\nextended grapheme\nclusters.\n    Declaration    \n    <code>var characters: String.CharacterView { get }</code>	http://swiftdoc.org/v2.2/type/String/#var-characters_-string-characterview
String.debugDescription	A										A textual representation of <code>self</code>, suitable for debugging.\n    Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/String/#var-debugdescription_-string
String.decomposedStringWithCanonicalMapping	A										[Foundation] Returns a string made by normalizing the <code>String</code>’s\ncontents using Form D.\n    Declaration    \n    <code>var decomposedStringWithCanonicalMapping: String { get }</code>	http://swiftdoc.org/v2.2/type/String/#var-decomposedstringwithcanonicalmapping_-string
String.decomposedStringWithCompatibilityMapping	A										[Foundation] Returns a string made by normalizing the <code>String</code>’s\ncontents using Form KD.\n    Declaration    \n    <code>var decomposedStringWithCompatibilityMapping: String { get }</code>	http://swiftdoc.org/v2.2/type/String/#var-decomposedstringwithcompatibilitymapping_-string
String.endIndex	A										The &quot;past the end&quot; position in <code>self.characters</code>.\n<code>endIndex</code> is not a valid argument to <code>subscript</code>, and is always\nreachable from <code>startIndex</code> by zero or more applications of\n<code>successor()</code>.\n    Declaration    \n    <code>var endIndex: Index { get }</code>	http://swiftdoc.org/v2.2/type/String/#var-endindex_-index
String.fastestEncoding	A										[Foundation] Returns the fastest encoding to which the <code>String</code> may be\nconverted without loss of information.\n    Declaration    \n    <code>var fastestEncoding: NSStringEncoding { get }</code>	http://swiftdoc.org/v2.2/type/String/#var-fastestencoding_-nsstringencoding
String.hash	A										[Foundation] An unsigned integer that can be used as a hash table address.\n    Declaration    \n    <code>var hash: Int { get }</code>	http://swiftdoc.org/v2.2/type/String/#var-hash_-int
String.hashValue	A										The hash value.\n<strong>Axiom:</strong> <code>x == y</code> implies <code>x.hashValue == y.hashValue</code>.\n<strong>Note:</strong> The hash value is not guaranteed to be stable across\n  different invocations of the same program.  Do not persist the\n  hash value across program runs.\n    Declaration    \n    <code>var hashValue: Int { get }</code>	http://swiftdoc.org/v2.2/type/String/#var-hashvalue_-int
String.isEmpty	A										<code>true</code> iff <code>self</code> contains no characters.\n    Declaration    \n    <code>var isEmpty: Bool { get }</code>	http://swiftdoc.org/v2.2/type/String/#var-isempty_-bool
String.localizedCapitalizedString	A										[Foundation] A capitalized representation of the <code>String</code> that is produced\nusing the current locale.\n    Declaration    \n    <code>var localizedCapitalizedString: String { get }</code>	http://swiftdoc.org/v2.2/type/String/#var-localizedcapitalizedstring_-string
String.localizedLowercaseString	A										[Foundation] A lowercase version of the string that is produced using the current\nlocale.\n    Declaration    \n    <code>var localizedLowercaseString: String { get }</code>	http://swiftdoc.org/v2.2/type/String/#var-localizedlowercasestring_-string
String.localizedUppercaseString	A										[Foundation] An uppercase version of the string that is produced using the current\nlocale.\n    Declaration    \n    <code>var localizedUppercaseString: String { get }</code>	http://swiftdoc.org/v2.2/type/String/#var-localizeduppercasestring_-string
String.lowercaseString	A										Declaration    \n    <code>var lowercaseString: String { get }</code>	http://swiftdoc.org/v2.2/type/String/#var-lowercasestring_-string
String.nulTerminatedUTF	A										A contiguously-stored nul-terminated UTF-8 representation of\n<code>self</code>.\nTo access the underlying memory, invoke\n<code>withUnsafeBufferPointer</code> on the <code>ContiguousArray</code>.\n    Declaration    \n    <code>var nulTerminatedUTF8: ContiguousArray&lt;CodeUnit&gt; { get }</code>	http://swiftdoc.org/v2.2/type/String/#var-nulterminatedutf8_-contiguousarray-codeunit
String.precomposedStringWithCanonicalMapping	A										[Foundation] Returns a string made by normalizing the <code>String</code>’s\ncontents using Form C.\n    Declaration    \n    <code>var precomposedStringWithCanonicalMapping: String { get }</code>	http://swiftdoc.org/v2.2/type/String/#var-precomposedstringwithcanonicalmapping_-string
String.precomposedStringWithCompatibilityMapping	A										[Foundation] Returns a string made by normalizing the <code>String</code>’s\ncontents using Form KC.\n    Declaration    \n    <code>var precomposedStringWithCompatibilityMapping: String { get }</code>	http://swiftdoc.org/v2.2/type/String/#var-precomposedstringwithcompatibilitymapping_-string
String.smallestEncoding	A										[Foundation] Returns the smallest encoding to which the <code>String</code> can\nbe converted without loss of information.\n    Declaration    \n    <code>var smallestEncoding: NSStringEncoding { get }</code>	http://swiftdoc.org/v2.2/type/String/#var-smallestencoding_-nsstringencoding
String.startIndex	A										The position of the first <code>Character</code> in <code>self.characters</code> if\n<code>self</code> is non-empty; identical to <code>endIndex</code> otherwise.\n    Declaration    \n    <code>var startIndex: Index { get }</code>	http://swiftdoc.org/v2.2/type/String/#var-startindex_-index
String.stringByRemovingPercentEncoding	A										[Foundation] Returns a new string made from the <code>String</code> by replacing\nall percent encoded sequences with the matching UTF-8\ncharacters.\n    Declaration    \n    <code>var stringByRemovingPercentEncoding: String? { get }</code>	http://swiftdoc.org/v2.2/type/String/#var-stringbyremovingpercentencoding_-string
String.unicodeScalars	A										The value of <code>self</code> as a collection of Unicode scalar values.\n    Declaration    \n    <code>var unicodeScalars: String.UnicodeScalarView { get set }</code>	http://swiftdoc.org/v2.2/type/String/#var-unicodescalars_-string-unicodescalarview
String.uppercaseString	A										Declaration    \n    <code>var uppercaseString: String { get }</code>	http://swiftdoc.org/v2.2/type/String/#var-uppercasestring_-string
String.utf	A										A UTF-8 encoding of <code>self</code>.\n    Declaration    \n    <code>var utf8: String.UTF8View { get }</code>	http://swiftdoc.org/v2.2/type/String/#var-utf8_-string-utf8view
String.utf	A										A UTF-16 encoding of <code>self</code>.\n    Declaration    \n    <code>var utf16: String.UTF16View { get }</code>	http://swiftdoc.org/v2.2/type/String/#var-utf16_-string-utf16view
availableStringEncodings	R	String.availableStringEncodings										
defaultCStringEncoding	R	String.defaultCStringEncoding										
fromCString	R	String.fromCString										
fromCStringRepairingIllFormedUTF	R	String.fromCStringRepairingIllFormedUTF										
localizedNameOfStringEncoding	R	String.localizedNameOfStringEncoding										
localizedStringWithFormat	R	String.localizedStringWithFormat										
append	R	String.append										
append	R	String.append										
appendContentsOf	R	String.appendContentsOf										
appendContentsOf	R	String.appendContentsOf										
cStringUsingEncoding	R	String.cStringUsingEncoding										
canBeConvertedToEncoding	R	String.canBeConvertedToEncoding										
capitalizedStringWithLocale	R	String.capitalizedStringWithLocale										
caseInsensitiveCompare	R	String.caseInsensitiveCompare										
commonPrefixWithString	R	String.commonPrefixWithString										
compare	R	String.compare										
completePathIntoString	R	String.completePathIntoString										
componentsSeparatedByCharactersInSet	R	String.componentsSeparatedByCharactersInSet										
componentsSeparatedByString	R	String.componentsSeparatedByString										
containsString	R	String.containsString										
dataUsingEncoding	R	String.dataUsingEncoding										
enumerateLines	R	String.enumerateLines										
enumerateLinguisticTagsInRange	R	String.enumerateLinguisticTagsInRange										
enumerateSubstringsInRange	R	String.enumerateSubstringsInRange										
getBytes	R	String.getBytes										
getCString	R	String.getCString										
getLineStart	R	String.getLineStart										
getParagraphStart	R	String.getParagraphStart										
hasPrefix	R	String.hasPrefix										
hasSuffix	R	String.hasSuffix										
insert	R	String.insert										
insertContentsOf	R	String.insertContentsOf										
lengthOfBytesUsingEncoding	R	String.lengthOfBytesUsingEncoding										
lineRangeForRange	R	String.lineRangeForRange										
linguisticTagsInRange	R	String.linguisticTagsInRange										
localizedCaseInsensitiveCompare	R	String.localizedCaseInsensitiveCompare										
localizedCaseInsensitiveContainsString	R	String.localizedCaseInsensitiveContainsString										
localizedCompare	R	String.localizedCompare										
localizedStandardCompare	R	String.localizedStandardCompare										
localizedStandardContainsString	R	String.localizedStandardContainsString										
localizedStandardRangeOfString	R	String.localizedStandardRangeOfString										
lowercaseStringWithLocale	R	String.lowercaseStringWithLocale										
maximumLengthOfBytesUsingEncoding	R	String.maximumLengthOfBytesUsingEncoding										
paragraphRangeForRange	R	String.paragraphRangeForRange										
propertyList	R	String.propertyList										
propertyListFromStringsFileFormat	R	String.propertyListFromStringsFileFormat										
rangeOfCharacterFromSet	R	String.rangeOfCharacterFromSet										
rangeOfComposedCharacterSequenceAtIndex	R	String.rangeOfComposedCharacterSequenceAtIndex										
rangeOfComposedCharacterSequencesForRange	R	String.rangeOfComposedCharacterSequencesForRange										
rangeOfString	R	String.rangeOfString										
removeAll	R	String.removeAll										
removeAtIndex	R	String.removeAtIndex										
removeRange	R	String.removeRange										
replaceRange	R	String.replaceRange										
replaceRange	R	String.replaceRange										
reserveCapacity	R	String.reserveCapacity										
stringByAddingPercentEncodingWithAllowedCharacters	R	String.stringByAddingPercentEncodingWithAllowedCharacters										
stringByAddingPercentEscapesUsingEncoding	R	String.stringByAddingPercentEscapesUsingEncoding										
stringByAppendingFormat	R	String.stringByAppendingFormat										
stringByAppendingString	R	String.stringByAppendingString										
stringByApplyingTransform	R	String.stringByApplyingTransform										
stringByFoldingWithOptions	R	String.stringByFoldingWithOptions										
stringByPaddingToLength	R	String.stringByPaddingToLength										
stringByReplacingCharactersInRange	R	String.stringByReplacingCharactersInRange										
stringByReplacingOccurrencesOfString	R	String.stringByReplacingOccurrencesOfString										
stringByReplacingPercentEscapesUsingEncoding	R	String.stringByReplacingPercentEscapesUsingEncoding										
stringByTrimmingCharactersInSet	R	String.stringByTrimmingCharactersInSet										
substringFromIndex	R	String.substringFromIndex										
substringToIndex	R	String.substringToIndex										
substringWithRange	R	String.substringWithRange										
uppercaseStringWithLocale	R	String.uppercaseStringWithLocale										
withCString	R	String.withCString										
withMutableCharacters	R	String.withMutableCharacters										
write	R	String.write										
writeTo	R	String.writeTo										
writeToFile	R	String.writeToFile										
writeToURL	R	String.writeToURL										
capitalizedString	R	String.capitalizedString										
characters	R	String.characters										
debugDescription	R	String.debugDescription										
decomposedStringWithCanonicalMapping	R	String.decomposedStringWithCanonicalMapping										
decomposedStringWithCompatibilityMapping	R	String.decomposedStringWithCompatibilityMapping										
endIndex	R	String.endIndex										
fastestEncoding	R	String.fastestEncoding										
hash	R	String.hash										
hashValue	R	String.hashValue										
isEmpty	R	String.isEmpty										
localizedCapitalizedString	R	String.localizedCapitalizedString										
localizedLowercaseString	R	String.localizedLowercaseString										
localizedUppercaseString	R	String.localizedUppercaseString										
lowercaseString	R	String.lowercaseString										
nulTerminatedUTF	R	String.nulTerminatedUTF										
precomposedStringWithCanonicalMapping	R	String.precomposedStringWithCanonicalMapping										
precomposedStringWithCompatibilityMapping	R	String.precomposedStringWithCompatibilityMapping										
smallestEncoding	R	String.smallestEncoding										
startIndex	R	String.startIndex										
stringByRemovingPercentEncoding	R	String.stringByRemovingPercentEncoding										
unicodeScalars	R	String.unicodeScalars										
uppercaseString	R	String.uppercaseString										
utf	R	String.utf										
utf	R	String.utf										
CustomDebugStringConvertible	A										<pre><code>protocol CustomDebugStringConvertible</code></pre>A type with a customized textual representation suitable for\ndebugging purposes.\nThis textual representation is used when values are written to an\noutput stream by <code>debugPrint</code>, and is\ntypically more verbose than the text provided by a\n<code>CustomStringConvertible</code>'s <code>description</code> property.\n<strong>Note:</strong> <code>String(reflecting: instance)</code> will work for an <code>instance</code>\n  of any type, returning its <code>debugDescription</code> if the <code>instance</code>\n  happens to be <code>CustomDebugStringConvertible</code>.  Using\n<code>CustomDebugStringConvertible</code> as a generic constraint, or\naccessing a conforming type's <code>debugDescription</code> directly, is\ntherefore discouraged.\n<strong>See Also:</strong> <code>String.init&lt;T&gt;(reflecting: T)</code>,\n  <code>CustomStringConvertible</code>	http://swiftdoc.org/v2.2/protocol/CustomDebugStringConvertible/
CustomDebugStringConvertible.debugDescription	A										A textual representation of <code>self</code>, suitable for debugging.\n    Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/protocol/CustomDebugStringConvertible/#var-debugdescription_-string
debugDescription	R	CustomDebugStringConvertible.debugDescription										
Comparable	A										<pre><code>protocol Comparable</code></pre>Instances of conforming types can be compared using relational\noperators, which define a strict total order.\nA type conforming to <code>Comparable</code> need only supply the <code>&lt;</code> and\n<code>==</code> operators; default implementations of <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, and\n<code>!=</code> are supplied by the standard library:\n<pre><code>struct Singular : Comparable {}\nfunc ==(x: Singular, y: Singular) -&gt; Bool { return true }\nfunc &lt;(x: Singular, y: Singular) -&gt; Bool { return false }</code></pre>\n<strong>Axioms</strong>, in addition to those of <code>Equatable</code>:\n<code>x == y</code> implies <code>x &lt;= y</code>, <code>x &gt;= y</code>, <code>!(x &lt; y)</code>, and <code>!(x &gt; y)</code><code>x &lt; y</code> implies <code>x &lt;= y</code> and <code>y &gt; x</code><code>x &gt; y</code> implies <code>x &gt;= y</code> and <code>y &lt; x</code><code>x &lt;= y</code> implies <code>y &gt;= x</code><code>x &gt;= y</code> implies <code>y &lt;= x</code>	http://swiftdoc.org/v2.2/protocol/Comparable/
BooleanLiteralConvertible	A										<pre><code>protocol BooleanLiteralConvertible</code></pre>Conforming types can be initialized with the Boolean literals\n<code>true</code> and <code>false</code>.	http://swiftdoc.org/v2.2/protocol/BooleanLiteralConvertible/
AnyGenerator	A										<pre><code>struct AnyGenerator&lt;Element&gt;</code></pre>A type-erased generator of <code>Element</code>.\nThis generator forwards its <code>next()</code> method to an arbitrary underlying\ngenerator having the same <code>Element</code> type, hiding the specifics of the\nunderlying <code>GeneratorType</code>.\n<strong>See Also:</strong>\n<code>struct AnySequence&lt;S : SequenceType&gt;</code>	http://swiftdoc.org/v2.2/type/AnyGenerator/
AnyGenerator.next	A										Advance to the next element and return it, or <code>nil</code> if no next\nelement exists.\n    Declaration    \n    <code>func next() -&gt; Element?</code>	http://swiftdoc.org/v2.2/type/AnyGenerator/#func-next
next	R	AnyGenerator.next										
UInt8	A										<pre><code>struct UInt8</code></pre>An 8-bit unsigned integer value\ntype.	http://swiftdoc.org/v2.2/type/UInt8/
UInt8.addWithOverflow	A										Add <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func addWithOverflow(lhs: UInt8, _ rhs: UInt8) -&gt; (UInt8, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/UInt8/#func-addwithoverflow__
UInt8.divideWithOverflow	A										Divide <code>lhs</code> and <code>rhs</code>, returning\na result and a <code>Bool</code>\nthat is <code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func divideWithOverflow(lhs: UInt8, _ rhs: UInt8) -&gt; (UInt8, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/UInt8/#func-dividewithoverflow__
UInt8.multiplyWithOverflow	A										Multiply <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func multiplyWithOverflow(lhs: UInt8, _ rhs: UInt8) -&gt; (UInt8, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/UInt8/#func-multiplywithoverflow__
UInt8.remainderWithOverflow	A										Divide <code>lhs</code> and <code>rhs</code>, returning\nthe remainder and a <code>Bool</code>\nthat is <code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func remainderWithOverflow(lhs: UInt8, _ rhs: UInt8) -&gt; (UInt8, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/UInt8/#func-remainderwithoverflow__
UInt8.subtractWithOverflow	A										Subtract <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func subtractWithOverflow(lhs: UInt8, _ rhs: UInt8) -&gt; (UInt8, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/UInt8/#func-subtractwithoverflow__
UInt8.predecessor	A										Returns the previous consecutive value before <code>self</code>.\n<strong>Requires:</strong> The previous value is representable.\n    Declaration    \n    <code>func predecessor() -&gt; UInt8</code>	http://swiftdoc.org/v2.2/type/UInt8/#func-predecessor
UInt8.successor	A										Returns the next consecutive value after <code>self</code>.\n<strong>Requires:</strong> The next value is representable.\n    Declaration    \n    <code>func successor() -&gt; UInt8</code>	http://swiftdoc.org/v2.2/type/UInt8/#func-successor
UInt8.toIntMax	A										Explicitly convert to <code>IntMax</code>.\n    Declaration    \n    <code>func toIntMax() -&gt; IntMax</code>	http://swiftdoc.org/v2.2/type/UInt8/#func-tointmax
UInt8.toUIntMax	A										Represent this number using Swift's widest native unsigned\ninteger type.\n    Declaration    \n    <code>func toUIntMax() -&gt; UIntMax</code>	http://swiftdoc.org/v2.2/type/UInt8/#func-touintmax
UInt8.allZeros	A										The empty bitset of type UInt8.\n    Declaration    \n    <code>static var allZeros: UInt8 { get }</code>	http://swiftdoc.org/v2.2/type/UInt8/#static-var-allzeros_-uint8
UInt8.max	A										Declaration    \n    <code>static var max: UInt8 { get }</code>	http://swiftdoc.org/v2.2/type/UInt8/#static-var-max_-uint8
UInt8.min	A										Declaration    \n    <code>static var min: UInt8 { get }</code>	http://swiftdoc.org/v2.2/type/UInt8/#static-var-min_-uint8
UInt8.allZeros	A										The empty bitset of type UInt8.\n    Declaration    \n    <code>static var allZeros: UInt8 { get }</code>	http://swiftdoc.org/v2.2/type/UInt8/#static-var-allzeros_-uint8
UInt8.max	A										Declaration    \n    <code>static var max: UInt8 { get }</code>	http://swiftdoc.org/v2.2/type/UInt8/#static-var-max_-uint8
UInt8.min	A										Declaration    \n    <code>static var min: UInt8 { get }</code>	http://swiftdoc.org/v2.2/type/UInt8/#static-var-min_-uint8
UInt8.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/UInt8/#var-description_-string
UInt8.hashValue	A										The hash value.\n<strong>Axiom:</strong> <code>x == y</code> implies <code>x.hashValue == y.hashValue</code>.\n<strong>Note:</strong> The hash value is not guaranteed to be stable across\n  different invocations of the same program.  Do not persist the\n  hash value across program runs.\n    Declaration    \n    <code>var hashValue: Int { get }</code>	http://swiftdoc.org/v2.2/type/UInt8/#var-hashvalue_-int
addWithOverflow	R	UInt8.addWithOverflow										
divideWithOverflow	R	UInt8.divideWithOverflow										
multiplyWithOverflow	R	UInt8.multiplyWithOverflow										
remainderWithOverflow	R	UInt8.remainderWithOverflow										
subtractWithOverflow	R	UInt8.subtractWithOverflow										
predecessor	R	UInt8.predecessor										
successor	R	UInt8.successor										
toIntMax	R	UInt8.toIntMax										
toUIntMax	R	UInt8.toUIntMax										
allZeros	R	UInt8.allZeros										
max	R	UInt8.max										
min	R	UInt8.min										
allZeros	R	UInt8.allZeros										
max	R	UInt8.max										
min	R	UInt8.min										
description	R	UInt8.description										
hashValue	R	UInt8.hashValue										
ReverseIndex	A										<pre><code>struct ReverseIndex&lt;Base : BidirectionalIndexType&gt;</code></pre>A wrapper for a <code>BidirectionalIndexType</code> that reverses its\ndirection of traversal.	http://swiftdoc.org/v2.2/type/ReverseIndex/
ReverseIndex.base	A										The successor position in the underlying (un-reversed)\ncollection.\nIf <code>self</code> is <code>advance(c.reverse.startIndex, n)</code>, then:\n- <code>self.base</code> is <code>advance(c.endIndex, -n)</code>.\n- if <code>n</code> != <code>c.count</code>, then <code>c.reverse[self]</code> is \n  equivalent to <code>[self.base.predecessor()]</code>.\n    Declaration    \n    <code>var base: Base { get }</code>	http://swiftdoc.org/v2.2/type/ReverseIndex/#var-base_-base
base	R	ReverseIndex.base										
String.UTF8View.Index	A										<pre><code>struct String.UTF8View.Index</code></pre>A position in a <code>String.UTF8View</code>.	http://swiftdoc.org/v2.2/type/String.UTF8View.Index/
String.UTF8View.Index.samePositionIn	A										Returns the position in <code>characters</code> that corresponds exactly\nto <code>self</code>, or if no such position exists, <code>nil</code>.\n<strong>Requires:</strong> <code>self</code> is an element of <code>characters.utf8.indices</code>.\n    Declaration    \n    <code>func samePositionIn(characters: String) -&gt; Index?</code>	http://swiftdoc.org/v2.2/type/String.UTF8View.Index/#func-samepositionin_-string
String.UTF8View.Index.samePositionIn	A										Returns the position in <code>utf16</code> that corresponds exactly\nto <code>self</code>, or if no such position exists, <code>nil</code>.\n<strong>Requires:</strong> <code>self</code> is an element of <code>String(utf16)!.utf8.indices</code>.\n    Declaration    \n    <code>func samePositionIn(utf16: String.UTF16View) -&gt; String.UTF16View.Index?</code>	http://swiftdoc.org/v2.2/type/String.UTF8View.Index/#func-samepositionin_-string-utf16view
String.UTF8View.Index.samePositionIn	A										Returns the position in <code>unicodeScalars</code> that corresponds exactly\nto <code>self</code>, or if no such position exists, <code>nil</code>.\n<strong>Requires:</strong> <code>self</code> is an element of\n  <code>String(unicodeScalars).utf8.indices</code>.\n    Declaration    \n    <code>func samePositionIn(unicodeScalars: String.UnicodeScalarView) -&gt; UnicodeScalarIndex?</code>	http://swiftdoc.org/v2.2/type/String.UTF8View.Index/#func-samepositionin_-string-unicodescalarview
String.UTF8View.Index.successor	A										Returns the next consecutive value after <code>self</code>.\n<strong>Requires:</strong> The next value is representable.\n    Declaration    \n    <code>func successor() -&gt; String.UTF8View.Index</code>	http://swiftdoc.org/v2.2/type/String.UTF8View.Index/#func-successor
Index	R	String.UTF8View.Index										
samePositionIn	R	String.UTF8View.Index.samePositionIn										
samePositionIn	R	String.UTF8View.Index.samePositionIn										
samePositionIn	R	String.UTF8View.Index.samePositionIn										
successor	R	String.UTF8View.Index.successor										
Operator: &&	A										<pre><code>infix operator &amp;&amp; {\n    associativity left\n    precedence 120\n}</code></pre>	http://swiftdoc.org/v2.2/operator/ampamp/
Operator: &	A										<pre><code>infix operator &amp; {\n    associativity left\n    precedence 150\n}</code></pre>	http://swiftdoc.org/v2.2/operator/amp/
Operator: &+	A										<pre><code>infix operator &amp;+ {\n    associativity left\n    precedence 140\n}</code></pre>	http://swiftdoc.org/v2.2/operator/amppls/
_SequenceWrapperType	A										<pre><code>protocol _SequenceWrapperType</code></pre>A type that is just a wrapper over some base Sequence	http://swiftdoc.org/v2.2/protocol/_SequenceWrapperType/
Operator: &-	A										<pre><code>infix operator &amp;- {\n    associativity left\n    precedence 140\n}</code></pre>	http://swiftdoc.org/v2.2/operator/ampmns/
_StringElementType	A										<pre><code>protocol _StringElementType</code></pre>Instances of conforming types are used in internal <code>String</code>\nrepresentation.	http://swiftdoc.org/v2.2/protocol/_StringElementType/
CodeUnit	A										<pre><code>extension CodeUnit</code></pre>	http://swiftdoc.org/v2.2/type/CodeUnit/
FlattenCollectionIndex	A										<pre><code>struct FlattenCollectionIndex&lt;BaseElements : CollectionType where BaseElements.Generator.Element : CollectionType&gt;</code></pre>A position in a <code>FlattenCollection</code>.	http://swiftdoc.org/v2.2/type/FlattenCollectionIndex/
FlattenCollectionIndex.successor	A										Returns the next consecutive value after <code>self</code>.\n<strong>Requires:</strong> The next value is representable.\n    Declaration    \n    <code>func successor() -&gt; FlattenCollectionIndex&lt;BaseElements&gt;</code>	http://swiftdoc.org/v2.2/type/FlattenCollectionIndex/#func-successor
successor	R	FlattenCollectionIndex.successor										
FlattenBidirectionalCollectionIndex	A										<pre><code>struct FlattenBidirectionalCollectionIndex&lt;BaseElements : CollectionType where BaseElements.Generator.Element : CollectionType, BaseElements.Index : BidirectionalIndexType, BaseElements.Generator.Element.Index : BidirectionalIndexType&gt;</code></pre>A position in a <code>FlattenBidirectionalCollection</code>.	http://swiftdoc.org/v2.2/type/FlattenBidirectionalCollectionIndex/
FlattenBidirectionalCollectionIndex.predecessor	A										Returns the previous consecutive value before <code>self</code>.\n<strong>Requires:</strong> The previous value is representable.\n    Declaration    \n    <code>func predecessor() -&gt; FlattenBidirectionalCollectionIndex&lt;BaseElements&gt;</code>	http://swiftdoc.org/v2.2/type/FlattenBidirectionalCollectionIndex/#func-predecessor
FlattenBidirectionalCollectionIndex.successor	A										Returns the next consecutive value after <code>self</code>.\n<strong>Requires:</strong> The next value is representable.\n    Declaration    \n    <code>func successor() -&gt; FlattenBidirectionalCollectionIndex&lt;BaseElements&gt;</code>	http://swiftdoc.org/v2.2/type/FlattenBidirectionalCollectionIndex/#func-successor
predecessor	R	FlattenBidirectionalCollectionIndex.predecessor										
successor	R	FlattenBidirectionalCollectionIndex.successor										
_PointerType	A										<pre><code>protocol _PointerType</code></pre>A stdlib-internal protocol modeled by the intrinsic pointer types,\nUnsafeMutablePointer, UnsafePointer, and\nAutoreleasingUnsafeMutablePointer.	http://swiftdoc.org/v2.2/protocol/_PointerType/
RandomAccessIndexType	A										<pre><code>protocol RandomAccessIndexType</code></pre>An index that can be offset by an arbitrary number of positions,\nand can measure the distance to any reachable value, in O(1).	http://swiftdoc.org/v2.2/protocol/RandomAccessIndexType/
Character	A										<pre><code>struct Character</code></pre><code>Character</code> represents some Unicode grapheme cluster as\ndefined by a canonical, localized, or otherwise tailored\nsegmentation algorithm.	http://swiftdoc.org/v2.2/type/Character/
Character.writeTo	A										Write a textual representation of <code>self</code> into <code>target</code>.\n    Declaration    \n    <code>func writeTo&lt;Target : OutputStreamType&gt;(inout target: Target)</code>	http://swiftdoc.org/v2.2/type/Character/#func-writeto-inout_
Character.debugDescription	A										A textual representation of <code>self</code>, suitable for debugging.\n    Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/Character/#var-debugdescription_-string
Character.hashValue	A										The hash value.\n<strong>Axiom:</strong> <code>x == y</code> implies <code>x.hashValue == y.hashValue</code>.\n<strong>Note:</strong> The hash value is not guaranteed to be stable across\n  different invocations of the same program.  Do not persist the\n  hash value across program runs.\n    Declaration    \n    <code>var hashValue: Int { get }</code>	http://swiftdoc.org/v2.2/type/Character/#var-hashvalue_-int
writeTo	R	Character.writeTo										
debugDescription	R	Character.debugDescription										
hashValue	R	Character.hashValue										
AutoreleasingUnsafeMutablePointer	A										<pre><code>struct AutoreleasingUnsafeMutablePointer&lt;Memory&gt;</code></pre>A mutable pointer-to-ObjC-pointer argument.\nThis type has implicit conversions to allow passing any of the following\nto a C or ObjC API:\n<code>nil</code>, which gets passed as a null pointer,an inout argument of the referenced type, which gets passed as a pointer\nto a writeback temporary with autoreleasing ownership semantics,an <code>UnsafeMutablePointer&lt;Memory&gt;</code>, which is passed as-is.\nPassing pointers to mutable arrays of ObjC class pointers is not\ndirectly supported. Unlike <code>UnsafeMutablePointer&lt;Memory&gt;</code>,\n<code>AutoreleasingUnsafeMutablePointer&lt;Memory&gt;</code> must reference storage that\ndoes not own a reference count to the referenced\nvalue. UnsafeMutablePointer's operations, by contrast, assume that\nthe referenced storage owns values loaded from or stored to it.\nThis type does not carry an owner pointer unlike the other C*Pointer types\nbecause it only needs to reference the results of inout conversions, which\nalready have writeback-scoped lifetime.	http://swiftdoc.org/v2.2/type/AutoreleasingUnsafeMutablePointer/
AutoreleasingUnsafeMutablePointer.debugDescription	A										A textual representation of <code>self</code>, suitable for debugging.\n    Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/AutoreleasingUnsafeMutablePointer/#var-debugdescription_-string
AutoreleasingUnsafeMutablePointer.memory	A										Access the underlying raw memory, getting and\nsetting values.\n    Declaration    \n    <code>var memory: Memory { get set }</code>	http://swiftdoc.org/v2.2/type/AutoreleasingUnsafeMutablePointer/#var-memory_-memory
debugDescription	R	AutoreleasingUnsafeMutablePointer.debugDescription										
memory	R	AutoreleasingUnsafeMutablePointer.memory										
Operator: prefix ~	A										<pre><code>prefix operator prefix ~ {\n    associativity \n    precedence \n}</code></pre>	http://swiftdoc.org/v2.2/operator/prefix_tilde/
Operator: prefix !	A										<pre><code>prefix operator prefix ! {\n    associativity \n    precedence \n}</code></pre>	http://swiftdoc.org/v2.2/operator/prefix_excl/
RawByte	A										<pre><code>struct RawByte</code></pre>A byte-sized thing that isn't designed to interoperate with\nany other types; it makes a decent parameter to\n<code>UnsafeMutablePointer&lt;Memory&gt;</code> when you just want to do bytewise\npointer arithmetic.\nDeprecated: it will be removed in Swift 3.	http://swiftdoc.org/v2.2/type/RawByte/
LazyFilterIndex	A										<pre><code>struct LazyFilterIndex&lt;BaseElements : CollectionType&gt;</code></pre>The <code>Index</code> used for subscripting a <code>LazyFilterCollection</code>.\nThe positions of a <code>LazyFilterIndex</code> correspond to those positions\n<code>p</code> in its underlying collection <code>c</code> such that <code>c[p]</code>\nsatisfies the predicate with which the <code>LazyFilterIndex</code> was\ninitialized.\n<strong>Note:</strong> The performance of advancing a <code>LazyFilterIndex</code>\n  depends on how sparsely the filtering predicate is satisfied,\n  and may not offer the usual performance given by models of\n  <code>ForwardIndexType</code>.	http://swiftdoc.org/v2.2/type/LazyFilterIndex/
LazyFilterIndex.successor	A										Returns the next consecutive value after <code>self</code>.\n<strong>Requires:</strong> The next value is representable.\n<strong>Complexity:</strong> Amortized O(M), where M is the average distance in\n  the base collection between elements that satisfy the\n  predicate.\n<strong>Note:</strong> This operation may not satisfy the expected complexity\n  for models of <code>ForwardIndexType</code>.\n    Declaration    \n    <code>func successor() -&gt; LazyFilterIndex&lt;BaseElements&gt;</code>	http://swiftdoc.org/v2.2/type/LazyFilterIndex/#func-successor
LazyFilterIndex.base	A										The position corresponding to <code>self</code> in the underlying collection.\n    Declaration    \n    <code>var base: BaseElements.Index { get }</code>	http://swiftdoc.org/v2.2/type/LazyFilterIndex/#var-base_-baseelements-index
successor	R	LazyFilterIndex.successor										
base	R	LazyFilterIndex.base										
Mirror.AncestorRepresentation	A										<pre><code>enum Mirror.AncestorRepresentation</code></pre>Representation of ancestor classes.\nA <code>CustomReflectable</code> class can control how its mirror will\nrepresent ancestor classes by initializing the mirror with a\n<code>AncestorRepresentation</code>.  This setting has no effect on mirrors\nreflecting value type instances.	http://swiftdoc.org/v2.2/type/Mirror.AncestorRepresentation/
AncestorRepresentation	R	Mirror.AncestorRepresentation										
Mirror.DisplayStyle	A										<pre><code>enum Mirror.DisplayStyle</code></pre>A suggestion of how a <code>Mirror</code>'s is to be interpreted.\nPlaygrounds and the debugger will show a representation similar\nto the one used for instances of the kind indicated by the\n<code>DisplayStyle</code> case name when the <code>Mirror</code> is used for display.	http://swiftdoc.org/v2.2/type/Mirror.DisplayStyle/
DisplayStyle	R	Mirror.DisplayStyle										
Optional	A										<pre><code>enum Optional&lt;Wrapped&gt;</code></pre>A type that can represent either a <code>Wrapped</code> value or <code>nil</code>, the absence\nof a value.	http://swiftdoc.org/v2.2/type/Optional/
Optional.flatMap	A										Returns <code>nil</code> if <code>self</code> is <code>nil</code>, <code>f(self!)</code> otherwise.\n    Declaration    \n    <code>func flatMap&lt;U&gt;(@noescape f: (Wrapped) throws -&gt; U?) rethrows -&gt; U?</code>	http://swiftdoc.org/v2.2/type/Optional/#func-flatmap_
Optional.map	A										If <code>self == nil</code>, returns <code>nil</code>.  Otherwise, returns <code>f(self!)</code>.\n    Declaration    \n    <code>func map&lt;U&gt;(@noescape f: (Wrapped) throws -&gt; U) rethrows -&gt; U?</code>	http://swiftdoc.org/v2.2/type/Optional/#func-map_
Optional.debugDescription	A										A textual representation of <code>self</code>, suitable for debugging.\n    Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/Optional/#var-debugdescription_-string
flatMap	R	Optional.flatMap										
map	R	Optional.map										
debugDescription	R	Optional.debugDescription										
ManagedProtoBuffer	A										<pre><code>class ManagedProtoBuffer&lt;Value, Element&gt;</code></pre>A base class of <code>ManagedBuffer&lt;Value,Element&gt;</code>, used during\ninstance creation.\nDuring instance creation, in particular during\n<code>ManagedBuffer.create</code>'s call to initialize, <code>ManagedBuffer</code>'s\n<code>value</code> property is as-yet uninitialized, and therefore\n<code>ManagedProtoBuffer</code> does not offer access to the as-yet\nuninitialized <code>value</code> property of <code>ManagedBuffer</code>.	http://swiftdoc.org/v2.2/type/ManagedProtoBuffer/
ManagedProtoBuffer.withUnsafeMutablePointerToElements	A										Call <code>body</code> with an <code>UnsafeMutablePointer</code> to the <code>Element</code>\nstorage.\n<strong>Note:</strong> This pointer is only valid for the duration of the\n  call to <code>body</code>.\n    Declaration    \n    <code>final func withUnsafeMutablePointerToElements&lt;R&gt;(body: (UnsafeMutablePointer&lt;Element&gt;) -&gt; R) -&gt; R</code>	http://swiftdoc.org/v2.2/type/ManagedProtoBuffer/#func-withunsafemutablepointertoelements_
ManagedProtoBuffer.withUnsafeMutablePointerToValue	A										Call <code>body</code> with an <code>UnsafeMutablePointer</code> to the stored\n<code>Value</code>.\n<strong>Note:</strong> This pointer is only valid for the duration of the\n  call to <code>body</code>.\n    Declaration    \n    <code>final func withUnsafeMutablePointerToValue&lt;R&gt;(body: (UnsafeMutablePointer&lt;Value&gt;) -&gt; R) -&gt; R</code>	http://swiftdoc.org/v2.2/type/ManagedProtoBuffer/#func-withunsafemutablepointertovalue_
ManagedProtoBuffer.withUnsafeMutablePointers	A										Call <code>body</code> with <code>UnsafeMutablePointer</code>s to the stored <code>Value</code>\nand raw <code>Element</code> storage.\n<strong>Note:</strong> These pointers are only valid for the duration of the\n  call to <code>body</code>.\n    Declaration    \n    <code>final func withUnsafeMutablePointers&lt;R&gt;(body: (UnsafeMutablePointer&lt;Value&gt;, UnsafeMutablePointer&lt;Element&gt;) -&gt; R) -&gt; R</code>	http://swiftdoc.org/v2.2/type/ManagedProtoBuffer/#func-withunsafemutablepointers_
ManagedProtoBuffer.allocatedElementCount	A										The actual number of elements that can be stored in this object.\nThis value may be nontrivial to compute; it is usually a good\nidea to store this information in the &quot;value&quot; area when\nan instance is created.\n    Declaration    \n    <code>var allocatedElementCount: Int { get }</code>	http://swiftdoc.org/v2.2/type/ManagedProtoBuffer/#var-allocatedelementcount_-int
withUnsafeMutablePointerToElements	R	ManagedProtoBuffer.withUnsafeMutablePointerToElements										
withUnsafeMutablePointerToValue	R	ManagedProtoBuffer.withUnsafeMutablePointerToValue										
withUnsafeMutablePointers	R	ManagedProtoBuffer.withUnsafeMutablePointers										
allocatedElementCount	R	ManagedProtoBuffer.allocatedElementCount										
IntMax	A										<pre><code>extension IntMax</code></pre>	http://swiftdoc.org/v2.2/type/IntMax/
ImplicitlyUnwrappedOptional	A										<pre><code>enum ImplicitlyUnwrappedOptional&lt;Wrapped&gt;</code></pre>An optional type that allows implicit member access.	http://swiftdoc.org/v2.2/type/ImplicitlyUnwrappedOptional/
ImplicitlyUnwrappedOptional.flatMap	A										Returns <code>nil</code> if <code>self</code> is <code>nil</code>, <code>f(self!)</code> otherwise.\nDeprecated: Unaccessible. Will be removed in Swift 3.\n    Declaration    \n    <code>func flatMap&lt;U&gt;(@noescape f: (Wrapped) throws -&gt; U!) rethrows -&gt; U!</code>	http://swiftdoc.org/v2.2/type/ImplicitlyUnwrappedOptional/#func-flatmap_
ImplicitlyUnwrappedOptional.map	A										If <code>self == nil</code>, returns <code>nil</code>.  Otherwise, returns <code>f(self!)</code>.\nDeprecated: Unaccessible. Will be removed in Swift 3.\n    Declaration    \n    <code>func map&lt;U&gt;(@noescape f: (Wrapped) throws -&gt; U) rethrows -&gt; U!</code>	http://swiftdoc.org/v2.2/type/ImplicitlyUnwrappedOptional/#func-map_
ImplicitlyUnwrappedOptional.debugDescription	A										Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/ImplicitlyUnwrappedOptional/#var-debugdescription_-string
ImplicitlyUnwrappedOptional.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/ImplicitlyUnwrappedOptional/#var-description_-string
flatMap	R	ImplicitlyUnwrappedOptional.flatMap										
map	R	ImplicitlyUnwrappedOptional.map										
debugDescription	R	ImplicitlyUnwrappedOptional.debugDescription										
description	R	ImplicitlyUnwrappedOptional.description										
ManagedBuffer	A										<pre><code>class ManagedBuffer&lt;Value, Element&gt;</code></pre>A class whose instances contain a property of type <code>Value</code> and raw\nstorage for an array of <code>Element</code>, whose size is determined at\ninstance creation.\nNote that the <code>Element</code> array is suitably-aligned <strong>raw memory</strong>.\nYou are expected to construct and---if necessary---destroy objects\nthere yourself, using the APIs on <code>UnsafeMutablePointer&lt;Element&gt;</code>.\nTypical usage stores a count and capacity in <code>Value</code> and destroys\nany live elements in the <code>deinit</code> of a subclass.\n<strong>Note:</strong> Subclasses must not have any stored properties; any storage\n  needed should be included in <code>Value</code>.	http://swiftdoc.org/v2.2/type/ManagedBuffer/
ManagedBuffer.create	A										Create a new instance of the most-derived class, calling\n<code>initializeValue</code> on the partially-constructed object to\ngenerate an initial <code>Value</code>.\n    Declaration    \n    <code>final class func create(minimumCapacity: Int, initialValue: (ManagedProtoBuffer&lt;Value, Element&gt;) -&gt; Value) -&gt; ManagedBuffer&lt;Value, Element&gt;</code>	http://swiftdoc.org/v2.2/type/ManagedBuffer/#func-create_initialvalue_
ManagedBuffer.value	A										The stored <code>Value</code> instance.\n    Declaration    \n    <code>var value: Value { get set }</code>	http://swiftdoc.org/v2.2/type/ManagedBuffer/#var-value_-value
create	R	ManagedBuffer.create										
value	R	ManagedBuffer.value										
_ReverseCollectionType	A										<pre><code>protocol _ReverseCollectionType</code></pre>	http://swiftdoc.org/v2.2/protocol/_ReverseCollectionType/
_ReverseCollectionType.endIndex	A										Declaration    \n    <code>var endIndex: Self.Index { get }</code>	http://swiftdoc.org/v2.2/protocol/_ReverseCollectionType/#self_-collectiontype-index-base-base-index-var-endindex_-self-index
_ReverseCollectionType.startIndex	A										Declaration    \n    <code>var startIndex: Self.Index { get }</code>	http://swiftdoc.org/v2.2/protocol/_ReverseCollectionType/#self_-collectiontype-index-base-base-index-var-startindex_-self-index
endIndex	R	_ReverseCollectionType.endIndex										
startIndex	R	_ReverseCollectionType.startIndex										
Set	A										<pre><code>struct Set&lt;Element : Hashable&gt;</code></pre>A collection of unique <code>Element</code> instances with no defined ordering.	http://swiftdoc.org/v2.2/type/Set/
Set.exclusiveOr	A										Returns a new set with elements that are either in the set or a finite\nsequence but do not occur in both.\n    Declaration    \n    <code>func exclusiveOr&lt;S : SequenceType where S.Generator.Element == Element&gt;(sequence: S) -&gt; Set&lt;Element&gt;</code>	http://swiftdoc.org/v2.2/type/Set/#func-exclusiveor_
Set.exclusiveOrInPlace	A										For each element of a finite sequence, removes it from the set if it is a\ncommon element, otherwise adds it to the set. Repeated elements of the\nsequence will be ignored.\n    Declaration    \n    <code>mutating func exclusiveOrInPlace&lt;S : SequenceType where S.Generator.Element == Element&gt;(sequence: S)</code>	http://swiftdoc.org/v2.2/type/Set/#func-exclusiveorinplace_
Set.generate	A										Returns a generator over the members.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>func generate() -&gt; SetGenerator&lt;Element&gt;</code>	http://swiftdoc.org/v2.2/type/Set/#func-generate
Set.insert	A										Insert a member into the set.\n    Declaration    \n    <code>mutating func insert(member: Element)</code>	http://swiftdoc.org/v2.2/type/Set/#func-insert_
Set.intersect	A										Returns a new set with elements common to this set and a finite sequence.\n    Declaration    \n    <code>func intersect&lt;S : SequenceType where S.Generator.Element == Element&gt;(sequence: S) -&gt; Set&lt;Element&gt;</code>	http://swiftdoc.org/v2.2/type/Set/#func-intersect_
Set.intersectInPlace	A										Removes any members of this set that aren't also in a finite sequence.\n    Declaration    \n    <code>mutating func intersectInPlace&lt;S : SequenceType where S.Generator.Element == Element&gt;(sequence: S)</code>	http://swiftdoc.org/v2.2/type/Set/#func-intersectinplace_
Set.isDisjointWith	A										Returns <code>true</code> if no members in the set are in a finite sequence as a <code>Set</code>.\n    Declaration    \n    <code>func isDisjointWith&lt;S : SequenceType where S.Generator.Element == Element&gt;(sequence: S) -&gt; Bool</code>	http://swiftdoc.org/v2.2/type/Set/#func-isdisjointwith_
Set.isStrictSubsetOf	A										Returns <code>true</code> if the set is a subset of a finite sequence as a <code>Set</code>\nbut not equal.\n    Declaration    \n    <code>func isStrictSubsetOf&lt;S : SequenceType where S.Generator.Element == Element&gt;(sequence: S) -&gt; Bool</code>	http://swiftdoc.org/v2.2/type/Set/#func-isstrictsubsetof_
Set.isStrictSupersetOf	A										Returns <code>true</code> if the set is a superset of a finite sequence as a <code>Set</code>\nbut not equal.\n    Declaration    \n    <code>func isStrictSupersetOf&lt;S : SequenceType where S.Generator.Element == Element&gt;(sequence: S) -&gt; Bool</code>	http://swiftdoc.org/v2.2/type/Set/#func-isstrictsupersetof_
Set.isSubsetOf	A										Returns <code>true</code> if the set is a subset of a finite sequence as a <code>Set</code>.\n    Declaration    \n    <code>func isSubsetOf&lt;S : SequenceType where S.Generator.Element == Element&gt;(sequence: S) -&gt; Bool</code>	http://swiftdoc.org/v2.2/type/Set/#func-issubsetof_
Set.isSupersetOf	A										Returns <code>true</code> if the set is a superset of a finite sequence as a <code>Set</code>.\n    Declaration    \n    <code>func isSupersetOf&lt;S : SequenceType where S.Generator.Element == Element&gt;(sequence: S) -&gt; Bool</code>	http://swiftdoc.org/v2.2/type/Set/#func-issupersetof_
Set.popFirst	A										If <code>!self.isEmpty</code>, return the first key-value pair in the sequence of\nelements, otherwise return <code>nil</code>.\n<strong>Complexity:</strong> Amortized O(1)\n    Declaration    \n    <code>mutating func popFirst() -&gt; Element?</code>	http://swiftdoc.org/v2.2/type/Set/#func-popfirst
Set.remove	A										Remove the member from the set and return it if it was present.\n    Declaration    \n    <code>mutating func remove(member: Element) -&gt; Element?</code>	http://swiftdoc.org/v2.2/type/Set/#func-remove_
Set.removeAll	A										Erase all the elements.  If <code>keepCapacity</code> is <code>true</code>, <code>capacity</code>\nwill not decrease.\n    Declaration    \n    <code>mutating func removeAll(keepCapacity keepCapacity: Bool = default)</code>	http://swiftdoc.org/v2.2/type/Set/#func-removeall-keepcapacity_
Set.removeAtIndex	A										Remove the member referenced by the given index.\n    Declaration    \n    <code>mutating func removeAtIndex(index: SetIndex&lt;Element&gt;) -&gt; Element</code>	http://swiftdoc.org/v2.2/type/Set/#func-removeatindex_
Set.removeFirst	A										Remove a member from the set and return it.\n<strong>Requires:</strong> <code>count &gt; 0</code>.\n    Declaration    \n    <code>mutating func removeFirst() -&gt; Element</code>	http://swiftdoc.org/v2.2/type/Set/#func-removefirst
Set.subtract	A										Returns a new set with elements in this set that do not occur\nin a finite sequence.\n    Declaration    \n    <code>func subtract&lt;S : SequenceType where S.Generator.Element == Element&gt;(sequence: S) -&gt; Set&lt;Element&gt;</code>	http://swiftdoc.org/v2.2/type/Set/#func-subtract_
Set.subtractInPlace	A										Removes all members in the set that occur in a finite sequence.\n    Declaration    \n    <code>mutating func subtractInPlace&lt;S : SequenceType where S.Generator.Element == Element&gt;(sequence: S)</code>	http://swiftdoc.org/v2.2/type/Set/#func-subtractinplace_
Set.union	A										Returns a new <code>Set</code> with items in both this set and a finite sequence.\n    Declaration    \n    <code>func union&lt;S : SequenceType where S.Generator.Element == Element&gt;(sequence: S) -&gt; Set&lt;Element&gt;</code>	http://swiftdoc.org/v2.2/type/Set/#func-union_
Set.unionInPlace	A										Inserts elements of a finite sequence into this <code>Set</code>.\n    Declaration    \n    <code>mutating func unionInPlace&lt;S : SequenceType where S.Generator.Element == Element&gt;(sequence: S)</code>	http://swiftdoc.org/v2.2/type/Set/#func-unioninplace_
Set.count	A										The number of members in the set.\n<strong>Complexity:</strong> O(1).\n    Declaration    \n    <code>var count: Int { get }</code>	http://swiftdoc.org/v2.2/type/Set/#var-count_-int
Set.debugDescription	A										A textual representation of <code>self</code>, suitable for debugging.\n    Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/Set/#var-debugdescription_-string
Set.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/Set/#var-description_-string
Set.endIndex	A										The collection's &quot;past the end&quot; position.\n<code>endIndex</code> is not a valid argument to <code>subscript</code>, and is always\nreachable from <code>startIndex</code> by zero or more applications of\n<code>successor()</code>.\n<strong>Complexity:</strong> Amortized O(1) if <code>self</code> does not wrap a bridged\n  <code>NSSet</code>, O(N) otherwise.\n    Declaration    \n    <code>var endIndex: SetIndex&lt;Element&gt; { get }</code>	http://swiftdoc.org/v2.2/type/Set/#var-endindex_-setindex-element
Set.hashValue	A										Declaration    \n    <code>var hashValue: Int { get }</code>	http://swiftdoc.org/v2.2/type/Set/#var-hashvalue_-int
Set.startIndex	A										The position of the first element in a non-empty set.\nThis is identical to <code>endIndex</code> in an empty set.\n<strong>Complexity:</strong> Amortized O(1) if <code>self</code> does not wrap a bridged\n  <code>NSSet</code>, O(N) otherwise.\n    Declaration    \n    <code>var startIndex: SetIndex&lt;Element&gt; { get }</code>	http://swiftdoc.org/v2.2/type/Set/#var-startindex_-setindex-element
exclusiveOr	R	Set.exclusiveOr										
exclusiveOrInPlace	R	Set.exclusiveOrInPlace										
generate	R	Set.generate										
insert	R	Set.insert										
intersect	R	Set.intersect										
intersectInPlace	R	Set.intersectInPlace										
isDisjointWith	R	Set.isDisjointWith										
isStrictSubsetOf	R	Set.isStrictSubsetOf										
isStrictSupersetOf	R	Set.isStrictSupersetOf										
isSubsetOf	R	Set.isSubsetOf										
isSupersetOf	R	Set.isSupersetOf										
popFirst	R	Set.popFirst										
remove	R	Set.remove										
removeAll	R	Set.removeAll										
removeAtIndex	R	Set.removeAtIndex										
removeFirst	R	Set.removeFirst										
subtract	R	Set.subtract										
subtractInPlace	R	Set.subtractInPlace										
union	R	Set.union										
unionInPlace	R	Set.unionInPlace										
count	R	Set.count										
debugDescription	R	Set.debugDescription										
description	R	Set.description										
endIndex	R	Set.endIndex										
hashValue	R	Set.hashValue										
startIndex	R	Set.startIndex										
ClosedInterval	A										<pre><code>struct ClosedInterval&lt;Bound : Comparable&gt;</code></pre>A closed <code>IntervalType</code>, which contains both its <code>start</code> and its\n<code>end</code>.  Cannot represent an empty interval.\n<strong><code>Bound</code>:</strong>  The type of the endpoints.	http://swiftdoc.org/v2.2/type/ClosedInterval/
ClosedInterval.clamp	A										Returns <code>intervalToClamp</code> clamped to <code>self</code>.\nThe bounds of the result, even if it is empty, are always limited to the bounds of\n<code>self</code>.\n    Declaration    \n    <code>func clamp(intervalToClamp: ClosedInterval&lt;Bound&gt;) -&gt; ClosedInterval&lt;Bound&gt;</code>	http://swiftdoc.org/v2.2/type/ClosedInterval/#func-clamp_
ClosedInterval.contains	A										Returns <code>true</code> iff the <code>Interval</code> contains <code>x</code>.\n    Declaration    \n    <code>func contains(x: Bound) -&gt; Bool</code>	http://swiftdoc.org/v2.2/type/ClosedInterval/#func-contains_
ClosedInterval.debugDescription	A										A textual representation of <code>self</code>, suitable for debugging.\n    Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/ClosedInterval/#var-debugdescription_-string
ClosedInterval.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/ClosedInterval/#var-description_-string
ClosedInterval.end	A										The <code>Interval</code>'s upper bound.\nInvariant: <code>start</code> &lt;= <code>end</code>.\n    Declaration    \n    <code>var end: Bound { get }</code>	http://swiftdoc.org/v2.2/type/ClosedInterval/#var-end_-bound
ClosedInterval.isEmpty	A										<code>true</code> iff the <code>Interval</code> is empty.  In the case of\n<code>ClosedInterval</code>, always returns <code>false</code>.\n    Declaration    \n    <code>var isEmpty: Bool { get }</code>	http://swiftdoc.org/v2.2/type/ClosedInterval/#var-isempty_-bool
ClosedInterval.start	A										The <code>Interval</code>'s lower bound.\nInvariant: <code>start</code> &lt;= <code>end</code>.\n    Declaration    \n    <code>var start: Bound { get }</code>	http://swiftdoc.org/v2.2/type/ClosedInterval/#var-start_-bound
clamp	R	ClosedInterval.clamp										
contains	R	ClosedInterval.contains										
debugDescription	R	ClosedInterval.debugDescription										
description	R	ClosedInterval.description										
end	R	ClosedInterval.end										
isEmpty	R	ClosedInterval.isEmpty										
start	R	ClosedInterval.start										
DictionaryGenerator	A										<pre><code>struct DictionaryGenerator&lt;Key : Hashable, Value&gt;</code></pre>A generator over the members of a <code>Dictionary&lt;Key, Value&gt;</code>.	http://swiftdoc.org/v2.2/type/DictionaryGenerator/
DictionaryGenerator.next	A										Advance to the next element and return it, or <code>nil</code> if no next\nelement exists.\n<strong>Requires:</strong> No preceding call to <code>self.next()</code> has returned <code>nil</code>.\n    Declaration    \n    <code>mutating func next() -&gt; (Key, Value)?</code>	http://swiftdoc.org/v2.2/type/DictionaryGenerator/#func-next
next	R	DictionaryGenerator.next										
SetAlgebraType	A										<pre><code>protocol SetAlgebraType</code></pre>A generalized set whose distinct elements are not necessarily\ndisjoint.\nIn a model of <code>SetAlgebraType</code>, some elements may subsume other\nelements, where\n<code>a</code> <strong>subsumes</strong> <code>b</code> iff <code>([a] as Self).isSupersetOf([b])</code>\nIn many models of <code>SetAlgebraType</code> such as <code>Set&lt;Element&gt;</code>, <code>a</code>\nsubsumes <code>b</code> if and only if <code>a == b</code>, but that is not always the\ncase.  For example, option sets typically do not satisfy that\nproperty.\nTwo elements are <strong>disjoint</strong> when neither one subsumes the other.\n<strong>See Also:</strong> <code>OptionSetType</code>.\nAxioms, where <code>S</code> conforms to <code>SetAlgebraType</code>, <code>x</code> and <code>y</code> are\nof type <code>S</code>, and <code>e</code> is of type <code>S.Element</code>:<code>S() == []</code><code>x.intersect(x) == x</code><code>x.intersect([]) == []</code><code>x.union(x) == x</code><code>x.union([]) == x</code><code>x.contains(e)</code> implies <code>x.union(y).contains(e)</code><code>x.union(y).contains(e)</code> implies <code>x.contains(e) || y.contains(e)</code><code>x.contains(e) &amp;&amp; y.contains(e)</code> iff <code>x.intersect(y).contains(e)</code><code>x.isSubsetOf(y)</code> iff <code>y.isSupersetOf(x)</code><code>x.isStrictSupersetOf(y)</code> iff <code>x.isSupersetOf(y) &amp;&amp; x != y</code><code>x.isStrictSubsetOf(y)</code> iff <code>x.isSubsetOf(y) &amp;&amp; x != y</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/
SetAlgebraType.element	A										Returns <code>true</code> iff <code>a</code> is disjoint with <code>b</code>.\nTwo elements are disjoint when neither one subsumes the other.\n<strong>See Also:</strong> <code>Self.element(, subsumes:_)</code>\n    Declaration    \n    <code>static func element(a: Self.Element, isDisjointWith b: Self.Element) -&gt; Bool</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#func-element_isdisjointwith_
SetAlgebraType.element	A										Returns <code>true</code> iff <code>a</code> subsumes <code>b</code>.\nEquivalent to <code>([a] as Self).isSupersetOf([b])</code>\n    Declaration    \n    <code>static func element(a: Self.Element, subsumes b: Self.Element) -&gt; Bool</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#func-element_subsumes_
SetAlgebraType.contains	A										Returns <code>true</code> if <code>self</code> contains <code>member</code>.\nEquivalent to <code>self.intersect([member]) == [member]</code>\n    Declaration    \n    <code>func contains(member: Self.Element) -&gt; Bool</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#func-contains_
SetAlgebraType.exclusiveOr	A										Returns the set of elements contained in <code>self</code> or in <code>other</code>,\nbut not in both <code>self</code> and <code>other</code>.\n    Declaration    \n    <code>func exclusiveOr(other: Self) -&gt; Self</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#func-exclusiveor_
SetAlgebraType.exclusiveOrInPlace	A										Replaces <code>self</code> with a set containing all elements contained in\neither <code>self</code> or <code>other</code>, but not both.\nEquivalent to replacing <code>self</code> with <code>self.exclusiveOr(other)</code>\n    Declaration    \n    <code>mutating func exclusiveOrInPlace(other: Self)</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#func-exclusiveorinplace_
SetAlgebraType.insert	A										If <code>member</code> is not already contained in <code>self</code>, inserts it.\nEquivalent to <code>self.unionInPlace([member])</code>\n<strong>Postcondition:</strong> <code>self.contains(member)</code>\n    Declaration    \n    <code>mutating func insert(member: Self.Element)</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#func-insert_
SetAlgebraType.intersect	A										Returns the set of elements contained in both <code>self</code> and <code>other</code>.\n    Declaration    \n    <code>func intersect(other: Self) -&gt; Self</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#func-intersect_
SetAlgebraType.intersectInPlace	A										Removes all elements of <code>self</code> that are not also present in\n<code>other</code>.\nEquivalent to replacing <code>self</code> with <code>self.intersect(other)</code>\n<strong>Postcondition:</strong> <code>self.isSubsetOf(other)</code>\n    Declaration    \n    <code>mutating func intersectInPlace(other: Self)</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#func-intersectinplace_
SetAlgebraType.isDisjointWith	A										Returns <code>true</code> iff <code>self.intersect(other).isEmpty</code>.\n    Declaration    \n    <code>func isDisjointWith(other: Self) -&gt; Bool</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#func-isdisjointwith_
SetAlgebraType.isSubsetOf	A										Returns <code>true</code> iff every element of <code>self</code> is contained in <code>other</code>.\n    Declaration    \n    <code>func isSubsetOf(other: Self) -&gt; Bool</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#func-issubsetof_
SetAlgebraType.isSupersetOf	A										Returns <code>true</code> iff every element of <code>other</code> is contained in <code>self</code>.\n    Declaration    \n    <code>func isSupersetOf(other: Self) -&gt; Bool</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#func-issupersetof_
SetAlgebraType.remove	A										If <code>member</code> is contained in <code>self</code>, removes and returns it.\nOtherwise, removes all elements subsumed by <code>member</code> and returns\n<code>nil</code>.\n<strong>Postcondition:</strong> <code>self.intersect([member]).isEmpty</code>\n    Declaration    \n    <code>mutating func remove(member: Self.Element) -&gt; Self.Element?</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#func-remove_
SetAlgebraType.subtract	A										Returns the set of elements contained in <code>self</code> but not in <code>other</code>.\n    Declaration    \n    <code>func subtract(other: Self) -&gt; Self</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#func-subtract_
SetAlgebraType.subtractInPlace	A										Removes all elements of <code>other</code> from <code>self</code>.\nEquivalent to replacing <code>self</code> with <code>self.subtract(other)</code>.\n    Declaration    \n    <code>mutating func subtractInPlace(other: Self)</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#func-subtractinplace_
SetAlgebraType.union	A										Returns the set of elements contained in <code>self</code>, in <code>other</code>, or in\nboth <code>self</code> and <code>other</code>.\n    Declaration    \n    <code>func union(other: Self) -&gt; Self</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#func-union_
SetAlgebraType.unionInPlace	A										Insert all elements of <code>other</code> into <code>self</code>.\nEquivalent to replacing <code>self</code> with <code>self.union(other)</code>.\n<strong>Postcondition:</strong> <code>self.isSupersetOf(other)</code>\n    Declaration    \n    <code>mutating func unionInPlace(other: Self)</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#func-unioninplace_
SetAlgebraType.element	A										Returns <code>true</code> iff <code>a</code> is disjoint with <code>b</code>.\nTwo elements are disjoint when neither one subsumes the other.\n<strong>See Also:</strong> <code>Self.element(, subsumes:_)</code>\n    Declaration    \n    <code>static func element(a: Self.Element, isDisjointWith b: Self.Element) -&gt; Bool</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#func--element_isdisjointwith_
SetAlgebraType.element	A										Returns <code>true</code> iff <code>a</code> subsumes <code>b</code>.\nEquivalent to <code>([a] as Self).isSupersetOf([b])</code>\n    Declaration    \n    <code>static func element(a: Self.Element, subsumes b: Self.Element) -&gt; Bool</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#func--element_subsumes_
SetAlgebraType.isDisjointWith	A										Returns <code>true</code> iff <code>self.intersect(other).isEmpty</code>.\n    Declaration    \n    <code>func isDisjointWith(other: Self) -&gt; Bool</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#func--isdisjointwith_
SetAlgebraType.isStrictSubsetOf	A										Returns <code>true</code> iff every element of <code>self</code> is contained in <code>other</code>\nand <code>other</code> contains an element that is not contained in <code>self</code>.\n    Declaration    \n    <code>func isStrictSubsetOf(other: Self) -&gt; Bool</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#func--isstrictsubsetof_
SetAlgebraType.isStrictSupersetOf	A										Returns <code>true</code> iff every element of <code>other</code> is contained in <code>self</code>\nand <code>self</code> contains an element that is not contained in <code>other</code>.\n    Declaration    \n    <code>func isStrictSupersetOf(other: Self) -&gt; Bool</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#func--isstrictsupersetof_
SetAlgebraType.isSubsetOf	A										Returns <code>true</code> iff every element of <code>self</code> is contained in <code>other</code>.\n    Declaration    \n    <code>func isSubsetOf(other: Self) -&gt; Bool</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#func--issubsetof_
SetAlgebraType.isSupersetOf	A										Returns <code>true</code> iff every element of <code>other</code> is contained in <code>self</code>.\n    Declaration    \n    <code>func isSupersetOf(other: Self) -&gt; Bool</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#func--issupersetof_
SetAlgebraType.subtract	A										Returns the set of elements contained in <code>self</code> but not in <code>other</code>.\n    Declaration    \n    <code>func subtract(other: Self) -&gt; Self</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#func--subtract_
SetAlgebraType.subtractInPlace	A										Removes all elements of <code>other</code> from <code>self</code>.\nEquivalent to replacing <code>self</code> with <code>self.subtract(other)</code>.\n    Declaration    \n    <code>mutating func subtractInPlace(other: Self)</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#func--subtractinplace_
SetAlgebraType.isEmpty	A										Returns <code>true</code> iff <code>self.contains(e)</code> is <code>false</code> for all <code>e</code>.\n    Declaration    \n    <code>var isEmpty: Bool { get }</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#var-isempty_-bool
SetAlgebraType.isEmpty	A										Returns <code>true</code> iff <code>self.contains(e)</code> is <code>false</code> for all <code>e</code>.\n    Declaration    \n    <code>var isEmpty: Bool { get }</code>	http://swiftdoc.org/v2.2/protocol/SetAlgebraType/#-var-isempty_-bool
element	R	SetAlgebraType.element										
element	R	SetAlgebraType.element										
contains	R	SetAlgebraType.contains										
exclusiveOr	R	SetAlgebraType.exclusiveOr										
exclusiveOrInPlace	R	SetAlgebraType.exclusiveOrInPlace										
insert	R	SetAlgebraType.insert										
intersect	R	SetAlgebraType.intersect										
intersectInPlace	R	SetAlgebraType.intersectInPlace										
isDisjointWith	R	SetAlgebraType.isDisjointWith										
isSubsetOf	R	SetAlgebraType.isSubsetOf										
isSupersetOf	R	SetAlgebraType.isSupersetOf										
remove	R	SetAlgebraType.remove										
subtract	R	SetAlgebraType.subtract										
subtractInPlace	R	SetAlgebraType.subtractInPlace										
union	R	SetAlgebraType.union										
unionInPlace	R	SetAlgebraType.unionInPlace										
element	R	SetAlgebraType.element										
element	R	SetAlgebraType.element										
isDisjointWith	R	SetAlgebraType.isDisjointWith										
isStrictSubsetOf	R	SetAlgebraType.isStrictSubsetOf										
isStrictSupersetOf	R	SetAlgebraType.isStrictSupersetOf										
isSubsetOf	R	SetAlgebraType.isSubsetOf										
isSupersetOf	R	SetAlgebraType.isSupersetOf										
subtract	R	SetAlgebraType.subtract										
subtractInPlace	R	SetAlgebraType.subtractInPlace										
isEmpty	R	SetAlgebraType.isEmpty										
isEmpty	R	SetAlgebraType.isEmpty										
Operator: -	A										<pre><code>infix operator - {\n    associativity left\n    precedence 140\n}</code></pre>	http://swiftdoc.org/v2.2/operator/mns/
FloatLiteralConvertible	A										<pre><code>protocol FloatLiteralConvertible</code></pre>Conforming types can be initialized with floating point literals.	http://swiftdoc.org/v2.2/protocol/FloatLiteralConvertible/
ForwardIndexType	A										<pre><code>protocol ForwardIndexType</code></pre>Represents a discrete value in a series, where a value's\nsuccessor, if any, is reachable by applying the value's\n<code>successor()</code> method.	http://swiftdoc.org/v2.2/protocol/ForwardIndexType/
ForwardIndexType.advancedBy	A										Returns the result of advancing <code>self</code> by <code>n</code> positions.\n<strong>Returns:</strong>\n  - If <code>n &gt; 0</code>, the result of applying <code>successor</code> to <code>self</code> <code>n</code> times.\n  - If <code>n &lt; 0</code>, the result of applying <code>predecessor</code> to <code>self</code> <code>-n</code> times.\n  - Otherwise, <code>self</code>.\n<strong>Requires:</strong> <code>n &gt;= 0</code> if only conforming to <code>ForwardIndexType</code>\n<strong>Complexity:</strong>\n  - O(1) if conforming to <code>RandomAccessIndexType</code>\n  - O(<code>abs(n)</code>) otherwise\n    Declaration    \n    <code>func advancedBy(n: Self.Distance) -&gt; Self</code>	http://swiftdoc.org/v2.2/protocol/ForwardIndexType/#func-advancedby_
ForwardIndexType.advancedBy	A										Returns the result of advancing <code>self</code> by <code>n</code> positions, or until it\nequals <code>limit</code>.\n<strong>Returns:</strong>\n  - If <code>n &gt; 0</code>, the result of applying <code>successor</code> to <code>self</code> <code>n</code> times\n    but not past <code>limit</code>.\n  - If <code>n &lt; 0</code>, the result of applying <code>predecessor</code> to <code>self</code> <code>-n</code> times\n    but not past <code>limit</code>.\n  - Otherwise, <code>self</code>.\n<strong>Requires:</strong> <code>n &gt;= 0</code> if only conforming to <code>ForwardIndexType</code>.\n<strong>Complexity:</strong>\n  - O(1) if conforming to <code>RandomAccessIndexType</code>\n  - O(<code>abs(n)</code>) otherwise\n    Declaration    \n    <code>func advancedBy(n: Self.Distance, limit: Self) -&gt; Self</code>	http://swiftdoc.org/v2.2/protocol/ForwardIndexType/#func-advancedby_limit_
ForwardIndexType.distanceTo	A										Measure the distance between <code>self</code> and <code>end</code>.\n<strong>Requires:</strong>\n  - <code>start</code> and <code>end</code> are part of the same sequence when conforming to\n    <code>RandomAccessSequenceType</code>.\n  - <code>end</code> is reachable from <code>self</code> by incrementation otherwise.\n<strong>Complexity:</strong>\n  - O(1) if conforming to <code>RandomAccessIndexType</code>\n  - O(<code>n</code>) otherwise, where <code>n</code> is the function's result.\n    Declaration    \n    <code>func distanceTo(end: Self) -&gt; Self.Distance</code>	http://swiftdoc.org/v2.2/protocol/ForwardIndexType/#func-distanceto_
ForwardIndexType.advancedBy	A										Declaration    \n    <code>func advancedBy(n: Self.Distance) -&gt; Self</code>	http://swiftdoc.org/v2.2/protocol/ForwardIndexType/#func--advancedby_
ForwardIndexType.advancedBy	A										Declaration    \n    <code>func advancedBy(n: Self.Distance, limit: Self) -&gt; Self</code>	http://swiftdoc.org/v2.2/protocol/ForwardIndexType/#func--advancedby_limit_
ForwardIndexType.distanceTo	A										Declaration    \n    <code>func distanceTo(end: Self) -&gt; Self.Distance</code>	http://swiftdoc.org/v2.2/protocol/ForwardIndexType/#func--distanceto_
advancedBy	R	ForwardIndexType.advancedBy										
advancedBy	R	ForwardIndexType.advancedBy										
distanceTo	R	ForwardIndexType.distanceTo										
advancedBy	R	ForwardIndexType.advancedBy										
advancedBy	R	ForwardIndexType.advancedBy										
distanceTo	R	ForwardIndexType.distanceTo										
StrideToGenerator	A										<pre><code>struct StrideToGenerator&lt;Element : Strideable&gt;</code></pre>A <code>GeneratorType</code> for <code>StrideTo&lt;Element&gt;</code>.	http://swiftdoc.org/v2.2/type/StrideToGenerator/
StrideToGenerator.next	A										Advance to the next element and return it, or <code>nil</code> if no next\nelement exists.\n    Declaration    \n    <code>mutating func next() -&gt; Element?</code>	http://swiftdoc.org/v2.2/type/StrideToGenerator/#func-next
next	R	StrideToGenerator.next										
String.UnicodeScalarView.Generator	A										<pre><code>struct String.UnicodeScalarView.Generator</code></pre>A type whose instances can produce the elements of this\nsequence, in order.	http://swiftdoc.org/v2.2/type/String.UnicodeScalarView.Generator/
String.UnicodeScalarView.Generator.next	A										Advance to the next element and return it, or <code>nil</code> if no next\nelement exists.\n<strong>Requires:</strong> No preceding call to <code>self.next()</code> has returned\n  <code>nil</code>.\n    Declaration    \n    <code>mutating func next() -&gt; UnicodeScalar?</code>	http://swiftdoc.org/v2.2/type/String.UnicodeScalarView.Generator/#func-next
Generator	R	String.UnicodeScalarView.Generator										
next	R	String.UnicodeScalarView.Generator.next										
UnicodeDecodingResult	A										<pre><code>enum UnicodeDecodingResult</code></pre>The result of one Unicode decoding step.\nA unicode scalar value, an indication that no more unicode scalars\nare available, or an indication of a decoding error.	http://swiftdoc.org/v2.2/type/UnicodeDecodingResult/
UnicodeDecodingResult.isEmptyInput	A										Returns <code>true</code> if <code>self</code> indicates no more unicode scalars are\navailable.\n    Declaration    \n    <code>func isEmptyInput() -&gt; Bool</code>	http://swiftdoc.org/v2.2/type/UnicodeDecodingResult/#func-isemptyinput
isEmptyInput	R	UnicodeDecodingResult.isEmptyInput										
Operator: &*	A										<pre><code>infix operator &amp;* {\n    associativity left\n    precedence 150\n}</code></pre>	http://swiftdoc.org/v2.2/operator/ampstar/
UTF32	A										<pre><code>struct UTF32</code></pre>A codec for UTF-32.	http://swiftdoc.org/v2.2/type/UTF32/
UTF32.encode	A										Encode a <code>UnicodeScalar</code> as a series of <code>CodeUnit</code>s by\ncalling <code>output</code> on each <code>CodeUnit</code>.\n    Declaration    \n    <code>static func encode(input: UnicodeScalar, output put: (CodeUnit) -&gt; Void)</code>	http://swiftdoc.org/v2.2/type/UTF32/#func-encode_output_
UTF32.decode	A										Start or continue decoding a UTF sequence.\nIn order to decode a code unit sequence completely, this function should\nbe called repeatedly until it returns <code>UnicodeDecodingResult.EmptyInput</code>.\nChecking that the generator was exhausted is not sufficient.  The decoder\ncan have an internal buffer that is pre-filled with data from the input\ngenerator.\nBecause of buffering, it is impossible to find the corresponding position\nin the generator for a given returned <code>UnicodeScalar</code> or an error.\n<strong><code>next</code>:</strong>  A generator of code units to be decoded.\n    Declaration    \n    <code>mutating func decode&lt;G : GeneratorType where G.Element == CodeUnit&gt;(inout input: G) -&gt; UnicodeDecodingResult</code>	http://swiftdoc.org/v2.2/type/UTF32/#func-decode-inout_
encode	R	UTF32.encode										
decode	R	UTF32.decode										
UInt64	A										<pre><code>struct UInt64</code></pre>A 64-bit unsigned integer value\ntype.	http://swiftdoc.org/v2.2/type/UInt64/
UInt64.addWithOverflow	A										Add <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func addWithOverflow(lhs: UInt64, _ rhs: UInt64) -&gt; (UInt64, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/UInt64/#func-addwithoverflow__
UInt64.divideWithOverflow	A										Divide <code>lhs</code> and <code>rhs</code>, returning\na result and a <code>Bool</code>\nthat is <code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func divideWithOverflow(lhs: UInt64, _ rhs: UInt64) -&gt; (UInt64, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/UInt64/#func-dividewithoverflow__
UInt64.multiplyWithOverflow	A										Multiply <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func multiplyWithOverflow(lhs: UInt64, _ rhs: UInt64) -&gt; (UInt64, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/UInt64/#func-multiplywithoverflow__
UInt64.remainderWithOverflow	A										Divide <code>lhs</code> and <code>rhs</code>, returning\nthe remainder and a <code>Bool</code>\nthat is <code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func remainderWithOverflow(lhs: UInt64, _ rhs: UInt64) -&gt; (UInt64, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/UInt64/#func-remainderwithoverflow__
UInt64.subtractWithOverflow	A										Subtract <code>lhs</code> and <code>rhs</code>, returning a result and a\n<code>Bool</code> that is <code>true</code> iff the operation caused an arithmetic\noverflow.\n    Declaration    \n    <code>static func subtractWithOverflow(lhs: UInt64, _ rhs: UInt64) -&gt; (UInt64, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/UInt64/#func-subtractwithoverflow__
UInt64.predecessor	A										Returns the previous consecutive value before <code>self</code>.\n<strong>Requires:</strong> The previous value is representable.\n    Declaration    \n    <code>func predecessor() -&gt; UInt64</code>	http://swiftdoc.org/v2.2/type/UInt64/#func-predecessor
UInt64.successor	A										Returns the next consecutive value after <code>self</code>.\n<strong>Requires:</strong> The next value is representable.\n    Declaration    \n    <code>func successor() -&gt; UInt64</code>	http://swiftdoc.org/v2.2/type/UInt64/#func-successor
UInt64.toIntMax	A										Explicitly convert to <code>IntMax</code>, trapping on overflow (except in -Ounchecked builds).\n    Declaration    \n    <code>func toIntMax() -&gt; IntMax</code>	http://swiftdoc.org/v2.2/type/UInt64/#func-tointmax
UInt64.toUIntMax	A										Represent this number using Swift's widest native unsigned\ninteger type.\n    Declaration    \n    <code>func toUIntMax() -&gt; UIntMax</code>	http://swiftdoc.org/v2.2/type/UInt64/#func-touintmax
UInt64.allZeros	A										The empty bitset of type UInt64.\n    Declaration    \n    <code>static var allZeros: UInt64 { get }</code>	http://swiftdoc.org/v2.2/type/UInt64/#static-var-allzeros_-uint64
UInt64.max	A										Declaration    \n    <code>static var max: UInt64 { get }</code>	http://swiftdoc.org/v2.2/type/UInt64/#static-var-max_-uint64
UInt64.min	A										Declaration    \n    <code>static var min: UInt64 { get }</code>	http://swiftdoc.org/v2.2/type/UInt64/#static-var-min_-uint64
UInt64.allZeros	A										The empty bitset of type UInt64.\n    Declaration    \n    <code>static var allZeros: UInt64 { get }</code>	http://swiftdoc.org/v2.2/type/UInt64/#static-var-allzeros_-uint64
UInt64.max	A										Declaration    \n    <code>static var max: UInt64 { get }</code>	http://swiftdoc.org/v2.2/type/UInt64/#static-var-max_-uint64
UInt64.min	A										Declaration    \n    <code>static var min: UInt64 { get }</code>	http://swiftdoc.org/v2.2/type/UInt64/#static-var-min_-uint64
UInt64.bigEndian	A										Returns the big-endian representation of the integer, changing the\nbyte order if necessary.\n    Declaration    \n    <code>var bigEndian: UInt64 { get }</code>	http://swiftdoc.org/v2.2/type/UInt64/#var-bigendian_-uint64
UInt64.byteSwapped	A										Returns the current integer with the byte order swapped.\n    Declaration    \n    <code>var byteSwapped: UInt64 { get }</code>	http://swiftdoc.org/v2.2/type/UInt64/#var-byteswapped_-uint64
UInt64.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/UInt64/#var-description_-string
UInt64.hashValue	A										The hash value.\n<strong>Axiom:</strong> <code>x == y</code> implies <code>x.hashValue == y.hashValue</code>.\n<strong>Note:</strong> The hash value is not guaranteed to be stable across\n  different invocations of the same program.  Do not persist the\n  hash value across program runs.\n    Declaration    \n    <code>var hashValue: Int { get }</code>	http://swiftdoc.org/v2.2/type/UInt64/#var-hashvalue_-int
UInt64.littleEndian	A										Returns the little-endian representation of the integer, changing the\nbyte order if necessary.\n    Declaration    \n    <code>var littleEndian: UInt64 { get }</code>	http://swiftdoc.org/v2.2/type/UInt64/#var-littleendian_-uint64
addWithOverflow	R	UInt64.addWithOverflow										
divideWithOverflow	R	UInt64.divideWithOverflow										
multiplyWithOverflow	R	UInt64.multiplyWithOverflow										
remainderWithOverflow	R	UInt64.remainderWithOverflow										
subtractWithOverflow	R	UInt64.subtractWithOverflow										
predecessor	R	UInt64.predecessor										
successor	R	UInt64.successor										
toIntMax	R	UInt64.toIntMax										
toUIntMax	R	UInt64.toUIntMax										
allZeros	R	UInt64.allZeros										
max	R	UInt64.max										
min	R	UInt64.min										
allZeros	R	UInt64.allZeros										
max	R	UInt64.max										
min	R	UInt64.min										
bigEndian	R	UInt64.bigEndian										
byteSwapped	R	UInt64.byteSwapped										
description	R	UInt64.description										
hashValue	R	UInt64.hashValue										
littleEndian	R	UInt64.littleEndian										
_NSEnumeratorType	A										<pre><code>protocol _NSEnumeratorType</code></pre>A shadow for the <code>NSEnumerator</code> class.	http://swiftdoc.org/v2.2/protocol/_NSEnumeratorType/
_NSEnumeratorType.nextObject	A										Declaration    \n    <code>func nextObject() -&gt; AnyObject?</code>	http://swiftdoc.org/v2.2/protocol/_NSEnumeratorType/#func-nextobject
nextObject	R	_NSEnumeratorType.nextObject										
_CollectionWrapperType	A										<pre><code>protocol _CollectionWrapperType</code></pre>	http://swiftdoc.org/v2.2/protocol/_CollectionWrapperType/
_ObjectiveCBridgeable	A										<pre><code>protocol _ObjectiveCBridgeable</code></pre>A Swift Array or Dictionary of types conforming to\n<code>_ObjectiveCBridgeable</code> can be passed to Objective-C as an NSArray or\nNSDictionary, respectively.  The elements of the resulting NSArray\nor NSDictionary will be the result of calling <code>_bridgeToObjectiveC</code>\non each element of the source container.	http://swiftdoc.org/v2.2/protocol/_ObjectiveCBridgeable/
_NSCopyingType	A										<pre><code>protocol _NSCopyingType</code></pre>A shadow for the <code>NSCopying</code> protocol.	http://swiftdoc.org/v2.2/protocol/_NSCopyingType/
_NSCopyingType.copyWithZone	A										Declaration    \n    <code>func copyWithZone(zone: _SwiftNSZone) -&gt; AnyObject</code>	http://swiftdoc.org/v2.2/protocol/_NSCopyingType/#func-copywithzone_
copyWithZone	R	_NSCopyingType.copyWithZone										
_Reflectable	A										<pre><code>protocol _Reflectable</code></pre>Customizes the result of <code>_reflect(x)</code>, where <code>x</code> is a conforming\ntype.	http://swiftdoc.org/v2.2/protocol/_Reflectable/
_NSArrayCoreType	A										<pre><code>protocol _NSArrayCoreType</code></pre>A shadow for the &quot;core operations&quot; of NSArray.\nCovers a set of operations everyone needs to implement in order to\nbe a useful <code>NSArray</code> subclass.	http://swiftdoc.org/v2.2/protocol/_NSArrayCoreType/
_NSArrayCoreType.getObjects	A										Declaration    \n    <code>func getObjects(_: UnsafeMutablePointer&lt;AnyObject&gt;, range: _SwiftNSRange)</code>	http://swiftdoc.org/v2.2/protocol/_NSArrayCoreType/#func-getobjects_range_
_NSArrayCoreType.objectAtIndex	A										Declaration    \n    <code>func objectAtIndex(index: Int) -&gt; AnyObject</code>	http://swiftdoc.org/v2.2/protocol/_NSArrayCoreType/#func-objectatindex_
_NSArrayCoreType.count	A										Declaration    \n    <code>var count: Int { get }</code>	http://swiftdoc.org/v2.2/protocol/_NSArrayCoreType/#var-count_-int
getObjects	R	_NSArrayCoreType.getObjects										
objectAtIndex	R	_NSArrayCoreType.objectAtIndex										
count	R	_NSArrayCoreType.count										
getVaList.getVaList	A										Returns a <code>CVaListPointer</code> built from <code>args</code> that's backed by\nautoreleased storage.\n<strong>Warning:</strong> This function is best avoided in favor of\n  <code>withVaList</code>, but occasionally (i.e. in a <code>class</code> initializer) you\n  may find that the language rules don't allow you to use\n<code>withVaList</code> as intended.\n    Declaration    \n    <code>func getVaList(args: [CVarArgType]) -&gt; CVaListPointer</code>	http://swiftdoc.org/v2.2/func/getVaList#func-getvalist_-cvarargtype
getVaList	R	getVaList.getVaList										
precondition.precondition	A										Check a necessary condition for making forward progress.\nUse this function to detect conditions that must prevent the\nprogram from proceeding even in shipping code.\nIn playgrounds and -Onone builds (the default for Xcode's Debug\nconfiguration): if <code>condition</code> evaluates to false, stop program\nexecution in a debuggable state after printing <code>message</code>.In -O builds (the default for Xcode's Release configuration):\nif <code>condition</code> evaluates to false, stop program execution.In -Ounchecked builds, <code>condition</code> is not evaluated, but the\noptimizer may assume that it would evaluate to <code>true</code>. Failure\nto satisfy that assumption in -Ounchecked builds is a serious\nprogramming error.\n    Declaration    \n    <code>func precondition(@autoclosure condition: () -&gt; Bool, @autoclosure _ message: () -&gt; String = default, file: StaticString = #file, line: UInt = #line)</code>	http://swiftdoc.org/v2.2/func/precondition#func-precondition_-bool_-string-file_-staticstring-line_-uint
precondition	R	precondition.precondition										
transcode.transcode	A										Translate <code>input</code>, in the given <code>InputEncoding</code>, into <code>output</code>, in\nthe given <code>OutputEncoding</code>.\n<strong><code>stopOnError</code>:</strong>  Causes encoding to stop when an encoding\n  error is detected in <code>input</code>, if <code>true</code>.  Otherwise, U+FFFD\n  replacement characters are inserted for each detected error.\n    Declaration    \n    <code>func transcode&lt;Input : GeneratorType, InputEncoding : UnicodeCodecType, OutputEncoding : UnicodeCodecType where InputEncoding.CodeUnit == Input.Element&gt;(inputEncoding: InputEncoding.Type, _ outputEncoding: OutputEncoding.Type, _ input: Input, _ output: (OutputEncoding.CodeUnit) -&gt; Void, stopOnError: Bool) -&gt; Bool</code>	http://swiftdoc.org/v2.2/func/transcode#func-transcode-input_-generatortype-inputencoding_-unicodecodectype-outputencoding_-unicodecodectype-where-inputencoding-codeunit-input-element_-inputencoding-type_-outputencoding-type_-input_-outputencoding-codeunit-void-stoponerror_-bool
transcode	R	transcode.transcode										
readLine.readLine	A										Returns <code>Character</code>s read from standard input through the end of the\ncurrent line or until EOF is reached, or <code>nil</code> if EOF has already been\nreached.\nIf <code>stripNewline</code> is <code>true</code>, newline characters and character\ncombinations will be stripped from the result.  This is the default.\nStandard input is interpreted as <code>UTF-8</code>.  Invalid bytes\nwill be replaced by Unicode replacement characters.\n    Declaration    \n    <code>func readLine(stripNewline stripNewline: Bool = default) -&gt; String?</code>	http://swiftdoc.org/v2.2/func/readLine#func-readline-stripnewline_-bool
readLine	R	readLine.readLine										
unsafeDowncast.unsafeDowncast	A										<strong>returns:</strong> <code>x as T</code>.\n<strong>Requires:</strong> <code>x is T</code>.  In particular, in -O builds, no test is\n  performed to ensure that <code>x</code> actually has dynamic type <code>T</code>.\n<strong>Warning:</strong> Trades safety for performance.  Use <code>unsafeDowncast</code>\n  only when <code>x as T</code> has proven to be a performance problem and you\n  are confident that, always, <code>x is T</code>.  It is better than an\n  <code>unsafeBitCast</code> because it's more restrictive, and because\n  checking is still performed in debug builds.\n    Declaration    \n    <code>func unsafeDowncast&lt;T : AnyObject&gt;(x: AnyObject) -&gt; T</code>	http://swiftdoc.org/v2.2/func/unsafeDowncast#func-unsafedowncast-t_-anyobject_-anyobject
unsafeDowncast	R	unsafeDowncast.unsafeDowncast										
min.min	A										Returns the lesser of <code>x</code> and <code>y</code>.\nIf <code>x == y</code>, returns <code>x</code>.\n    Declaration    \n    <code>func min&lt;T : Comparable&gt;(x: T, _ y: T) -&gt; T</code>	http://swiftdoc.org/v2.2/func/min#func-min-t_-comparable_-t_-t
min.min	A										Returns the least argument passed.\nIf there are multiple equal least arguments, returns the first one.\n    Declaration    \n    <code>func min&lt;T : Comparable&gt;(x: T, _ y: T, _ z: T, _ rest: T...) -&gt; T</code>	http://swiftdoc.org/v2.2/func/min#func-min-t_-comparable_-t_-t_-t_-t
min	R	min.min										
min	R	min.min										
numericCast.numericCast	A										Convert <code>x</code> to type <code>U</code>, trapping on overflow in -Onone and -O\nbuilds.\nTypically used to do conversion to any contextually-deduced\ninteger type:\n<pre><code>func f(x: Int32) {}\nfunc g(x: Int64) { f(numericCast(x)) }</code></pre>\n    Declaration    \n    <code>func numericCast&lt;T : _SignedIntegerType, U : _SignedIntegerType&gt;(x: T) -&gt; U</code>	http://swiftdoc.org/v2.2/func/numericCast#func-numericcast-t_-signedintegertype-u_-signedintegertype_-t
numericCast.numericCast	A										Convert <code>x</code> to type <code>U</code>, trapping on overflow in -Onone and -O\nbuilds.\nTypically used to do conversion to any contextually-deduced\ninteger type:\n<pre><code>func f(x: UInt32) {}\nfunc g(x: Int64) { f(numericCast(x)) }</code></pre>\n    Declaration    \n    <code>func numericCast&lt;T : _SignedIntegerType, U : UnsignedIntegerType&gt;(x: T) -&gt; U</code>	http://swiftdoc.org/v2.2/func/numericCast#func-numericcast-t_-signedintegertype-u_-unsignedintegertype_-t
numericCast.numericCast	A										Convert <code>x</code> to type <code>U</code>, trapping on overflow in -Onone and -O\nbuilds.\nTypically used to do conversion to any contextually-deduced\ninteger type:\n<pre><code>func f(x: Int32) {}\nfunc g(x: UInt64) { f(numericCast(x)) }</code></pre>\n    Declaration    \n    <code>func numericCast&lt;T : UnsignedIntegerType, U : _SignedIntegerType&gt;(x: T) -&gt; U</code>	http://swiftdoc.org/v2.2/func/numericCast#func-numericcast-t_-unsignedintegertype-u_-signedintegertype_-t
numericCast.numericCast	A										Convert <code>x</code> to type <code>U</code>, trapping on overflow in -Onone and -O\nbuilds.\nTypically used to do conversion to any contextually-deduced\ninteger type:\n<pre><code>func f(x: UInt32) {}\nfunc g(x: UInt64) { f(numericCast(x)) }</code></pre>\n    Declaration    \n    <code>func numericCast&lt;T : UnsignedIntegerType, U : UnsignedIntegerType&gt;(x: T) -&gt; U</code>	http://swiftdoc.org/v2.2/func/numericCast#func-numericcast-t_-unsignedintegertype-u_-unsignedintegertype_-t
numericCast	R	numericCast.numericCast										
numericCast	R	numericCast.numericCast										
numericCast	R	numericCast.numericCast										
numericCast	R	numericCast.numericCast										
preconditionFailure.preconditionFailure	A										Indicate that a precondition was violated.\nUse this function to stop the program when control flow can only\nreach the call if your API was improperly used.\nIn playgrounds and -Onone builds (the default for Xcode's Debug\nconfiguration), stop program execution in a debuggable state\nafter printing <code>message</code>.In -O builds (the default for Xcode's Release configuration),\nstop program execution.In -Ounchecked builds, the optimizer may assume that this\nfunction will never be called. Failure to satisfy that assumption\nis a serious programming error.\n    Declaration    \n    <code>@noreturn  func preconditionFailure(@autoclosure message: () -&gt; String = default, file: StaticString = #file, line: UInt = #line)</code>	http://swiftdoc.org/v2.2/func/preconditionFailure#func-preconditionfailure_-string-file_-staticstring-line_-uint
preconditionFailure	R	preconditionFailure.preconditionFailure										
_NSSetCoreType	A										<pre><code>protocol _NSSetCoreType</code></pre>A shadow for the &quot;core operations&quot; of NSSet.\nCovers a set of operations everyone needs to implement in order to\nbe a useful <code>NSSet</code> subclass.	http://swiftdoc.org/v2.2/protocol/_NSSetCoreType/
_NSSetCoreType.member	A										Declaration    \n    <code>func member(object: AnyObject) -&gt; AnyObject?</code>	http://swiftdoc.org/v2.2/protocol/_NSSetCoreType/#func-member_
_NSSetCoreType.objectEnumerator	A										Declaration    \n    <code>func objectEnumerator() -&gt; _NSEnumeratorType</code>	http://swiftdoc.org/v2.2/protocol/_NSSetCoreType/#func-objectenumerator
_NSSetCoreType.count	A										Declaration    \n    <code>var count: Int { get }</code>	http://swiftdoc.org/v2.2/protocol/_NSSetCoreType/#var-count_-int
member	R	_NSSetCoreType.member										
objectEnumerator	R	_NSSetCoreType.objectEnumerator										
count	R	_NSSetCoreType.count										
_NSStringCoreType	A										<pre><code>protocol _NSStringCoreType</code></pre>	http://swiftdoc.org/v2.2/protocol/_NSStringCoreType/
_NSStringCoreType.characterAtIndex	A										Declaration    \n    <code>func characterAtIndex(index: Int) -&gt; UInt16</code>	http://swiftdoc.org/v2.2/protocol/_NSStringCoreType/#func-characteratindex_
_NSStringCoreType.length	A										Declaration    \n    <code>func length() -&gt; Int</code>	http://swiftdoc.org/v2.2/protocol/_NSStringCoreType/#func-length
characterAtIndex	R	_NSStringCoreType.characterAtIndex										
length	R	_NSStringCoreType.length										
_NSSetType	A										<pre><code>protocol _NSSetType</code></pre>A shadow for the API of NSSet we will use in the core\nstdlib.\n<code>NSSet</code> operations, in addition to those on\n<code>_NSSetCoreType</code>, that we need to use from the core stdlib.\nDistinct from <code>_NSSetCoreType</code> because we don't want to be\nforced to implement operations that <code>NSSet</code> already\nsupplies.	http://swiftdoc.org/v2.2/protocol/_NSSetType/
_Incrementable	A										<pre><code>protocol _Incrementable</code></pre>This protocol is an implementation detail of <code>ForwardIndexType</code>; do\nnot use it directly.\nIts requirements are inherited by <code>ForwardIndexType</code> and thus must\nbe satisfied by types conforming to that protocol.	http://swiftdoc.org/v2.2/protocol/_Incrementable/
_Incrementable.successor	A										Returns the next consecutive value in a discrete sequence of\n<code>Self</code> values.\n<strong>Requires:</strong> <code>self</code> has a well-defined successor.\n    Declaration    \n    <code>func successor() -&gt; Self</code>	http://swiftdoc.org/v2.2/protocol/_Incrementable/#func-successor
successor	R	_Incrementable.successor										
IntegerArithmeticType	A										<pre><code>protocol IntegerArithmeticType</code></pre>The common requirements for types that support integer arithmetic.	http://swiftdoc.org/v2.2/protocol/IntegerArithmeticType/
IntegerArithmeticType.toIntMax	A										Explicitly convert to <code>IntMax</code>, trapping on overflow (except in\n-Ounchecked builds).\n    Declaration    \n    <code>func toIntMax() -&gt; IntMax</code>	http://swiftdoc.org/v2.2/protocol/IntegerArithmeticType/#func-tointmax
toIntMax	R	IntegerArithmeticType.toIntMax										
Unmanaged	A										<pre><code>struct Unmanaged&lt;Instance : AnyObject&gt;</code></pre>A type for propagating an unmanaged object reference.\nWhen you use this type, you become partially responsible for\nkeeping the object alive.	http://swiftdoc.org/v2.2/type/Unmanaged/
Unmanaged.fromOpaque	A										Unsafely turn an opaque C pointer into an unmanaged\nclass reference.\nThis operation does not change reference counts.\n<pre><code>let str: CFString = Unmanaged.fromOpaque(ptr).takeUnretainedValue()</code></pre>\n    Declaration    \n    <code>static func fromOpaque(value: COpaquePointer) -&gt; Unmanaged&lt;Instance&gt;</code>	http://swiftdoc.org/v2.2/type/Unmanaged/#func-fromopaque_
Unmanaged.passRetained	A										Create an unmanaged reference with an unbalanced retain.\nThe object will leak if nothing eventually balances the retain.\nThis is useful when passing an object to an API which Swift\ndoes not know the ownership rules for, but you know that the\nAPI expects you to pass the object at +1.\n    Declaration    \n    <code>static func passRetained(value: Instance) -&gt; Unmanaged&lt;Instance&gt;</code>	http://swiftdoc.org/v2.2/type/Unmanaged/#func-passretained_
Unmanaged.passUnretained	A										Create an unmanaged reference without performing an unbalanced\nretain.\nThis is useful when passing a reference to an API which Swift\ndoes not know the ownership rules for, but you know that the\nAPI expects you to pass the object at +0.\n<pre><code>CFArraySetValueAtIndex(.passUnretained(array), i,\n                       .passUnretained(object))</code></pre>\n    Declaration    \n    <code>static func passUnretained(value: Instance) -&gt; Unmanaged&lt;Instance&gt;</code>	http://swiftdoc.org/v2.2/type/Unmanaged/#func-passunretained_
Unmanaged.autorelease	A										Perform an unbalanced autorelease of the object.\nDeprecated: it will be removed in Swift 3.\n    Declaration    \n    <code>func autorelease() -&gt; Unmanaged&lt;Instance&gt;</code>	http://swiftdoc.org/v2.2/type/Unmanaged/#func-autorelease
Unmanaged.release	A										Perform an unbalanced release of the object.\n    Declaration    \n    <code>func release()</code>	http://swiftdoc.org/v2.2/type/Unmanaged/#func-release
Unmanaged.retain	A										Perform an unbalanced retain of the object.\nDeprecated: it will be removed in Swift 3.\n    Declaration    \n    <code>func retain() -&gt; Unmanaged&lt;Instance&gt;</code>	http://swiftdoc.org/v2.2/type/Unmanaged/#func-retain
Unmanaged.takeRetainedValue	A										Get the value of this unmanaged reference as a managed\nreference and consume an unbalanced retain of it.\nThis is useful when a function returns an unmanaged reference\nand you know that you're responsible for releasing the result.\n    Declaration    \n    <code>func takeRetainedValue() -&gt; Instance</code>	http://swiftdoc.org/v2.2/type/Unmanaged/#func-takeretainedvalue
Unmanaged.takeUnretainedValue	A										Get the value of this unmanaged reference as a managed\nreference without consuming an unbalanced retain of it.\nThis is useful when a function returns an unmanaged reference\nand you know that you're not responsible for releasing the result.\n    Declaration    \n    <code>func takeUnretainedValue() -&gt; Instance</code>	http://swiftdoc.org/v2.2/type/Unmanaged/#func-takeunretainedvalue
Unmanaged.toOpaque	A										Unsafely turn an unmanaged class reference into an opaque\nC pointer.\nThis operation does not change reference counts.\n<pre><code>let str: CFString = Unmanaged.fromOpaque(ptr).takeUnretainedValue()</code></pre>\n    Declaration    \n    <code>func toOpaque() -&gt; COpaquePointer</code>	http://swiftdoc.org/v2.2/type/Unmanaged/#func-toopaque
fromOpaque	R	Unmanaged.fromOpaque										
passRetained	R	Unmanaged.passRetained										
passUnretained	R	Unmanaged.passUnretained										
autorelease	R	Unmanaged.autorelease										
release	R	Unmanaged.release										
retain	R	Unmanaged.retain										
takeRetainedValue	R	Unmanaged.takeRetainedValue										
takeUnretainedValue	R	Unmanaged.takeUnretainedValue										
toOpaque	R	Unmanaged.toOpaque										
Bit	A										<pre><code>enum Bit</code></pre>A <code>RandomAccessIndexType</code> that has two possible values.  Used as\nthe <code>Index</code> type for <code>CollectionOfOne&lt;T&gt;</code>.\nDeprecated: Bit is deprecated as of Swift 3. Use Int instead..	http://swiftdoc.org/v2.2/type/Bit/
Bit.addWithOverflow	A										Add <code>lhs</code> and <code>rhs</code>, returning a result and a <code>Bool</code> that is\n<code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func addWithOverflow(lhs: Bit, _ rhs: Bit) -&gt; (Bit, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Bit/#func-addwithoverflow__
Bit.divideWithOverflow	A										Divide <code>lhs</code> and <code>rhs</code>, returning a result and a <code>Bool</code> that is\n<code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func divideWithOverflow(lhs: Bit, _ rhs: Bit) -&gt; (Bit, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Bit/#func-dividewithoverflow__
Bit.multiplyWithOverflow	A										Multiply <code>lhs</code> and <code>rhs</code>, returning a result and a <code>Bool</code> that is\n<code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func multiplyWithOverflow(lhs: Bit, _ rhs: Bit) -&gt; (Bit, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Bit/#func-multiplywithoverflow__
Bit.remainderWithOverflow	A										Divide <code>lhs</code> and <code>rhs</code>, returning the remainder and a <code>Bool</code> that is\n<code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func remainderWithOverflow(lhs: Bit, _ rhs: Bit) -&gt; (Bit, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Bit/#func-remainderwithoverflow__
Bit.subtractWithOverflow	A										Subtract <code>lhs</code> and <code>rhs</code>, returning a result and a <code>Bool</code> that is\n<code>true</code> iff the operation caused an arithmetic overflow.\n    Declaration    \n    <code>static func subtractWithOverflow(lhs: Bit, _ rhs: Bit) -&gt; (Bit, overflow: Bool)</code>	http://swiftdoc.org/v2.2/type/Bit/#func-subtractwithoverflow__
Bit.predecessor	A										Returns the previous consecutive value before <code>self</code>.\n<strong>Requires:</strong> <code>self != .Zero</code>.\n    Declaration    \n    <code>func predecessor() -&gt; Bit</code>	http://swiftdoc.org/v2.2/type/Bit/#func-predecessor
Bit.successor	A										Returns the next consecutive value after <code>self</code>.\n<strong>Requires:</strong> <code>self == .Zero</code>.\n    Declaration    \n    <code>func successor() -&gt; Bit</code>	http://swiftdoc.org/v2.2/type/Bit/#func-successor
Bit.toIntMax	A										Represent this number using Swift's widest native signed integer\ntype.\n    Declaration    \n    <code>func toIntMax() -&gt; IntMax</code>	http://swiftdoc.org/v2.2/type/Bit/#func-tointmax
addWithOverflow	R	Bit.addWithOverflow										
divideWithOverflow	R	Bit.divideWithOverflow										
multiplyWithOverflow	R	Bit.multiplyWithOverflow										
remainderWithOverflow	R	Bit.remainderWithOverflow										
subtractWithOverflow	R	Bit.subtractWithOverflow										
predecessor	R	Bit.predecessor										
successor	R	Bit.successor										
toIntMax	R	Bit.toIntMax										
CustomPlaygroundQuickLookable	A										<pre><code>protocol CustomPlaygroundQuickLookable</code></pre>A type that explicitly supplies its own PlaygroundQuickLook.\nInstances of any type can be <code>PlaygroundQuickLook(reflect:)</code>'ed\nupon, but if you are not satisfied with the <code>PlaygroundQuickLook</code>\nsupplied for your type by default, you can make it conform to\n<code>CustomPlaygroundQuickLookable</code> and return a custom\n<code>PlaygroundQuickLook</code>.	http://swiftdoc.org/v2.2/protocol/CustomPlaygroundQuickLookable/
CustomPlaygroundQuickLookable.customPlaygroundQuickLook	A										Returns the <code>PlaygroundQuickLook</code> for <code>self</code>.\n<strong>Note:</strong> If <code>Self</code> has value semantics, the <code>PlaygroundQuickLook</code> should\n  be unaffected by subsequent mutations of <code>self</code>.\n    Declaration    \n    <code>func customPlaygroundQuickLook() -&gt; PlaygroundQuickLook</code>	http://swiftdoc.org/v2.2/protocol/CustomPlaygroundQuickLookable/#func-customplaygroundquicklook
customPlaygroundQuickLook	R	CustomPlaygroundQuickLookable.customPlaygroundQuickLook										
UnicodeCodecType	A										<pre><code>protocol UnicodeCodecType</code></pre>A Unicode encoding scheme.\nConsists of an underlying code unit and functions to\ntranslate between sequences of these code units and unicode scalar values.	http://swiftdoc.org/v2.2/protocol/UnicodeCodecType/
UnicodeCodecType.encode	A										Encode a <code>UnicodeScalar</code> as a series of <code>CodeUnit</code>s by\ncalling <code>output</code> on each <code>CodeUnit</code>.\n    Declaration    \n    <code>static func encode(input: UnicodeScalar, output: (Self.CodeUnit) -&gt; Void)</code>	http://swiftdoc.org/v2.2/protocol/UnicodeCodecType/#func-encode_output_
UnicodeCodecType.decode	A										Start or continue decoding a UTF sequence.\nIn order to decode a code unit sequence completely, this function should\nbe called repeatedly until it returns <code>UnicodeDecodingResult.EmptyInput</code>.\nChecking that the generator was exhausted is not sufficient.  The decoder\ncan have an internal buffer that is pre-filled with data from the input\ngenerator.\nBecause of buffering, it is impossible to find the corresponding position\nin the generator for a given returned <code>UnicodeScalar</code> or an error.\n<strong><code>next</code>:</strong>  A generator of code units to be decoded.\n    Declaration    \n    <code>mutating func decode&lt;G : GeneratorType where G.Element == CodeUnit&gt;(inout next: G) -&gt; UnicodeDecodingResult</code>	http://swiftdoc.org/v2.2/protocol/UnicodeCodecType/#func-decode-inout_
encode	R	UnicodeCodecType.encode										
decode	R	UnicodeCodecType.decode										
UTF8	A										<pre><code>struct UTF8</code></pre>A codec for UTF-8.	http://swiftdoc.org/v2.2/type/UTF8/
UTF8.encode	A										Encode a <code>UnicodeScalar</code> as a series of <code>CodeUnit</code>s by\ncalling <code>output</code> on each <code>CodeUnit</code>.\n    Declaration    \n    <code>static func encode(input: UnicodeScalar, output put: (CodeUnit) -&gt; Void)</code>	http://swiftdoc.org/v2.2/type/UTF8/#func-encode_output_
UTF8.isContinuation	A										Returns <code>true</code> if <code>byte</code> is a continuation byte of the form\n<code>0b10xxxxxx</code>.\n    Declaration    \n    <code>static func isContinuation(byte: CodeUnit) -&gt; Bool</code>	http://swiftdoc.org/v2.2/type/UTF8/#func-iscontinuation_
UTF8.decode	A										Start or continue decoding a UTF sequence.\nIn order to decode a code unit sequence completely, this function should\nbe called repeatedly until it returns <code>UnicodeDecodingResult.EmptyInput</code>.\nChecking that the generator was exhausted is not sufficient.  The decoder\ncan have an internal buffer that is pre-filled with data from the input\ngenerator.\nBecause of buffering, it is impossible to find the corresponding position\nin the generator for a given returned <code>UnicodeScalar</code> or an error.\n<strong><code>next</code>:</strong>  A generator of code units to be decoded.\n    Declaration    \n    <code>mutating func decode&lt;G : GeneratorType where G.Element == CodeUnit&gt;(inout next: G) -&gt; UnicodeDecodingResult</code>	http://swiftdoc.org/v2.2/type/UTF8/#func-decode-inout_
encode	R	UTF8.encode										
isContinuation	R	UTF8.isContinuation										
decode	R	UTF8.decode										
HalfOpenInterval	A										<pre><code>struct HalfOpenInterval&lt;Bound : Comparable&gt;</code></pre>A half-open <code>IntervalType</code>, which contains its <code>start</code> but not its\n<code>end</code>.  Can represent an empty interval.\n<strong><code>Bound</code>:</strong>  The type of the endpoints.	http://swiftdoc.org/v2.2/type/HalfOpenInterval/
HalfOpenInterval.clamp	A										Returns <code>intervalToClamp</code> clamped to <code>self</code>.\nThe bounds of the result, even if it is empty, are always limited to the bounds of\n<code>self</code>.\n    Declaration    \n    <code>func clamp(intervalToClamp: HalfOpenInterval&lt;Bound&gt;) -&gt; HalfOpenInterval&lt;Bound&gt;</code>	http://swiftdoc.org/v2.2/type/HalfOpenInterval/#func-clamp_
HalfOpenInterval.contains	A										Returns <code>true</code> iff the <code>Interval</code> contains <code>x</code>.\n    Declaration    \n    <code>func contains(x: Bound) -&gt; Bool</code>	http://swiftdoc.org/v2.2/type/HalfOpenInterval/#func-contains_
HalfOpenInterval.debugDescription	A										A textual representation of <code>self</code>, suitable for debugging.\n    Declaration    \n    <code>var debugDescription: String { get }</code>	http://swiftdoc.org/v2.2/type/HalfOpenInterval/#var-debugdescription_-string
HalfOpenInterval.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/type/HalfOpenInterval/#var-description_-string
HalfOpenInterval.end	A										The <code>Interval</code>'s upper bound.\nInvariant: <code>start</code> &lt;= <code>end</code>.\n    Declaration    \n    <code>var end: Bound { get }</code>	http://swiftdoc.org/v2.2/type/HalfOpenInterval/#var-end_-bound
HalfOpenInterval.isEmpty	A										<code>true</code> iff the <code>Interval</code> is empty.\n    Declaration    \n    <code>var isEmpty: Bool { get }</code>	http://swiftdoc.org/v2.2/type/HalfOpenInterval/#var-isempty_-bool
HalfOpenInterval.start	A										The <code>Interval</code>'s lower bound.\nInvariant: <code>start</code> &lt;= <code>end</code>.\n    Declaration    \n    <code>var start: Bound { get }</code>	http://swiftdoc.org/v2.2/type/HalfOpenInterval/#var-start_-bound
clamp	R	HalfOpenInterval.clamp										
contains	R	HalfOpenInterval.contains										
debugDescription	R	HalfOpenInterval.debugDescription										
description	R	HalfOpenInterval.description										
end	R	HalfOpenInterval.end										
isEmpty	R	HalfOpenInterval.isEmpty										
start	R	HalfOpenInterval.start										
LazySequenceType	A										<pre><code>protocol LazySequenceType</code></pre>A sequence on which normally-eager operations such as <code>map</code> and\n<code>filter</code> are implemented lazily.\nLazy sequences can be used to avoid needless storage allocation\nand computation, because they use an underlying sequence for\nstorage and compute their elements on demand.  For example,\n<pre><code>[1, 2, 3].lazy.map { $0 * 2 }</code></pre>\nis a sequence containing { <code>2</code>, <code>4</code>, <code>6</code> }.  Each time an element\nof the lazy sequence is accessed, an element of the underlying\narray is accessed and transformed by the closure.\nSequence operations taking closure arguments, such as <code>map</code> and\n<code>filter</code>, are normally eager: they use the closure immediately and\nreturn a new array.  Using the <code>lazy</code> property gives the standard\nlibrary explicit permission to store the closure and the sequence\nin the result, and defer computation until it is needed.\nTo add new lazy sequence operations, extend this protocol with\nmethods that return lazy wrappers that are themselves\n<code>LazySequenceType</code>s.  For example, given an eager <code>scan</code>\nmethod defined as follows\n<pre><code>extension SequenceType {\n  /// Returns an array containing the results of\n  ///\n  ///   p.reduce(initial, combine: combine)\n  ///\n  /// for each prefix `p` of `self`, in order from shortest to\n  /// longest.  For example:\n  ///\n  ///     (1..&lt;6).scan(0, combine: +) // [0, 1, 3, 6, 10, 15]\n  ///\n  /// **Complexity:** O(N)\n  func scan&lt;ResultElement&gt;(\n    initial: ResultElement,\n    @noescape combine: (ResultElement, Generator.Element) -&gt; ResultElement\n  ) -&gt; [ResultElement] {\n    var result = [initial]\n    for x in self {\n      result.append(combine(result.last!, x))\n    }\n    return result\n  }\n}</code></pre>\nwe can build a sequence that lazily computes the elements in the\nresult of <code>scan</code>:\n<pre><code>struct LazyScanGenerator&lt;Base: GeneratorType, ResultElement&gt;\n  : GeneratorType {\n  mutating func next() -&gt; ResultElement? {\n    return nextElement.map { result in\n      nextElement = base.next().map { combine(result, $0) }\n      return result\n    }\n  }\n  private var nextElement: ResultElement? // The next result of next().\n  private var base: Base                  // The underlying generator.\n  private let combine: (ResultElement, Base.Element) -&gt; ResultElement\n}\nstruct LazyScanSequence&lt;Base: SequenceType, ResultElement&gt;\n  : LazySequenceType // Chained operations on self are lazy, too\n{\n  func generate() -&gt; LazyScanGenerator&lt;Base.Generator, ResultElement&gt; {\n    return LazyScanGenerator(\n      nextElement: initial, base: base.generate(), combine: combine)\n  }\n  private let initial: ResultElement\n  private let base: Base\n  private let combine:\n    (ResultElement, Base.Generator.Element) -&gt; ResultElement\n}</code></pre>\nand finally, we can give all lazy sequences a lazy <code>scan</code> method:\n<pre><code>extension LazySequenceType {\n  /// Returns a sequence containing the results of\n  ///\n  ///   p.reduce(initial, combine: combine)\n  ///\n  /// for each prefix `p` of `self`, in order from shortest to\n  /// longest.  For example:\n  ///\n  ///     Array((1..&lt;6).lazy.scan(0, combine: +)) // [0, 1, 3, 6, 10, 15]\n  ///\n  /// **Complexity:** O(1)\n  func scan&lt;ResultElement&gt;(\n    initial: ResultElement,\n    combine: (ResultElement, Generator.Element) -&gt; ResultElement\n  ) -&gt; LazyScanSequence&lt;Self, ResultElement&gt; {\n    return LazyScanSequence(\n      initial: initial, base: self, combine: combine)\n  }\n}</code></pre>\n<strong>See Also:</strong> <code>LazySequence</code>, <code>LazyCollectionType</code>, <code>LazyCollection</code>\n<strong>Note:</strong> The explicit permission to implement further operations\n  lazily applies only in contexts where the sequence is statically\n  known to conform to <code>LazySequenceType</code>.  Thus, side-effects such\n  as the accumulation of <code>result</code> below are never unexpectedly\n  dropped or deferred:\n<pre><code>  extension SequenceType where Generator.Element == Int {\n    func sum() -&gt; Int {\n      var result = 0\n      _ = self.map { result += $0 }\n      return result\n    }\n  }</code></pre>\n  [We don't recommend that you use <code>map</code> this way, because it\n  creates and discards an array. <code>sum</code> would be better implemented\n  using <code>reduce</code>].	http://swiftdoc.org/v2.2/protocol/LazySequenceType/
LazySequenceType.flatMap	A										Returns the concatenated results of mapping <code>transform</code> over\n<code>self</code>.  Equivalent to \n<pre><code>self.map(transform).flatten()</code></pre>\n<strong>Complexity:</strong> O(1)\n    Declaration    \n    <code>func flatMap&lt;Intermediate : SequenceType&gt;(transform: (Self.Elements.Generator.Element) -&gt; Intermediate) -&gt; LazySequence&lt;FlattenSequence&lt;LazyMapSequence&lt;Self.Elements, Intermediate&gt;&gt;&gt;</code>	http://swiftdoc.org/v2.2/protocol/LazySequenceType/#func--flatmap_
LazySequenceType.flatten	A										A concatenation of the elements of <code>self</code>.\n    Declaration    \n    <code>func flatten() -&gt; LazySequence&lt;FlattenSequence&lt;Self.Elements&gt;&gt;</code>	http://swiftdoc.org/v2.2/protocol/LazySequenceType/#func-elements-generator-element-generator-element-generator-element_-sequencetype-flatten
LazySequenceType.array	A										Deprecated: Will be removed in Swift 3.\n    Declaration    \n    <code>var array: [Self.Generator.Element] { get }</code>	http://swiftdoc.org/v2.2/protocol/LazySequenceType/#var-array_-self-generator-element
LazySequenceType.elements	A										A sequence containing the same elements as this one, possibly with\na simpler type.\nWhen implementing lazy operations, wrapping <code>elements</code> instead\nof <code>self</code> can prevent result types from growing an extra\n<code>LazySequence</code> layer.  For example,\nprext example needed\nNote: this property need not be implemented by conforming types,\nit has a default implementation in a protocol extension that\njust returns <code>self</code>.\n    Declaration    \n    <code>var elements: Self.Elements { get }</code>	http://swiftdoc.org/v2.2/protocol/LazySequenceType/#var-elements_-self-elements
LazySequenceType.lazy	A										Identical to <code>self</code>.\n    Declaration    \n    <code>var lazy: Self { get }</code>	http://swiftdoc.org/v2.2/protocol/LazySequenceType/#-var-lazy_-self
LazySequenceType.elements	A										Identical to <code>self</code>.\n    Declaration    \n    <code>var elements: Self { get }</code>	http://swiftdoc.org/v2.2/protocol/LazySequenceType/#elements-self-var-elements_-self
flatMap	R	LazySequenceType.flatMap										
flatten	R	LazySequenceType.flatten										
array	R	LazySequenceType.array										
elements	R	LazySequenceType.elements										
lazy	R	LazySequenceType.lazy										
elements	R	LazySequenceType.elements										
Operator: -=	A										<pre><code>infix operator -= {\n    associativity right\n    precedence 90\n    assignment\n}</code></pre>	http://swiftdoc.org/v2.2/operator/mnseq/
Operator: /	A										<pre><code>infix operator / {\n    associativity left\n    precedence 150\n}</code></pre>	http://swiftdoc.org/v2.2/operator/slash/
IntervalType	A										<pre><code>protocol IntervalType</code></pre>An interval over a <code>Comparable</code> type.	http://swiftdoc.org/v2.2/protocol/IntervalType/
IntervalType.clamp	A										Returns <code>rhs</code> clamped to <code>self</code>.  The bounds of the result, even\nif it is empty, are always within the bounds of <code>self</code>.\n    Declaration    \n    <code>func clamp(intervalToClamp: Self) -&gt; Self</code>	http://swiftdoc.org/v2.2/protocol/IntervalType/#func-clamp_
IntervalType.contains	A										Returns <code>true</code> iff the interval contains <code>value</code>.\n    Declaration    \n    <code>func contains(value: Self.Bound) -&gt; Bool</code>	http://swiftdoc.org/v2.2/protocol/IntervalType/#func-contains_
IntervalType.overlaps	A										Returns <code>true</code> if <code>lhs</code> and <code>rhs</code> have a non-empty intersection.\n    Declaration    \n    <code>func overlaps&lt;I : IntervalType where I.Bound == Bound&gt;(other: I) -&gt; Bool</code>	http://swiftdoc.org/v2.2/protocol/IntervalType/#func--overlaps_
IntervalType.end	A										The <code>Interval</code>'s upper bound.\nInvariant: <code>start</code> &lt;= <code>end</code>.\n    Declaration    \n    <code>var end: Self.Bound { get }</code>	http://swiftdoc.org/v2.2/protocol/IntervalType/#var-end_-self-bound
IntervalType.isEmpty	A										<code>true</code> iff <code>self</code> is empty.\n    Declaration    \n    <code>var isEmpty: Bool { get }</code>	http://swiftdoc.org/v2.2/protocol/IntervalType/#var-isempty_-bool
IntervalType.start	A										The <code>Interval</code>'s lower bound.\nInvariant: <code>start</code> &lt;= <code>end</code>.\n    Declaration    \n    <code>var start: Self.Bound { get }</code>	http://swiftdoc.org/v2.2/protocol/IntervalType/#var-start_-self-bound
clamp	R	IntervalType.clamp										
contains	R	IntervalType.contains										
overlaps	R	IntervalType.overlaps										
end	R	IntervalType.end										
isEmpty	R	IntervalType.isEmpty										
start	R	IntervalType.start										
DictionaryLiteralConvertible	A										<pre><code>protocol DictionaryLiteralConvertible</code></pre>Conforming types can be initialized with dictionary literals.	http://swiftdoc.org/v2.2/protocol/DictionaryLiteralConvertible/
CustomReflectable	A										<pre><code>protocol CustomReflectable</code></pre>A type that explicitly supplies its own Mirror.\nInstances of any type can be <code>Mirror(reflect:)</code>'ed upon, but if you are\nnot satisfied with the <code>Mirror</code> supplied for your type by default,\nyou can make it conform to <code>CustomReflectable</code> and return a custom\n<code>Mirror</code>.	http://swiftdoc.org/v2.2/protocol/CustomReflectable/
CustomReflectable.customMirror	A										Returns the <code>Mirror</code> for <code>self</code>.\n<strong>Note:</strong> If <code>Self</code> has value semantics, the <code>Mirror</code> should be\n  unaffected by subsequent mutations of <code>self</code>.\n    Declaration    \n    <code>func customMirror() -&gt; Mirror</code>	http://swiftdoc.org/v2.2/protocol/CustomReflectable/#func-custommirror
customMirror	R	CustomReflectable.customMirror										
ErrorType	A										<pre><code>protocol ErrorType</code></pre>A type representing an error value that can be thrown.	http://swiftdoc.org/v2.2/protocol/ErrorType/
CustomStringConvertible	A										<pre><code>protocol CustomStringConvertible</code></pre>A type with a customized textual representation.\nThis textual representation is used when values are written to an\noutput stream, for example, by <code>print</code>.\n<strong>Note:</strong> <code>String(instance)</code> will work for an <code>instance</code> of any\n  type, returning its <code>description</code> if the <code>instance</code> happens to be\n  <code>CustomStringConvertible</code>.  Using <code>CustomStringConvertible</code> as a\n  generic constraint, or accessing a conforming type's <code>description</code>\n  directly, is therefore discouraged.\n<strong>See Also:</strong> <code>String.init&lt;T&gt;(T)</code>, <code>CustomDebugStringConvertible</code>	http://swiftdoc.org/v2.2/protocol/CustomStringConvertible/
CustomStringConvertible.description	A										A textual representation of <code>self</code>.\n    Declaration    \n    <code>var description: String { get }</code>	http://swiftdoc.org/v2.2/protocol/CustomStringConvertible/#var-description_-string
description	R	CustomStringConvertible.description										
Hashable	A										<pre><code>protocol Hashable</code></pre>Instances of conforming types provide an integer <code>hashValue</code> and\ncan be used as <code>Dictionary</code> keys.	http://swiftdoc.org/v2.2/protocol/Hashable/
Hashable.hashValue	A										The hash value.\n<strong>Axiom:</strong> <code>x == y</code> implies <code>x.hashValue == y.hashValue</code>.\n<strong>Note:</strong> The hash value is not guaranteed to be stable across\n  different invocations of the same program.  Do not persist the\n  hash value across program runs.\n    Declaration    \n    <code>var hashValue: Int { get }</code>	http://swiftdoc.org/v2.2/protocol/Hashable/#var-hashvalue_-int
hashValue	R	Hashable.hashValue										
ExtendedGraphemeClusterLiteralConvertible	A										<pre><code>protocol ExtendedGraphemeClusterLiteralConvertible</code></pre>Conforming types can be initialized with string literals\ncontaining a single Unicode extended grapheme cluster.	http://swiftdoc.org/v2.2/protocol/ExtendedGraphemeClusterLiteralConvertible/
MutableIndexable	A										<pre><code>protocol MutableIndexable</code></pre>A type that supports subscript assignment to a mutable collection.	http://swiftdoc.org/v2.2/protocol/MutableIndexable/
MutableIndexable.endIndex	A										Declaration    \n    <code>var endIndex: Self.Index { get }</code>	http://swiftdoc.org/v2.2/protocol/MutableIndexable/#var-endindex_-self-index
MutableIndexable.startIndex	A										Declaration    \n    <code>var startIndex: Self.Index { get }</code>	http://swiftdoc.org/v2.2/protocol/MutableIndexable/#var-startindex_-self-index
endIndex	R	MutableIndexable.endIndex										
startIndex	R	MutableIndexable.startIndex										
OutputStreamType	A										<pre><code>protocol OutputStreamType</code></pre>A target of text streaming operations.	http://swiftdoc.org/v2.2/protocol/OutputStreamType/
OutputStreamType.write	A										Append the given <code>string</code> to this stream.\n    Declaration    \n    <code>mutating func write(string: String)</code>	http://swiftdoc.org/v2.2/protocol/OutputStreamType/#func-write_
write	R	OutputStreamType.write										
Streamable	A										<pre><code>protocol Streamable</code></pre>A source of text streaming operations.  <code>Streamable</code> instances can\nbe written to any output stream.\nFor example: <code>String</code>, <code>Character</code>, <code>UnicodeScalar</code>.	http://swiftdoc.org/v2.2/protocol/Streamable/
Streamable.writeTo	A										Write a textual representation of <code>self</code> into <code>target</code>.\n    Declaration    \n    <code>func writeTo&lt;Target : OutputStreamType&gt;(inout target: Target)</code>	http://swiftdoc.org/v2.2/protocol/Streamable/#func-writeto-inout_
writeTo	R	Streamable.writeTo										
Operator: ??	A										<pre><code>infix operator ?? {\n    associativity right\n    precedence 131\n}</code></pre>	http://swiftdoc.org/v2.2/operator/qmqm/
Operator: ~>	A										<pre><code>infix operator ~&gt; {\n    associativity left\n    precedence 255\n}</code></pre>	http://swiftdoc.org/v2.2/operator/tildegt/
Operator: >>	A										<pre><code>infix operator &gt;&gt; {\n    associativity none\n    precedence 160\n}</code></pre>	http://swiftdoc.org/v2.2/operator/gtgt/
Operator: >>=	A										<pre><code>infix operator &gt;&gt;= {\n    associativity right\n    precedence 90\n    assignment\n}</code></pre>	http://swiftdoc.org/v2.2/operator/gtgteq/
SignedNumberType	A										<pre><code>protocol SignedNumberType</code></pre>Instances of conforming types can be subtracted, arithmetically\nnegated, and initialized from <code>0</code>.\nAxioms:\n<code>x - 0 == x</code><code>-x == 0 - x</code><code>-(-x) == x</code>	http://swiftdoc.org/v2.2/protocol/SignedNumberType/
Operator: ===	A										<pre><code>infix operator === {\n    associativity none\n    precedence 130\n}</code></pre>	http://swiftdoc.org/v2.2/operator/eqeqeq/
Operator: <<	A										<pre><code>infix operator &lt;&lt; {\n    associativity none\n    precedence 160\n}</code></pre>	http://swiftdoc.org/v2.2/operator/ltlt/
Operator: ..<	A										<pre><code>infix operator ..&lt; {\n    associativity none\n    precedence 135\n}</code></pre>	http://swiftdoc.org/v2.2/operator/dotdotlt/
RangeReplaceableCollectionType	A										<pre><code>protocol RangeReplaceableCollectionType</code></pre>A collection that supports replacement of an arbitrary subRange\nof elements with the elements of another collection.	http://swiftdoc.org/v2.2/protocol/RangeReplaceableCollectionType/
RangeReplaceableCollectionType.append	A										Append <code>x</code> to <code>self</code>.\nApplying <code>successor()</code> to the index of the new element yields\n<code>self.endIndex</code>.\n<strong>Complexity:</strong> Amortized O(1).\n    Declaration    \n    <code>mutating func append(x: Self.Generator.Element)</code>	http://swiftdoc.org/v2.2/protocol/RangeReplaceableCollectionType/#func-append_
RangeReplaceableCollectionType.appendContentsOf	A										Append the elements of <code>newElements</code> to <code>self</code>.\n<strong>Complexity:</strong> O(length of result).\n    Declaration    \n    <code>mutating func appendContentsOf&lt;S : SequenceType where S.Generator.Element == Generator.Element&gt;(newElements: S)</code>	http://swiftdoc.org/v2.2/protocol/RangeReplaceableCollectionType/#func-appendcontentsof_
RangeReplaceableCollectionType.insert	A										Insert <code>newElement</code> at index <code>i</code>.\nInvalidates all indices with respect to <code>self</code>.\n<strong>Complexity:</strong> O(<code>self.count</code>).\n    Declaration    \n    <code>mutating func insert(newElement: Self.Generator.Element, atIndex i: Self.Index)</code>	http://swiftdoc.org/v2.2/protocol/RangeReplaceableCollectionType/#func-insert_atindex_
RangeReplaceableCollectionType.insertContentsOf	A										Insert <code>newElements</code> at index <code>i</code>.\nInvalidates all indices with respect to <code>self</code>.\n<strong>Complexity:</strong> O(<code>self.count + newElements.count</code>).\n    Declaration    \n    <code>mutating func insertContentsOf&lt;S : CollectionType where S.Generator.Element == Generator.Element&gt;(newElements: S, at i: Self.Index)</code>	http://swiftdoc.org/v2.2/protocol/RangeReplaceableCollectionType/#func-insertcontentsof_at_
RangeReplaceableCollectionType.removeAll	A										Remove all elements.\nInvalidates all indices with respect to <code>self</code>.\n<strong><code>keepCapacity</code>:</strong>  If <code>true</code>, is a non-binding request to\n   avoid releasing storage, which can be a useful optimization\n   when <code>self</code> is going to be grown again.\n<strong>Complexity:</strong> O(<code>self.count</code>).\n    Declaration    \n    <code>mutating func removeAll(keepCapacity keepCapacity: Bool)</code>	http://swiftdoc.org/v2.2/protocol/RangeReplaceableCollectionType/#func-removeall-keepcapacity_
RangeReplaceableCollectionType.removeAtIndex	A										Remove the element at index <code>i</code>.\nInvalidates all indices with respect to <code>self</code>.\n<strong>Complexity:</strong> O(<code>self.count</code>).\n    Declaration    \n    <code>mutating func removeAtIndex(i: Self.Index) -&gt; Self.Generator.Element</code>	http://swiftdoc.org/v2.2/protocol/RangeReplaceableCollectionType/#func-removeatindex_
RangeReplaceableCollectionType.removeFirst	A										Remove the element at <code>startIndex</code> and return it.\n<strong>Complexity:</strong> O(<code>self.count</code>)\n<strong>Requires:</strong> <code>!self.isEmpty</code>.\n    Declaration    \n    <code>mutating func removeFirst() -&gt; Self.Generator.Element</code>	http://swiftdoc.org/v2.2/protocol/RangeReplaceableCollectionType/#func-removefirst
RangeReplaceableCollectionType.removeFirst	A										Remove the first <code>n</code> elements.\n<strong>Complexity:</strong> O(<code>self.count</code>)\n<strong>Requires:</strong> <code>n &gt;= 0 &amp;&amp; self.count &gt;= n</code>.\n    Declaration    \n    <code>mutating func removeFirst(n: Int)</code>	http://swiftdoc.org/v2.2/protocol/RangeReplaceableCollectionType/#func-removefirst_
RangeReplaceableCollectionType.removeRange	A										Remove the indicated <code>subRange</code> of elements.\nInvalidates all indices with respect to <code>self</code>.\n<strong>Complexity:</strong> O(<code>self.count</code>).\n    Declaration    \n    <code>mutating func removeRange(subRange: Range&lt;Self.Index&gt;)</code>	http://swiftdoc.org/v2.2/protocol/RangeReplaceableCollectionType/#func-removerange_
RangeReplaceableCollectionType.replaceRange	A										Replace the given <code>subRange</code> of elements with <code>newElements</code>.\nInvalidates all indices with respect to <code>self</code>.\n<strong>Complexity:</strong> O(<code>subRange.count</code>) if\n  <code>subRange.endIndex == self.endIndex</code> and <code>newElements.isEmpty</code>,\n  O(<code>self.count</code> + <code>newElements.count</code>) otherwise.\n    Declaration    \n    <code>mutating func replaceRange&lt;C : CollectionType where C.Generator.Element == Generator.Element&gt;(subRange: Range&lt;Self.Index&gt;, with newElements: C)</code>	http://swiftdoc.org/v2.2/protocol/RangeReplaceableCollectionType/#func-replacerange_with_
RangeReplaceableCollectionType.reserveCapacity	A										A non-binding request to ensure <code>n</code> elements of available storage.\nThis works as an optimization to avoid multiple reallocations of\nlinear data structures like <code>Array</code>.  Conforming types may\nreserve more than <code>n</code>, exactly <code>n</code>, less than <code>n</code> elements of\nstorage, or even ignore the request completely.\n    Declaration    \n    <code>mutating func reserveCapacity(n: Self.Index.Distance)</code>	http://swiftdoc.org/v2.2/protocol/RangeReplaceableCollectionType/#func-reservecapacity_
RangeReplaceableCollectionType.append	A										Declaration    \n    <code>mutating func append(newElement: Self.Generator.Element)</code>	http://swiftdoc.org/v2.2/protocol/RangeReplaceableCollectionType/#func--append_
RangeReplaceableCollectionType.appendContentsOf	A										Declaration    \n    <code>mutating func appendContentsOf&lt;S : SequenceType where S.Generator.Element == Generator.Element&gt;(newElements: S)</code>	http://swiftdoc.org/v2.2/protocol/RangeReplaceableCollectionType/#func--appendcontentsof_
RangeReplaceableCollectionType.insert	A										Declaration    \n    <code>mutating func insert(newElement: Self.Generator.Element, atIndex i: Self.Index)</code>	http://swiftdoc.org/v2.2/protocol/RangeReplaceableCollectionType/#func--insert_atindex_
RangeReplaceableCollectionType.insertContentsOf	A										Declaration    \n    <code>mutating func insertContentsOf&lt;C : CollectionType where C.Generator.Element == Generator.Element&gt;(newElements: C, at i: Self.Index)</code>	http://swiftdoc.org/v2.2/protocol/RangeReplaceableCollectionType/#func--insertcontentsof_at_
RangeReplaceableCollectionType.removeAll	A										Declaration    \n    <code>mutating func removeAll(keepCapacity keepCapacity: Bool = default)</code>	http://swiftdoc.org/v2.2/protocol/RangeReplaceableCollectionType/#func--removeall-keepcapacity_
RangeReplaceableCollectionType.removeAtIndex	A										Declaration    \n    <code>mutating func removeAtIndex(index: Self.Index) -&gt; Self.Generator.Element</code>	http://swiftdoc.org/v2.2/protocol/RangeReplaceableCollectionType/#func--removeatindex_
RangeReplaceableCollectionType.removeFirst	A										Declaration    \n    <code>mutating func removeFirst() -&gt; Self.Generator.Element</code>	http://swiftdoc.org/v2.2/protocol/RangeReplaceableCollectionType/#func--removefirst
RangeReplaceableCollectionType.removeFirst	A										Declaration    \n    <code>mutating func removeFirst(n: Int)</code>	http://swiftdoc.org/v2.2/protocol/RangeReplaceableCollectionType/#func--removefirst_
RangeReplaceableCollectionType.removeRange	A										Declaration    \n    <code>mutating func removeRange(subRange: Range&lt;Self.Index&gt;)</code>	http://swiftdoc.org/v2.2/protocol/RangeReplaceableCollectionType/#func--removerange_
RangeReplaceableCollectionType.reserveCapacity	A										Declaration    \n    <code>mutating func reserveCapacity(n: Self.Index.Distance)</code>	http://swiftdoc.org/v2.2/protocol/RangeReplaceableCollectionType/#func--reservecapacity_
RangeReplaceableCollectionType.removeLast	A										Remove an element from the end.\n<strong>Complexity:</strong> O(1)\n<strong>Requires:</strong> <code>!self.isEmpty</code>\n    Declaration    \n    <code>mutating func removeLast() -&gt; Self.Generator.Element</code>	http://swiftdoc.org/v2.2/protocol/RangeReplaceableCollectionType/#func-index_-bidirectionalindextype-removelast
RangeReplaceableCollectionType.removeLast	A										Remove the last <code>n</code> elements.\n<strong>Complexity:</strong> O(<code>self.count</code>)\n<strong>Requires:</strong> <code>n &gt;= 0 &amp;&amp; self.count &gt;= n</code>.\n    Declaration    \n    <code>mutating func removeLast(n: Int)</code>	http://swiftdoc.org/v2.2/protocol/RangeReplaceableCollectionType/#func-index_-bidirectionalindextype-removelast_
append	R	RangeReplaceableCollectionType.append										
appendContentsOf	R	RangeReplaceableCollectionType.appendContentsOf										
insert	R	RangeReplaceableCollectionType.insert										
insertContentsOf	R	RangeReplaceableCollectionType.insertContentsOf										
removeAll	R	RangeReplaceableCollectionType.removeAll										
removeAtIndex	R	RangeReplaceableCollectionType.removeAtIndex										
removeFirst	R	RangeReplaceableCollectionType.removeFirst										
removeFirst	R	RangeReplaceableCollectionType.removeFirst										
removeRange	R	RangeReplaceableCollectionType.removeRange										
replaceRange	R	RangeReplaceableCollectionType.replaceRange										
reserveCapacity	R	RangeReplaceableCollectionType.reserveCapacity										
append	R	RangeReplaceableCollectionType.append										
appendContentsOf	R	RangeReplaceableCollectionType.appendContentsOf										
insert	R	RangeReplaceableCollectionType.insert										
insertContentsOf	R	RangeReplaceableCollectionType.insertContentsOf										
removeAll	R	RangeReplaceableCollectionType.removeAll										
removeAtIndex	R	RangeReplaceableCollectionType.removeAtIndex										
removeFirst	R	RangeReplaceableCollectionType.removeFirst										
removeFirst	R	RangeReplaceableCollectionType.removeFirst										
removeRange	R	RangeReplaceableCollectionType.removeRange										
reserveCapacity	R	RangeReplaceableCollectionType.reserveCapacity										
removeLast	R	RangeReplaceableCollectionType.removeLast										
removeLast	R	RangeReplaceableCollectionType.removeLast										
Operator: >=	A										<pre><code>infix operator &gt;= {\n    associativity none\n    precedence 130\n}</code></pre>	http://swiftdoc.org/v2.2/operator/gteq/
Operator: >	A										<pre><code>infix operator &gt; {\n    associativity none\n    precedence 130\n}</code></pre>	http://swiftdoc.org/v2.2/operator/gt/
Operator:	A										<pre><code>infix operator &lt;= {\n    associativity none\n    precedence 130\n}</code></pre>	http://swiftdoc.org/v2.2/operator/lteq/
