devServer.watchOptions	A										<section class="prog__container"><p><code>object</code></p><p>Control options related to watching the files.</p><p>webpack uses the file system to get notified of file changes. In some cases this does not work. For example, when using Network File System (NFS). Vagrant also has a lot of problems with this. In these cases, use polling:</p><pre><code class="lang-js">watchOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  poll<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre><p>If this is too heavy on the file system, you can change this to an integer to set the interval in milliseconds.</p><p>See WatchOptions for more options.</p></section>	https://webpack.js.org/configuration/dev-server#devserver-watchoptions-
devServer.watchContentBase	A										<section class="prog__container"><p><code>boolean</code></p><p>Tell the server to watch the files served by the <code>devServer.contentBase</code> option. File changes will trigger a full page reload.</p><pre><code class="lang-js">watchContentBase<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre><p>It is disabled by default.</p></section>	https://webpack.js.org/configuration/dev-server#devserver-watchcontentbase
devServer.stats	A										<section class="prog__container"><p><code>string</code> <code>object</code></p><p>This option lets you precisely control what bundle information gets displayed. This can be a nice middle ground if you want some bundle information, but not all of it.</p><p>To show only errors in your bundle:</p><pre><code class="lang-js">stats<span class="token punctuation">:</span> <span class="token string">"errors-only"</span>\n</code></pre><p>For more information, see the stats documentation.</p></section>	https://webpack.js.org/configuration/dev-server#devserver-stats-
devServer.staticOptions	A										<section class="prog__container"><p>It is possible to configure advanced options for serving static files from <code>contentBase</code>. See the Express documentation for the possible options. An example:</p><pre><code class="lang-js">staticOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  redirect<span class="token punctuation">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n</code></pre></section>	https://webpack.js.org/configuration/dev-server#devserver-staticoptions
devServer.quiet	A										<section class="prog__container"><p><code>boolean</code></p><p>With <code>quiet</code> enabled, nothing except the initial startup information will be written to the console. This also means that errors or warnings from webpack are not visible.</p><pre><code class="lang-js">quiet<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre></section>	https://webpack.js.org/configuration/dev-server#devserver-quiet-
devServer.publicPath	A										<section class="prog__container"><p><code>string</code></p><p>The bundled files will be available in the browser under this path.</p><p>Imagine that the server is running under <code>http://localhost:8080</code> and <code>output.filename</code> is set to <code>bundle.js</code>. By default the <code>publicPath</code> is <code>"/"</code>, so your bundle is available as <code>http://localhost:8080/bundle.js</code>.</p><p>The <code>publicPath</code> can be changed so the bundle is put in a directory:</p><pre><code class="lang-js">publicPath<span class="token punctuation">:</span> <span class="token string">"/assets/"</span>\n</code></pre><p>The bundle will now be available as <code>http://localhost:8080/assets/bundle.js</code>.</p></section>	https://webpack.js.org/configuration/dev-server#devserver-publicpath-
devServer.public	A										<section class="prog__container"><p><code>string</code></p><p>When using <em>inline mode</em> and you're proxying dev-server, the inline client script does not always know where to connect to. It will try to guess the URL of the server based on <code>window.location</code>, but if that fails you'll need to use this.</p><p>For example, the dev-server is proxied by nginx, and available on <code>myapp.test</code>:</p><pre><code class="lang-js"><span class="token keyword">public</span><span class="token punctuation">:</span> <span class="token string">"myapp.test:80"</span>\n</code></pre></section>	https://webpack.js.org/configuration/dev-server#devserver-public-cli-only
devServer.proxy	A										<section class="prog__container"><p><code>object</code></p><p>Proxying some URLs can be useful when you have a separate API backend development server and you want to send API requests on the same domain.</p><p>The dev-server makes use of the powerful http-proxy-middleware package. Checkout its documentation for more advanced usages.</p><p>With a backend on <code>localhost:3000</code>, you can use this to enable proxying:</p><pre><code class="lang-js">proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">"/api"</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:3000"</span>\n<span class="token punctuation">}</span>\n</code></pre><p>A request to <code>/api/users</code> will now proxy the request to <code>http://localhost:3000/api/users</code>.</p><p>If you don't want <code>/api</code> to be passed along, we need to rewrite the path:</p><pre><code class="lang-js">proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">"/api"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    target<span class="token punctuation">:</span> <span class="token string">"http://localhost:3000"</span><span class="token punctuation">,</span>\n    pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"^/api"</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><p>A backend server running on HTTPS with an invalid certificate will not be accepted by default. If you want to, modify your config like this:</p><pre><code class="lang-js">proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">"/api"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    target<span class="token punctuation">:</span> <span class="token string">"https://other-server.example.com"</span><span class="token punctuation">,</span>\n    secure<span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><p>Sometimes you don't want to proxy everything. It is possible to bypass the proxy based on the return value of a function.</p><p>In the function you get access to the request, response and proxy options. It must return either <code>false</code> or a path that will be served instead of continuing to proxy the request.</p><p>E.g. for a browser request, you want to serve a HTML page, but for an API request you want to proxy it. You could do something like this:</p><pre><code class="lang-js">proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">"/api"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    target<span class="token punctuation">:</span> <span class="token string">"http://localhost:3000"</span><span class="token punctuation">,</span>\n    bypass<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> proxyOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>accept<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"html"</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Skipping proxy for browser request."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token string">"/index.html"</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></section>	https://webpack.js.org/configuration/dev-server#devserver-proxy
devServer.port	A										<section class="prog__container"><p><code>number</code></p><p>Specify a port number to listen for requests on:</p><pre><code class="lang-js">port<span class="token punctuation">:</span> <span class="token number">8080</span>\n</code></pre></section>	https://webpack.js.org/configuration/dev-server#devserver-port-cli-only
devServer.noInfo	A										<section class="prog__container"><p><code>boolean</code></p><p>With <code>noInfo</code> enabled, messages like the webpack bundle information that is shown when starting up and after each save, will be hidden. Errors and warnings will still be shown.</p><pre><code class="lang-js">noInfo<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre></section>	https://webpack.js.org/configuration/dev-server#devserver-noinfo-
devServer.lazy	A										<section class="prog__container"><p><code>boolean</code></p><p>When <code>lazy</code> is enabled, the dev-server will only compile the bundle when it gets requested. This means that webpack will not watch any file changes. We call this <strong>lazy mode</strong>.</p><pre><code class="lang-js">lazy<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre></section>	https://webpack.js.org/configuration/dev-server#devserver-lazy-
devServer.inline	A										<section class="prog__container"><p><code>boolean</code></p><p>Toggle between the dev-server's two different modes. By default the application will be served with <em>inline mode</em> enabled. This means that a script will be inserted in your bundle to take care of live reloading, and build messages will appear in the browser console.</p><p>It is also possible to use <strong>iframe mode</strong>, which uses an <code>&lt;iframe&gt;</code> under a notification bar with messages about the build. To switch to <strong>iframe mode</strong>:</p><pre><code class="lang-js">inline<span class="token punctuation">:</span> <span class="token boolean">false</span>\n</code></pre></section>	https://webpack.js.org/configuration/dev-server#devserver-inline-cli-only
devServer.https	A										<section class="prog__container"><p><code>boolean</code> <code>object</code></p><p>By default dev-server will be served over HTTP. It can optionally be served over HTTP/2 with HTTPS:</p><pre><code class="lang-js">https<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre><p>With the above setting a self-signed certificate is used, but you can provide your own:</p><pre><code class="lang-js">https<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  key<span class="token punctuation">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">"/path/to/server.key"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  cert<span class="token punctuation">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">"/path/to/server.crt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  ca<span class="token punctuation">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">"/path/to/ca.pem"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><p>This object is passed straight to Node.js HTTPS module, so see the HTTPS documentation for more information.</p></section>	https://webpack.js.org/configuration/dev-server#devserver-https
devServer.hot	A										<section class="prog__container"><p><code>boolean</code></p><p>Enable webpack's Hot Module Replacement feature:</p><pre><code class="lang-js">hot<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre></section>	https://webpack.js.org/configuration/dev-server#devserver-hot
devServer.host	A										<section class="prog__container"><p><code>string</code></p><p>Specify a host to use. By default this is <code>localhost</code>. If you want your server to be accessible externally, specify it like this:</p><pre><code class="lang-js">host<span class="token punctuation">:</span> <span class="token string">"0.0.0.0"</span>\n</code></pre></section>	https://webpack.js.org/configuration/dev-server#devserver-host-cli-only
devServer.historyApiFallback	A										<section class="prog__container"><p><code>boolean</code> <code>object</code></p><p>When using the HTML5 History API, the <code>index.html</code> page will likely have be served in place of any <code>404</code> responses. Enable this by passing:</p><pre><code class="lang-js">historyApiFallback<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre><p>By passing an object this behavior can be controlled further using options like <code>rewrites</code>:</p><pre><code class="lang-js">historyApiFallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  rewrites<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token regex">/^\/$/</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">'/views/landing.html'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token regex">/^\/subpage/</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">'/views/subpage.html'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token regex">/./</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">'/views/404.html'</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><p>When using dots in your path (common with Angular), you may need to use the <code>disableDotRule</code>:</p><pre><code class="lang-js">historyApiFallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  disableDotRule<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre><p>For more options and information, see the connect-history-api-fallback documentation.</p></section>	https://webpack.js.org/configuration/dev-server#devserver-historyapifallback
devServer.headers	A										<section class="prog__container"><p><code>object</code></p><p>Adds headers to all requests:</p><pre><code class="lang-js">headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">"X-Custom-Foo"</span><span class="token punctuation">:</span> <span class="token string">"bar"</span>\n<span class="token punctuation">}</span>\n</code></pre></section>	https://webpack.js.org/configuration/dev-server#devserver-headers-
devServer.filename	A										<section class="prog__container"><p><code>string</code></p><p>This option lets you reduce the compilations in <strong>lazy mode</strong>.\nBy default in <strong>lazy mode</strong>, every request results in a new compilation. With <code>filename</code>, it's possible to only compile when a certain file is requested.</p><p>If <code>output.filename</code> is set to <code>bundle.js</code> and <code>filename</code> is used like this:</p><pre><code class="lang-js">lazy<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\nfilename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span>\n</code></pre><p>It will now only compile the bundle when <code>/bundle.js</code> is requested.</p></section>	https://webpack.js.org/configuration/dev-server#devserver-filename-
devServer.contentBase	A										<section class="prog__container"><p><code>boolean</code> <code>string</code> <code>array</code></p><p>Tell the server where to serve content from. This is only necessary if you want to serve static files. devServer.publicPath will be used to determine where the bundles should be served from, and takes precedence.</p><p>By default it will use your current working directory to serve content, but you can modify this to another directory:</p><pre><code class="lang-js">contentBase<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"public"</span><span class="token punctuation">)</span>\n</code></pre><p>Note that it is recommended to use an absolute path.</p><p>It is also possible to serve from multiple directories:</p><pre><code class="lang-js">contentBase<span class="token punctuation">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"public"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"assets"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n</code></pre><p>To disable <code>contentBase</code>:</p><pre><code class="lang-js">contentBase<span class="token punctuation">:</span> <span class="token boolean">false</span>\n</code></pre></section>	https://webpack.js.org/configuration/dev-server#devserver-contentbase
devServer.compress	A										<section class="prog__container"><p><code>boolean</code></p><p>Enable gzip compression for everything served:</p><pre><code class="lang-js">compress<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre></section>	https://webpack.js.org/configuration/dev-server#devserver-compress
devServer.clientLogLevel	A										<section class="prog__container"><p><code>string</code></p><p>When using <em>inline mode</em>, the console in your DevTools will show you messages e.g. before reloading, before an error or when Hot Module Replacement is enabled. This may be too verbose.</p><p>You can prevent all these messages from showing, by using this option:</p><pre><code class="lang-js">clientLogLevel<span class="token punctuation">:</span> <span class="token string">"none"</span>\n</code></pre><p>Possible values are <code>none</code>, <code>error</code>, <code>warning</code> or <code>info</code> (default).</p><p>Note that the console will <em>always</em> show bundle errors and warnings. This option only effects the message before it.</p></section>	https://webpack.js.org/configuration/dev-server#devserver-clientloglevel
devServer	A										<section class="prog__container"><p><code>object</code></p><p>This set of options is picked up by webpack-dev-server and can be used to change it's behavior in various ways. Here's a simple example that gzips and serves everything from our <code>dist/</code> directory:</p><pre><code class="lang-js">devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  contentBase<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  compress<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  port<span class="token punctuation">:</span> <span class="token number">9000</span>\n<span class="token punctuation">}</span>\n</code></pre><p>When the server is started, there will be a message prior to the list of resolved modules:</p><pre><code class="lang-bash">http://localhost:9000/\nwebpack result is served from /build/\ncontent is served from dist/\n</code></pre><p>that will give some background on where the server is located and what it's serving.</p><p>If you're using dev-server through the Node.js API, the options in <code>devServer</code> will be ignored. Pass the options as a second parameter instead: <code>new WebpackDevServer(compiler, {...})</code>.</p></section>	https://webpack.js.org/configuration/dev-server#devserver
devtool	A										<section class="prog__container"><p><code>string</code> <code>false</code></p><p>Choose a style of source mapping to enhance the debugging process. These values can affect build and rebuild speed dramatically.</p></section>	https://webpack.js.org/configuration/devtool#devtool
entry	A										<section class="prog__container"><p><code>string | [string] | object { &lt;key&gt;: string | [string] }</code></p><p>The point or points to enter the application. At this point the application starts executing. If an array is passed all items will be executed.</p><p>A dynamically loaded module is <strong>not</strong> an entry point.</p><p>Simple rule: one entry point per HTML page. SPA: one entry point, MPA: multiple entry points.</p><pre><code class="lang-js">entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  home<span class="token punctuation">:</span> <span class="token string">"./home.js"</span><span class="token punctuation">,</span>\n  about<span class="token punctuation">:</span> <span class="token string">"./about.js"</span><span class="token punctuation">,</span>\n  contact<span class="token punctuation">:</span> <span class="token string">"./contact.js"</span>\n<span class="token punctuation">}</span>\n</code></pre><p>When combining with the output.library option: If an array is passed only the last item is exported.</p></section>	https://webpack.js.org/configuration/entry-context#entry
context	A										<section class="prog__container"><p><code>string</code></p><p>The base directory, an <strong>absolute path</strong>, for resolving entry points and loaders from configuration.</p><pre><code class="lang-js">context<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">)</span>\n</code></pre><p>By default the current directory is used, but it's recommended to pass a value in your configuration. This makes your configuration independent from CWD.</p></section>	https://webpack.js.org/configuration/entry-context#context
externals	A										<section class="prog__container"><p><code>string</code> <code>regex</code> <code>function</code> <code>array</code> <code>object</code></p><p><strong>Prevent bundling</strong> of certain <code>import</code>ed packages and instead retrieve these <em>external packages at runtime</em>.</p><p>For example, to include jQuery from a CDN instead of bundling it:</p><p><strong>index.html</strong></p><pre><code class="lang-html">...\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://code.jquery.com/jquery-3.1.0.js<span class="token punctuation">"</span></span>\n  <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sha256-slogkvB1K3VOkzAI8QITxV3VzpOnkeNVsKvtkYLMjfk<span class="token punctuation">=</span><span class="token punctuation">"</span></span>\n  <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n...\n</code></pre><p><strong>webpack.config.js</strong></p><pre><code class="lang-javascript">externals<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  jquery<span class="token punctuation">:</span> <span class="token string">'jQuery'</span>\n<span class="token punctuation">}</span>\n</code></pre><p>This leaves any dependant modules unchanged, i.e. the code shown below will still work:</p><pre><code class="lang-javascript"><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">'jquery'</span><span class="token punctuation">;</span>\n\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.my-element'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></section>	https://webpack.js.org/configuration/externals#externals
UseEntry	A										<section class="prog__container"><p><code>object</code></p><p>It must have a <code>loader</code> property being a string. It is resolved relative to the configuration context with the loader resolving options (resolveLoader).</p><p>It can have a <code>options</code> property being a string or object. This value is passed to the loader, which should interpret it as loader options.</p><p>For compatibility a <code>query</code> property is also possible, which is an alias for the <code>options</code> property. Use the <code>options</code> property instead.</p><p><strong>Example:</strong></p><pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    modules<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><p>Note that webpack need to generate an unique module identifier from resource and all loaders including options. It tries to do this with a <code>JSON.stringify</code> of the options object. This is fine in 99.9%, but may be not unique if you apply the same loaders with different options to the same resource and the options have some stringified values. It also breaks if the options object cannot be stringified (i. e. circular JSON). Because of this you can have a <code>ident</code> property in the options object which is used as unique identifier.</p></section>	https://webpack.js.org/configuration/module#useentry
Condition	A										<section class="prog__container"><p>Conditions can be one of these:</p></section>	https://webpack.js.org/configuration/module#condition
Rule.use	A										<section class="prog__container"><p>A list of UseEntries which are applied to modules. Each entry specifies a loader to be used.</p><p>Passing a string (i.e. <code>use: [ "style-loader" ]</code>) is a shortcut to the loader property (i.e. <code>use: [ { loader: "style-loader "} ]</code>).</p><p>Loaders can be chained by passing multiple loaders, which will be applied from right to left (last to first configured).</p><pre><code class="lang-javascript">use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    loader<span class="token punctuation">:</span> <span class="token string">'style-loader'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    loader<span class="token punctuation">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span>\n    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      importLoaders<span class="token punctuation">:</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    loader<span class="token punctuation">:</span> <span class="token string">'less-loader'</span><span class="token punctuation">,</span>\n    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      noIeCompat<span class="token punctuation">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><p>See UseEntry for details.</p></section>	https://webpack.js.org/configuration/module#rule-use
Rule.test	A										<section class="prog__container"><p><code>Rule.test</code> is a shortcut to <code>Rule.resource.test</code>. See Rule.resource and Condition.test for details.</p></section>	https://webpack.js.org/configuration/module#rule-test
Rule.rules	A										<section class="prog__container"><p>An array of Rules that is also used when the Rule matches.</p></section>	https://webpack.js.org/configuration/module#rule-rules
Rule.resource	A										<section class="prog__container"><p>A Condition matched with the resource. See details in Rule conditions.</p></section>	https://webpack.js.org/configuration/module#rule-resource
Rule.parser	A										<section class="prog__container"><p>An object with parser options. All applied parser options are merged.</p><p>For each different parser options object a new parser is created and plugins can apply plugins depending on the parser options. Many of the default plugins apply their parser plugins only if a property in the parser options is not set or true.</p><p><strong>Examples</strong> (parser options by the default plugins):</p><pre><code class="lang-js">parser<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  amd<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// disable AMD</span>\n  commonjs<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// disable CommonJS</span>\n  system<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// disable SystemJS</span>\n  harmony<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// disable ES6 Harmony import/export</span>\n  requireInclude<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// disable require.include</span>\n  requireEnsure<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// disable require.ensure</span>\n  requireContext<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// disable require.context</span>\n  browserify<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// disable special handling of Browserify bundles</span>\n  requireJs<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// disable requirejs.*</span>\n  node<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// disable __dirname, __filename, module, require.extensions, require.main, etc.</span>\n  node<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// reconfigure <a class="code-link" href="/configuration/node">node</a> layer on module level</span>\n<span class="token punctuation">}</span>\n</code></pre></section>	https://webpack.js.org/configuration/module#rule-parser
Rule.options / Rule.query	A										<section class="prog__container"><p><code>Rule.options</code> and <code>Rule.query</code> are shortcuts to <code>Rule.use: [ { options } ]</code>. See Rule.use and UseEntry.options for details.</p><p><code>Rule.query</code> only exists for compatibility reasons. Use <code>Rule.options</code> instead.</p></section>	https://webpack.js.org/configuration/module#rule-options-rule-query
Rule.oneOf	A										<section class="prog__container"><p>An array of Rules from which only the first matching Rule is used when the Rule matches.</p></section>	https://webpack.js.org/configuration/module#rule-oneof
Rule.loaders	A										<section class="prog__container"><p><code>Rule.loaders</code> is an alias to <code>Rule.use</code>. See Rule.use for details.</p><p>It exists for compatibility reasons. Use <code>Rule.use</code> instead.</p></section>	https://webpack.js.org/configuration/module#rule-loaders
Rule.loader	A										<section class="prog__container"><p><code>Rule.loader</code> is a shortcut to <code>Rule.use: [ { loader } ]</code>. See Rule.use and UseEntry.loader for details.</p></section>	https://webpack.js.org/configuration/module#rule-loader
Rule.issuer	A										<section class="prog__container"><p>A Condition matched with the issuer. See details in Rule conditions.</p></section>	https://webpack.js.org/configuration/module#rule-issuer
Rule.include	A										<section class="prog__container"><p><code>Rule.include</code> is a shortcut to <code>Rule.resource.include</code>. See Rule.resource and Condition.include for details.</p></section>	https://webpack.js.org/configuration/module#rule-include
Rule.exclude	A										<section class="prog__container"><p><code>Rule.exclude</code> is a shortcut to <code>Rule.resource.exclude</code>. See Rule.resource and Condition.exclude for details.</p></section>	https://webpack.js.org/configuration/module#rule-exclude
Rule.enforce	A										<section class="prog__container"><p>Possible values: <code>"pre" | "post"</code></p><p>Specifies the category of the loader. No value means normal loader.</p><p>There is also an additional category "inlined loader" which are loaders applied inline of the import/require.</p><p>All loaders are sorted in the order <code>post, inline, normal, pre</code> and used in this order.</p><p>All normal loaders can be omitted (overridden) by prefixing <code>!</code> in the request.</p><p>All normal and pre loaders can be omitted (overridden) by prefixing <code>-!</code> in the request.</p><p>All normal, post and pre loaders can be omitted (overridden) by prefixing <code>!!</code> in the request.</p><p>Inline loaders and <code>!</code> prefixes should not be used as they are non-standard. They may be use by loader generated code.</p></section>	https://webpack.js.org/configuration/module#rule-enforce
module.rules	A										<section class="prog__container"><p><code>array</code></p><p>An array of Rules which are matched to requests when modules are created. These rules can modify how the module is created. They can apply loaders to the module, or modify the parser.</p></section>	https://webpack.js.org/configuration/module#module-rules
module.noParse	A										<section class="prog__container"><p><code>RegExp | [RegExp]</code></p><p>Prevent webpack from parsing any files matching the given regular expression(s). Ignored files <strong>should not</strong> have calls to <code>import</code>, <code>require</code>, <code>define</code> or any other importing mechanism. This can boost build performance when ignoring large libraries.</p><pre><code class="lang-js">noParse<span class="token punctuation">:</span> <span class="token regex">/jquery|lodash/</span>\n</code></pre></section>	https://webpack.js.org/configuration/module#module-noparse
node	A										<section class="prog__container"><p><code>object</code></p><p>Customize the NodeJS environment using polyfills or mocks:</p><pre><code class="lang-js">node<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  global<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  process<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  Buffer<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  __filename<span class="token punctuation">:</span> <span class="token string">"mock"</span><span class="token punctuation">,</span>\n  __dirname<span class="token punctuation">:</span> <span class="token string">"mock"</span><span class="token punctuation">,</span>\n  setImmediate<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre></section>	https://webpack.js.org/configuration/node#node
recordsOutputPath	A										<section class="prog__container"><p>Description...</p></section>	https://webpack.js.org/configuration/other-options#recordsoutputpath
recordsInputPath	A										<section class="prog__container"><p>Description...</p></section>	https://webpack.js.org/configuration/other-options#recordsinputpath
recordsPath	A										<section class="prog__container"><p>Description...</p></section>	https://webpack.js.org/configuration/other-options#recordspath
profile	A										<section class="prog__container"><p><code>boolean</code></p><p>Capture a "profile" of the application, including statistics and hints, which can then be dissected using the Analyze tool.</p></section>	https://webpack.js.org/configuration/other-options#profile
loader	A										<section class="prog__container"><p><code>object</code></p><p>Expose custom values into the loader context.</p></section>	https://webpack.js.org/configuration/other-options#loader
cache	A										<section class="prog__container"><p><code>boolean</code> <code>object</code></p><p>Cache the generated webpack modules and chunks to improve build speed. Caching is enabled by default while in watch mode. To disable caching simply pass:</p><pre><code class="lang-js">cache<span class="token punctuation">:</span> <span class="token boolean">false</span>\n</code></pre><p>If an object is passed, webpack will use this object for caching. Keeping a reference to this object will allow one to share the same cache between compiler calls:</p><pre><code class="lang-js"><span class="token keyword">let</span> SharedCache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>\n  cache<span class="token punctuation">:</span> SharedCache\n<span class="token punctuation">}</span>\n</code></pre></section>	https://webpack.js.org/configuration/other-options#cache
bail	A										<section class="prog__container"><p><code>boolean</code></p><p>Fail out on the first error instead of tolerating it. By default webpack will log these errors in red in the terminal, as well as the browser console when using HMR, but continue bundling. To enable it:</p><pre><code class="lang-js">bail<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre><p>This will force webpack to exit its bundling process.</p></section>	https://webpack.js.org/configuration/other-options#bail
amd	A										<section class="prog__container"><p><code>object</code></p><p>Set the value of <code>require.amd</code> or <code>define.amd</code>:</p><pre><code class="lang-js">amd<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  jQuery<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre><p>Certain popular modules written for AMD, most notably jQuery versions 1.7.0 to 1.9.1, will only register as an AMD module if the loader indicates it has taken special allowances for multiple versions being included on a page.\nThe allowances were the ability to restrict registrations to a specific version or to support different sandboxes with different defined modules.</p><p>This option allows you to set the key your module looks for to a truthy value.\nAs it happens, the AMD support in webpack ignores the defined name anyways.</p></section>	https://webpack.js.org/configuration/other-options#amd
output.umdNamedDefine	A										<section class="prog__container"><p><code>boolean</code></p><p>When using <code>libraryTarget: "umd"</code>, setting:</p><pre><code class="lang-js">umdNamedDefine<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre><p>will name the AMD module of the UMD build. Otherwise an anonymous <code>define</code> is used.</p></section>	https://webpack.js.org/configuration/output#output-umdnameddefine
output.sourcePrefix	A										<section class="prog__container"><p><code>string</code></p><p>Change the prefix for each line in the output bundles.</p><pre><code class="lang-js">sourcePrefix<span class="token punctuation">:</span> <span class="token string">"\t"</span>\n</code></pre><p>Note by default an empty string is used. Using some kind of indention makes bundles look more pretty, but will cause issues with multi-line string.</p><p>There is no need to change it.</p></section>	https://webpack.js.org/configuration/output#output-sourceprefix
output.sourceMapFilename	A										<section class="prog__container"><p><code>string</code></p><p>This option is only used when devtool uses a SourceMap option which writes an output file.</p><p>Configure how source maps are named. By default <code>"[file].map"</code> is used.</p><p>Technically the <code>[name]</code>, <code>[id]</code>, <code>[hash]</code> and <code>[chunkhash]</code> placeholders can be used, if generating a SourceMap for chunks. In addition to that the <code>[file]</code> placeholder is replaced with the filename of the original file. It's recommended to only use the <code>[file]</code> placeholder, as the other placeholders won't work when generating SourceMaps for non-chunk files. Best leave the default.</p></section>	https://webpack.js.org/configuration/output#output-sourcemapfilename
output.publicPath	A										<section class="prog__container"><p><code>string</code></p><p>This is an important option when using on-demand-loading or loading external resources like images, files, etc. If an incorrect value is specified you'll receive 404 errors while loading these resources.</p><p>This option specifies the <strong>public URL</strong> of the output directory when referenced in a browser. A relative URL is resolved relative to the HTML page (or <code>&lt;base&gt;</code> tag). Server-relative URLs, protocol-relative URLs or absolute URLs are also possible and sometimes required, i. e. when hosting assets on a CDN.</p><p>The value of the option is prefixed to every URL created by the runtime or loaders. Because of this <strong>the value of this option ends with <code>/</code></strong> in most cases.</p><p>The default value is an empty string <code>""</code>.</p><p>Simple rule: The URL of your output.path from the view of the HTML page.</p><pre><code class="lang-js">path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"public/assets"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\npublicPath<span class="token punctuation">:</span> <span class="token string">"https://cdn.example.com/assets/"</span>\n</code></pre><p>For this configuration:</p><pre><code class="lang-js">publicPath<span class="token punctuation">:</span> <span class="token string">"/assets/"</span><span class="token punctuation">,</span>\nchunkFilename<span class="token punctuation">:</span> <span class="token string">"[id].chunk.js"</span>\n</code></pre><p>A request to a chunk will look like <code>/assets/4.chunk.js</code>.</p><p>A loader outputting HTML might emit something like this:</p><pre><code class="lang-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/assets/spinner.gif<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><p>or when loading an image in CSS:</p><pre><code class="lang-css"><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(/assets/spinner.gif)</span><span class="token punctuation">;</span>\n</code></pre><p>The webpack-dev-server also takes a hint from <code>publicPath</code>, using it to determine where to serve the output files from.</p><p>Note that <code>[hash]</code> in this parameter will be replaced with an hash of the compilation. See the Caching guide for details.</p><p>Examples:</p><pre><code class="lang-js">publicPath<span class="token punctuation">:</span> <span class="token string">"https://cdn.example.com/assets/"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// CDN (always HTTPS)</span>\npublicPath<span class="token punctuation">:</span> "<span class="token comment" spellcheck="true">//cdn.example.com/assets/", // CDN (same protocol)</span>\npublicPath<span class="token punctuation">:</span> <span class="token string">"/assets/"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// server-relative</span>\npublicPath<span class="token punctuation">:</span> <span class="token string">"assets/"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// relative to HTML page</span>\npublicPath<span class="token punctuation">:</span> <span class="token string">"../assets/"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// relative to HTML page</span>\npublicPath<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// relative to HTML page (same directory)</span>\n</code></pre></section>	https://webpack.js.org/configuration/output#output-publicpath
output.pathinfo	A										<section class="prog__container"><p><code>boolean</code></p><p>Tell webpack to include comments in bundles with information about the contained modules. This option defaults to <code>false</code> and <strong>should not</strong> be used in production, but it's very useful in development when reading the generated code.</p><pre><code class="lang-js">pathinfo<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre><p>Note it also adds some info about tree shaking to the generated bundle.</p></section>	https://webpack.js.org/configuration/output#output-pathinfo
output.path	A										<section class="prog__container"><p><code>string</code></p><p>The output directory as an <strong>absolute</strong> path.</p><pre><code class="lang-js">path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist/assets'</span><span class="token punctuation">)</span>\n</code></pre><p>Note that <code>[hash]</code> in this parameter will be replaced with an hash of the compilation. See the Caching guide for details.</p></section>	https://webpack.js.org/configuration/output#output-path
output.libraryTarget	A										<section class="prog__container"><p><code>string</code></p></section>	https://webpack.js.org/configuration/output#output-librarytarget
output.library	A										<section class="prog__container"><p><code>string</code></p><p>Read the library guide for details.</p><p>Use <code>library</code>, and <code>libraryTarget</code> below, when writing a JavaScript library that should export values, which can be used by other code depending on it. Pass a string with the name of the library:</p><pre><code class="lang-js">library<span class="token punctuation">:</span> <span class="token string">"MyLibrary"</span>\n</code></pre><p>The name is used depending on the value of the output.libraryTarget options.</p><p>Note that <code>output.libraryTarget</code> defaults to <code>var</code>. This means if only <code>output.library</code> is used it is exported as variable declaration (when used as script tag it's available in the global scope after execution).</p></section>	https://webpack.js.org/configuration/output#output-library
output.jsonpFunction	A										<section class="prog__container"><p><code>function</code></p><p>Only used when target is web, which uses JSONP for loading on-demand chunks.</p><p>A JSONP function name used to asynchronously load chunks or join multiple initial chunks (CommonsChunkPlugin, AggressiveSplittingPlugin).</p><p>This needs to be changed if multiple webpack runtimes (from different compilation) are used on the same webpage.</p><p>If using the output.library option, the library name is automatically appended.</p></section>	https://webpack.js.org/configuration/output#output-jsonpfunction
output.hotUpdateMainFilename	A										<section class="prog__container"><p><code>string</code></p><p>Customize the main hot update filename. See output.filename option for details on the possible values.</p><p><code>[hash]</code> is the only available placeholder, the default being:</p><pre><code class="lang-js">hotUpdateMainFilename<span class="token punctuation">:</span> <span class="token string">"[hash].hot-update.json"</span>\n</code></pre><p>Here is no need to change it.</p></section>	https://webpack.js.org/configuration/output#output-hotupdatemainfilename
output.hotUpdateFunction	A										<section class="prog__container"><p><code>function</code></p><p>Only used when target is web, which uses JSONP for loading hot updates.</p><p>A JSONP function used to asynchronously load hot-update chunks.</p><p>For details see output.jsonpFunction.</p></section>	https://webpack.js.org/configuration/output#output-hotupdatefunction
output.hotUpdateChunkFilename	A										<section class="prog__container"><p><code>string</code></p><p>Customize the filenames of hot update chunks. See output.filename option for details on the possible values.</p><p>The only placeholders allowed here are <code>[id]</code> and <code>[hash]</code>, the default being:</p><pre><code class="lang-js">hotUpdateChunkFilename<span class="token punctuation">:</span> <span class="token string">"[id].[hash].hot-update.js"</span>\n</code></pre><p>Here is no need to change it.</p></section>	https://webpack.js.org/configuration/output#output-hotupdatechunkfilename
output.filename	A										<section class="prog__container"><p><code>string</code></p><p>This option determines the name of each output bundle. The bundle is written to the directory specified by the output.path option.</p><p>For a single entry point, this can be a static name.</p><pre><code class="lang-js">filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span>\n</code></pre><p>However, when creating multiple bundles via more than one entry point, code splitting, or various plugins, you should use one of the following substitutions to give each bundle a unique name...</p><p>Using entry name:</p><pre><code class="lang-js">filename<span class="token punctuation">:</span> <span class="token string">"[name].bundle.js"</span>\n</code></pre><p>Using internal chunk id:</p><pre><code class="lang-js">filename<span class="token punctuation">:</span> <span class="token string">"[id].bundle.js"</span>\n</code></pre><p>Using the unique hash generated for every build:</p><pre><code class="lang-js">filename<span class="token punctuation">:</span> <span class="token string">"[name].[hash].bundle.js"</span>\n</code></pre><p>Using hashes based on each chunks' content:</p><pre><code class="lang-js">filename<span class="token punctuation">:</span> <span class="token string">"[chunkhash].bundle.js"</span>\n</code></pre><p>Make sure the read the Caching guide for details. There are more steps involved than just setting this option.</p><p>The default value is <code>"[name].js"</code>.</p><p>Note this option is called filename but you are still allowed to something like <code>"js/[name]/bundle.js"</code> to create a folder structure.</p><p>Note this options does not affect output files for on-demand-loaded chunks. For these files the output.chunkFilename option is used. It also doesn't affect files created by loaders. For these files see loader options.</p></section>	https://webpack.js.org/configuration/output#output-filename
output.devtoolModuleFilenameTemplate	A										<section class="prog__container"><p><code>string | function(info)</code></p><p>This option is only used when devtool uses an options which requires module names.</p><p>Customize the names used in each source map's <code>sources</code> array. This can be done by passing a template string or function. For example, when using <code>devtool: 'eval'</code>, this is the default:</p><pre><code class="lang-js">devtoolModuleFilenameTemplate<span class="token punctuation">:</span> "webpack<span class="token punctuation">:</span><span class="token operator">/</span><span class="token comment" spellcheck="true">//[resource-path]?[loaders]"</span>\n</code></pre><p>The following substitutions are available in template strings:</p><pre><code class="lang-js"><span class="token punctuation">[</span>absolute<span class="token operator">-</span>resource<span class="token operator">-</span>path<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// The absolute filename</span>\n<span class="token punctuation">[</span>all<span class="token operator">-</span>loaders<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// Automatic and explicit loaders and params up to the name of the first loader</span>\n<span class="token punctuation">[</span>hash<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// The hash of the module identifier</span>\n<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// The module identifier</span>\n<span class="token punctuation">[</span>loaders<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// Explicit loaders and params up to the name of the first loader</span>\n<span class="token punctuation">[</span>resource<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// The path used to resolve the file and any query params used on the first loader</span>\n<span class="token punctuation">[</span>resource<span class="token operator">-</span>path<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// Same as above without the query params</span>\n</code></pre><p>When using a function, the same options are available camel-cased via the <code>info</code> parameter:</p><pre><code class="lang-js">devtoolModuleFilenameTemplate<span class="token punctuation">:</span> info <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> `webpack<span class="token punctuation">:</span><span class="token operator">/</span><span class="token comment" spellcheck="true">//${info.resourcePath}?${info.loaders}`</span>\n<span class="token punctuation">}</span>\n</code></pre><p>If multiple modules would result in the same name, output.devtoolFallbackModuleFilenameTemplate is used instead for these modules.</p></section>	https://webpack.js.org/configuration/output#output-devtoolmodulefilenametemplate
output.devtoolLineToLine	A										<section class="prog__container"><p><code>boolean | object</code></p><p>(Deprecated: Not really used, not really usable, write an issue if you have a other opinion)</p><p>Enables line to line mapping for all or some modules. This produces a simple source map where each line of the generated source is mapped to the same line of the original source. This is a performance optimization and should only be used if all input lines match generated lines.</p><p>Pass a boolean to enable or disable this feature for all modules (defaults to <code>false</code>). An object with <code>test</code>, <code>include</code>, <code>exclude</code> is also allowed. For example, to enable this feature for all javascript files within a certain directory:</p><pre><code class="lang-js">devtoolLineToLine<span class="token punctuation">:</span> <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span> include<span class="token punctuation">:</span> <span class="token string">'src/utilities'</span> <span class="token punctuation">}</span>\n</code></pre></section>	https://webpack.js.org/configuration/output#output-devtoollinetoline
output.devtoolFallbackModuleFilenameTemplate	A										<section class="prog__container"><p><code>string | function(info)</code></p><p>A fallback used when the template string or function above yields duplicates.</p><p>See output.devtoolModuleFilenameTemplate.</p></section>	https://webpack.js.org/configuration/output#output-devtoolfallbackmodulefilenametemplate
output.crossOriginLoading	A										<section class="prog__container"><p><code>boolean</code> <code>string</code></p><p>Only used when target is web, which uses JSONP for loading on-demand chunks, by adding script tags.</p><p>Enable cross-origin loading of chunks. The following values are accepted...</p><p><code>crossOriginLoading: false</code> - Disable cross-origin loading (default)</p><p><code>crossOriginLoading: "anonymous"</code> - Enable cross-origin loading <strong>without credentials</strong></p><p><code>crossOriginLoading: "use-credentials"</code> - Enable cross-origin loading <strong>with credentials</strong></p></section>	https://webpack.js.org/configuration/output#output-crossoriginloading
output.chunkFilename	A										<section class="prog__container"><p><code>string</code></p><p>This option determines the name of on-demand loaded chunk files. See output.filename option for details on the possible values.</p><p>Note that these filenames need to be generated at runtime to send the requests for chunks. Because of this, placeholders like <code>[name]</code> and <code>[chunkhash]</code> need to add a mapping from chunk id to placeholder value to the output bundle with the webpack runtime. This increases the size and may invalidate the bundle when placeholder value for any chunk changes.</p><p>By default <code>[id].js</code> is used or a value inferred from output.filename (<code>[name]</code> is replaced with <code>[id]</code> or <code>[id].</code> is prepended).</p></section>	https://webpack.js.org/configuration/output#output-chunkfilename
performance.assetFilter	A										<section class="prog__container"><p><code>Function</code></p><p>This property allows webpack to control what files are used to calculate performance hints. The default function is seen below: </p><pre><code class="lang-js"><span class="token keyword">function</span><span class="token punctuation">(</span>assetFilename<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token regex">/\.map$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>assetFilename<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><p>You can override this property by passing your own function in: </p><pre><code class="lang-js">performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  assetFilter<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>assetFilename<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> assetFilename<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><p>The example above will only give you performance hints based on <code>.js</code> files.</p></section>	https://webpack.js.org/configuration/performance#performance-assetfilter
performance.maxAssetSize	A										<section class="prog__container"><p><code>int</code></p><p>An asset is any emitted file from webpack. This option controls when webpack emits a performance hint based on individual asset size. The default value is <code>250000</code> (bytes).</p><pre><code class="lang-js">performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  maxAssetSize<span class="token punctuation">:</span> <span class="token number">100000</span>\n<span class="token punctuation">}</span>\n</code></pre></section>	https://webpack.js.org/configuration/performance#performance-maxassetsize
performance.maxEntrypointSize	A										<section class="prog__container"><p><code>int</code></p><p>An entrypoint represents all assets that would be utilized during initial load time for a specific entry. This option controls when webpack should emit performance hints based on the maximum entrypoint size. The default value is <code>250000</code> (bytes).</p><pre><code class="lang-js">performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  maxEntrypointSize<span class="token punctuation">:</span> <span class="token number">400000</span>\n<span class="token punctuation">}</span>\n</code></pre></section>	https://webpack.js.org/configuration/performance#performance-maxentrypointsize
performance.hints	A										<section class="prog__container"><p><code>boolean | "error" | "warning"</code></p><p>Turns hints on/off. In addition, tells webpack to throw either an error or a warning when hints are found. This property is set to <code>"warning"</code> by default.</p><p>Given an asset is created that is over 250kb:</p><pre><code class="lang-js">performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  hints<span class="token punctuation">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n</code></pre><p>No hint warnings or errors are shown.</p><pre><code class="lang-js">performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  hints<span class="token punctuation">:</span> <span class="token string">"warning"</span>\n<span class="token punctuation">}</span>\n</code></pre><p>A warning will be displayed notifying you of a large asset. We recommend something like this for development environments.</p><pre><code class="lang-js">performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  hints<span class="token punctuation">:</span> <span class="token string">"error"</span>\n<span class="token punctuation">}</span>\n</code></pre><p>An error will be displayed notifying you of a large asset. We recommend using <code>hints: "error"</code> during production builds to help prevent deploying production bundles that are too large, impacting webpage performance. </p></section>	https://webpack.js.org/configuration/performance#performance-hints
performance	A										<section class="prog__container"><p><code>object</code></p><p>Configure how performance hints are shown. For example if you have an asset that is over 250kb, webpack will emit a warning notifiying you of this.</p></section>	https://webpack.js.org/configuration/performance#performance
plugins	A										<section class="prog__container"><p><code>array</code></p><p>A list of webpack plugins. For example, when multiple bundles share some of the same dependencies, the <code>CommonsChunkPlugin</code> could be useful to extract those dependencies into a shared bundle to avoid duplication. This could be added like so:</p><pre><code class="lang-js">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre><p>A more complex example, using multiple plugins, might look something like this:</p></section>	https://webpack.js.org/configuration/plugins#plugins
resolve.cachePredicate	A										<section class="prog__container"><p><code>function</code></p><p>A function which decides whether a request should be cached or not. An object is passed to the function with <code>path</code> and <code>request</code> properties. Default:</p><pre><code class="lang-js">cachePredicate<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n</code></pre></section>	https://webpack.js.org/configuration/resolve#resolve-cachepredicate
resolve.symlinks	A										<section class="prog__container"><p><code>boolean</code></p><p>Whether to resolve symlinks to their symlinked location. Default:</p><pre><code class="lang-js">symlinks<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre></section>	https://webpack.js.org/configuration/resolve#resolve-symlinks
resolve.plugins	A										<section class="prog__container"><p>A list of additional resolve plugins which should be applied. It allows plugins such as DirectoryNamedWebpackPlugin.</p><pre><code class="lang-js">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">DirectoryNamedWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n</code></pre></section>	https://webpack.js.org/configuration/resolve#resolve-plugins
resolveLoader.moduleExtensions	A										<section class="prog__container"><p><code>array</code></p><p>The extensions which are tried when resolving a module (e.g. loaders). By default this is an empty array.</p><p>If you want to use loaders without the <code>-loader</code> suffix, you can use this:</p><pre><code class="lang-js">moduleExtensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'-loader'</span><span class="token punctuation">]</span>\n</code></pre></section>	https://webpack.js.org/configuration/resolve#resolveloader-moduleextensions
resolveLoader	A										<section class="prog__container"><p><code>object</code></p><p>This set of options is identical to the <code>resolve</code> set above, but is used only to resolve webpack's loader packages. Default:</p><pre><code class="lang-js"><span class="token punctuation">{</span>\n    modulesDirectories<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"web_loaders"</span><span class="token punctuation">,</span> <span class="token string">"web_modules"</span><span class="token punctuation">,</span> <span class="token string">"node_loaders"</span><span class="token punctuation">,</span> <span class="token string">"node_modules"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">".webpack-loader.js"</span><span class="token punctuation">,</span> <span class="token string">".web-loader.js"</span><span class="token punctuation">,</span> <span class="token string">".loader.js"</span><span class="token punctuation">,</span> <span class="token string">".js"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    packageMains<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"webpackLoader"</span><span class="token punctuation">,</span> <span class="token string">"webLoader"</span><span class="token punctuation">,</span> <span class="token string">"loader"</span><span class="token punctuation">,</span> <span class="token string">"main"</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></section>	https://webpack.js.org/configuration/resolve#resolveloader
resolve.unsafeCache	A										<section class="prog__container"><p><code>regex</code> <code>array</code> <code>boolean</code></p><p>Enable aggressive, but <strong>unsafe</strong>, caching of modules. Passing <code>true</code> will cache everything. Default:</p><pre><code class="lang-js">unsafeCache<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre><p>A regular expression, or an array of regular expressions, can be used to test file paths and only cache certain modules. For example, to only cache utilities:</p><pre><code class="lang-js">unsafeCache<span class="token punctuation">:</span> <span class="token regex">/src\/utilities/</span>\n</code></pre></section>	https://webpack.js.org/configuration/resolve#resolve-unsafecache
resolve.modules	A										<section class="prog__container"><p><code>array</code></p><p>Tell webpack what directories should be searched when resolving modules.</p><p>Absolute and relative paths can both be used, but be aware that they will behave a bit differently.</p><p>A relative path will be scanned simarly to how Node scans for <code>node_modules</code>, by looking through the current directory as well as it's ancestors (i.e. <code>./node_modules</code>, <code>../node_modules</code>, and on).</p><p>With an absolute path, it will only search in the given directory.</p><p><code>resolve.modules</code> defaults to:</p><pre><code class="lang-js">modules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules"</span><span class="token punctuation">]</span>\n</code></pre><p>If you want to add a directory to search in that takes precedences over <code>node_modules/</code>:</p><pre><code class="lang-js">modules<span class="token punctuation">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"node_modules"</span><span class="token punctuation">]</span>\n</code></pre></section>	https://webpack.js.org/configuration/resolve#resolve-modules
resolve.mainFiles	A										<section class="prog__container"><p><code>array</code></p><p>The filename to be used while resolving directories. Default:</p><pre><code class="lang-js">mainFiles<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"index"</span><span class="token punctuation">]</span>\n</code></pre></section>	https://webpack.js.org/configuration/resolve#resolve-mainfiles
resolve.mainFields	A										<section class="prog__container"><p><code>array</code></p><p>When importing from an npm package, e.g. <code>import * as D3 from "d3"</code>, this option will determine which fields in it's <code>package.json</code> are checked. The default values will vary based upon the target specified in your webpack configuration.</p><p>When the <code>target</code> property is set to <code>webworker</code>, <code>web</code>, or left unspecified:</p><pre><code class="lang-js">mainFields<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"browser"</span><span class="token punctuation">,</span> <span class="token string">"module"</span><span class="token punctuation">,</span> <span class="token string">"main"</span><span class="token punctuation">]</span>\n</code></pre><p>For any other target (including <code>node</code>):</p><pre><code class="lang-js">mainFields<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"module"</span><span class="token punctuation">,</span> <span class="token string">"main"</span><span class="token punctuation">]</span>\n</code></pre><p>For example, the <code>package.json</code> of D3 contains these fields:</p><pre><code class="lang-js"><span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  main<span class="token punctuation">:</span> <span class="token string">'build/d3.Node.js'</span><span class="token punctuation">,</span>\n  browser<span class="token punctuation">:</span> <span class="token string">'build/d3.js'</span><span class="token punctuation">,</span>\n  module<span class="token punctuation">:</span> <span class="token string">'index'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><p>This means that when we <code>import * as D3 from "d3"</code> this will really resolve to the file in the <code>browser</code> property. The <code>browser</code> property takes precedence here because it's the first item in <code>mainFields</code>. Meanwhile, a Node.js application bundled by webpack will resolve by default to the file in the <code>module</code> field.</p></section>	https://webpack.js.org/configuration/resolve#resolve-mainfields
resolve.extensions	A										<section class="prog__container"><p><code>array</code></p><p>Automatically resolve certain extensions. This defaults to:</p><pre><code class="lang-js">extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">".js"</span><span class="token punctuation">,</span> <span class="token string">".json"</span><span class="token punctuation">]</span>\n</code></pre><p>which is what enables users to leave off the extension when importing:</p><pre><code class="lang-js"><span class="token keyword">import</span> File <span class="token keyword">from</span> <span class="token string">'../path/to/file'</span>\n</code></pre></section>	https://webpack.js.org/configuration/resolve#resolve-extensions
resolve.enforceModuleExtension	A										<section class="prog__container"><p><code>boolean</code></p><p>Whether to require to use an extension for modules (e.g. loaders). Default:</p><pre><code class="lang-js">enforceModuleExtension<span class="token punctuation">:</span> <span class="token boolean">false</span>\n</code></pre></section>	https://webpack.js.org/configuration/resolve#resolve-enforcemoduleextension
resolve.enforceExtension	A										<section class="prog__container"><p><code>boolean</code></p><p>If <code>true</code>, it will not allow extension-less files. So by default <code>require('./foo')</code> works if <code>./foo</code> has a <code>.js</code> extension, but with this enabled only <code>require('./foo.js')</code> will work. Default:</p><pre><code class="lang-js">enforceExtension<span class="token punctuation">:</span> <span class="token boolean">false</span>\n</code></pre></section>	https://webpack.js.org/configuration/resolve#resolve-enforceextension
resolve.descriptionFiles	A										<section class="prog__container"><p><code>array</code></p><p>The JSON files to use for descriptions. Default:</p><pre><code class="lang-js">descriptionFiles<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"package.json"</span><span class="token punctuation">]</span>\n</code></pre></section>	https://webpack.js.org/configuration/resolve#resolve-descriptionfiles
resolve.aliasFields	A										<section class="prog__container"><p><code>string</code></p><p>Specify a field, such as <code>browser</code>, to be parsed according to this specification. Default:</p><pre><code class="lang-js">aliasFields<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"browser"</span><span class="token punctuation">]</span>\n</code></pre></section>	https://webpack.js.org/configuration/resolve#resolve-aliasfields
resolve.alias	A										<section class="prog__container"><p><code>object</code></p><p>Create aliases to <code>import</code> or <code>require</code> certain modules more easily. For example, to alias a bunch of commonly used <code>src/</code> folders:</p><pre><code class="lang-js">alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  Utilities<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src/utilities/'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  Templates<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src/templates/'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><p>Now, instead of using relative paths when importing like so:</p><pre><code class="lang-js"><span class="token keyword">import</span> Utility <span class="token keyword">from</span> <span class="token string">'../../utilities/utility'</span><span class="token punctuation">;</span>\n</code></pre><p>you can use the alias:</p><pre><code class="lang-js"><span class="token keyword">import</span> Utility <span class="token keyword">from</span> <span class="token string">'Utilities/utility'</span><span class="token punctuation">;</span>\n</code></pre><p>A trailing <code>$</code> can also be added to the given object's keys to signify an exact match:</p><pre><code class="lang-js">alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  xyz$<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'path/to/file.js'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><p>which would yield these results:</p><pre><code class="lang-js"><span class="token keyword">import</span> Test1 <span class="token keyword">from</span> <span class="token string">'xyz'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Success, file.js is resolved and imported</span>\n<span class="token keyword">import</span> Test2 <span class="token keyword">from</span> <span class="token string">'xyz/file.js'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error, /path/to/file.js/file.js is invalid</span>\n</code></pre><p>The following table explains a lot more cases:</p></section>	https://webpack.js.org/configuration/resolve#resolve-alias
resolve	A										<section class="prog__container"><p><code>object</code></p><p>Configure how modules are resolved. For example, when calling <code>import "lodash"</code> in ES2015, the <code>resolve</code> options can change where webpack goes to look for <code>"lodash"</code> (see modules).</p></section>	https://webpack.js.org/configuration/resolve#resolve
stats	A										<section class="prog__container"><p><code>object</code> <code>string</code></p><p>There are some presets available to use as a shortcut. Use them like this:</p><pre><code class="lang-js">stats<span class="token punctuation">:</span> <span class="token string">"errors-only"</span>\n</code></pre></section>	https://webpack.js.org/configuration/stats#stats
target	A										<section class="prog__container"><p><code>string</code></p><p>Tells webpack which environment the application is targeting. The following values are supported:</p></section>	https://webpack.js.org/configuration/target#target
watchOptions.poll	A										<section class="prog__container"><p><code>boolean</code> <code>number</code></p><p>Turn on polling by passing <code>true</code>, or specifying a poll interval in milliseconds:</p><pre><code class="lang-js">poll<span class="token punctuation">:</span> <span class="token number">1000</span> <span class="token comment" spellcheck="true">// Check for changes every second</span>\n</code></pre></section>	https://webpack.js.org/configuration/watch#watchoptions-poll
watchOptions.ignored	A										<section class="prog__container"><p>For some systems, watching many file systems can result in a lot of CPU or memory usage. It is possible to exclude a huge folder like <code>node_modules</code>:</p><pre><code class="lang-js">ignored<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span>\n</code></pre><p>It is also possible to use anymatch patterns:</p><pre><code class="lang-js">ignored<span class="token punctuation">:</span> "files<span class="token comment" spellcheck="true">/**/</span><span class="token operator">*</span><span class="token punctuation">.</span>js"\n</code></pre></section>	https://webpack.js.org/configuration/watch#watchoptions-ignored
watchOptions.aggregateTimeout	A										<section class="prog__container"><p><code>number</code></p><p>Add a delay before rebuilding once the first file changed. This allows webpack to aggregate any other changes made during this time period into one rebuild. Pass a value in milliseconds:</p><pre><code class="lang-js">aggregateTimeout<span class="token punctuation">:</span> <span class="token number">300</span> <span class="token comment" spellcheck="true">// The default</span>\n</code></pre></section>	https://webpack.js.org/configuration/watch#watchoptions-aggregatetimeout
watchOptions	A										<section class="prog__container"><p><code>object</code></p><p>A set of options used to customize watch mode:</p><pre><code class="lang-js">watchOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  aggregateTimeout<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>\n  poll<span class="token punctuation">:</span> <span class="token number">1000</span>\n<span class="token punctuation">}</span>\n</code></pre></section>	https://webpack.js.org/configuration/watch#watchoptions
watch	A										<section class="prog__container"><p><code>boolean</code></p><p>Turn on watch mode. This means that after the initial build, webpack will continue to watch for changes in any of the resolved files. Watch mode is turned off by default:</p><pre><code class="lang-js">watch<span class="token punctuation">:</span> <span class="token boolean">false</span>\n</code></pre></section>	https://webpack.js.org/configuration/watch#watch
