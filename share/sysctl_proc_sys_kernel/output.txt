acct	A										highwater lowwater frequency  If BSD-style process accounting is enabled these values control its behaviour. If free space on filesystem where the log lives goes below <lowwater>% accounting suspends. If free space gets above <highwater>% accounting resumes. <Frequency> determines how often do we check the amount of free space (value is in seconds). Default: 4 2 30 That is, suspend accounting if there left <= 2% free; resume it if we got >=4%; consider information about amount of free space valid for 30 seconds.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
acpi video flags	R	acpi_video_flags										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
acpi-video-flags	R	acpi_video_flags										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
acpi_video_flags	A										flags  See Doc*/kernel/power/video.txt, it allows mode of video boot to be set during run time.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
auto msgmni	R	auto_msgmni										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
auto-msgmni	R	auto_msgmni										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
auto_msgmni	A										Enables/Disables automatic recomputing of msgmni upon memory add/remove or upon ipc namespace creation/removal (see the msgmni description above). Echoing "1" into this file enables msgmni automatic recomputing. Echoing "0" turns it off. auto_msgmni default value is 1.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
bootloader type	R	bootloader_type										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
bootloader version	R	bootloader_version										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
bootloader-type	R	bootloader_type										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
bootloader-version	R	bootloader_version										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
bootloader_type	A										x86 bootloader identification  This gives the bootloader type number as indicated by the bootloader, shifted left by 4, and OR'd with the low four bits of the bootloader version.  The reason for this encoding is that this used to match the type_of_loader field in the kernel header; the encoding is kept for backwards compatibility.  That is, if the full bootloader type number is 0x15 and the full version number is 0x234, this file will contain the value 340 = 0x154.  See the type_of_loader and ext_loader_type fields in Documentation/x86/boot.txt for additional information.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
bootloader_version	A										x86 bootloader version  The complete bootloader version number.  In the example above, this file will contain the value 564 = 0x234.  See the type_of_loader and ext_loader_ver fields in Documentation/x86/boot.txt for additional information.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
callhome	A										Controls the kernel's callhome behavior in case of a kernel panic.  The s390 hardware allows an operating system to send a notification to a service organization (callhome) in case of an operating system panic.  When the value in this file is 0 (which is the default behavior) nothing happens in case of a kernel panic. If this value is set to "1" the complete kernel oops message is send to the IBM customer service organization in case the mainframe the Linux operating system is running on has a service contract with IBM.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
core pattern	R	core_pattern										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
core pipe limit	R	core_pipe_limit										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
core uses pid	R	core_uses_pid										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
core-pattern	R	core_pattern										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
core-pipe-limit	R	core_pipe_limit										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
core-uses-pid	R	core_uses_pid										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
core_pattern	A										core_pattern is used to specify a core dumpfile pattern name. . max length 128 characters; default value is "core" . core_pattern is used as a pattern template for the output filename;   certain string patterns (beginning with '%') are substituted with   their actual values. . backward compatibility with core_uses_pid: 	If core_pattern does not include "%p" (default does not) 	and core_uses_pid is set, then .PID will be appended to 	the filename. . corename format specifiers: 	%<NUL>	'%' is dropped 	%%	output one '%' 	%p	pid 	%P	global pid (init PID namespace) 	%u	uid 	%g	gid 	%d	dump mode, matches PR_SET_DUMPABLE and 		/proc/sys/fs/suid_dumpable 	%s	signal number 	%t	UNIX time of dump 	%h	hostname 	%e	executable filename (may be shortened) 	%E	executable path 	%<OTHER> both are dropped . If the first character of the pattern is a '|', the kernel will treat   the rest of the pattern as a command to run.  The core dump will be   written to the standard input of that program instead of to a file.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
core_pipe_limit	A										This sysctl is only applicable when core_pattern is configured to pipe core files to a user space helper (when the first character of core_pattern is a '|', see above).  When collecting cores via a pipe to an application, it is occasionally useful for the collecting application to gather data about the crashing process from its /proc/pid directory.  In order to do this safely, the kernel must wait for the collecting process to exit, so as not to remove the crashing processes proc files prematurely.  This in turn creates the possibility that a misbehaving userspace collecting process can block the reaping of a crashed process simply by never exiting.  This sysctl defends against that.  It defines how many concurrent crashing processes may be piped to user space applications in parallel.  If this value is exceeded, then those crashing processes above that value are noted via the kernel log and their cores are skipped.  0 is a special value, indicating that unlimited processes may be captured in parallel, but that no waiting will take place (i.e. the collecting process is not guaranteed access to /proc/<crashing pid>/).  This value defaults to 0.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
core_uses_pid	A										The default coredump filename is "core".  By setting core_uses_pid to 1, the coredump filename becomes core.PID. If core_pattern does not include "%p" (default does not) and core_uses_pid is set, then .PID will be appended to the filename.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
ctrl alt del	R	ctrl-alt-del										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
ctrl-alt-del	A										When the value in this file is 0, ctrl-alt-del is trapped and sent to the init(1) program to handle a graceful restart. When, however, the value is > 0, Linux's reaction to a Vulcan Nerve Pinch (tm) will be an immediate reboot, without even syncing its dirty buffers.  Note: when a program (like dosemu) has the keyboard in 'raw' mode, the ctrl-alt-del is intercepted by the program before it ever reaches the kernel tty layer, and it's up to the program to decide what to do with it.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
ctrl_alt_del	R	ctrl-alt-del										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
ctrlaltdel	R	ctrl-alt-del										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
dmesg restrict	R	dmesg_restrict										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
dmesg-restrict	R	dmesg_restrict										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
dmesg_restrict	A										This toggle indicates whether unprivileged users are prevented from using dmesg(8) to view messages from the kernel's log buffer. When dmesg_restrict is set to (0) there are no restrictions. When dmesg_restrict is set set to (1), users must have CAP_SYSLOG to use dmesg(8).  The kernel config option CONFIG_SECURITY_DMESG_RESTRICT sets the default value of dmesg_restrict.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
domainname	R	domainname & hostname										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
domainname & hostname	A										These files can be used to set the NIS/YP domainname and the hostname of your box in exactly the same way as the commands domainname and hostname, i.e.: # echo "darkstar" > /proc/sys/kernel/hostname # echo "mydomain" > /proc/sys/kernel/domainname has the same effect as # hostname "darkstar" # domainname "mydomain"  Note, however, that the classic darkstar.frop.org has the hostname "darkstar" and DNS (Internet Domain Name Server) domainname "frop.org", not to be confused with the NIS (Network Information Service) or YP (Yellow Pages) domainname. These two domain names are in general different. For a detailed discussion see the hostname(1) man page.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
domainname-&-hostname	R	domainname & hostname										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
domainname_&_hostname	R	domainname & hostname										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
hostname	R	domainname & hostname										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
hotplug	A										Path for the hotplug policy agent. Default value is "/sbin/hotplug".	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
hung task check count	R	hung_task_check_count										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
hung task panic	R	hung_task_panic										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
hung task timeout secs	R	hung_task_timeout_secs										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
hung task warning	R	hung_task_warning										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
hung-task-check-count	R	hung_task_check_count										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
hung-task-panic	R	hung_task_panic										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
hung-task-timeout-secs	R	hung_task_timeout_secs										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
hung-task-warning	R	hung_task_warning										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
hung_task_check_count	A										The upper bound on the number of tasks that are checked. This file shows up if CONFIG_DETECT_HUNG_TASK is enabled.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
hung_task_panic	A										Controls the kernel's behavior when a hung task is detected. This file shows up if CONFIG_DETECT_HUNG_TASK is enabled.  0: continue operation. This is the default behavior.  1: panic immediately.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
hung_task_timeout_secs	A										Check interval. When a task in D state did not get scheduled for more than this value report a warning. This file shows up if CONFIG_DETECT_HUNG_TASK is enabled.  0: means infinite timeout - no checking done.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
hung_task_warning	A										The maximum number of warnings to report. During a check interval When this value is reached, no more the warnings will be reported. This file shows up if CONFIG_DETECT_HUNG_TASK is enabled.  -1: report an infinite number of warnings.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
kexec load disabled	R	kexec_load_disabled										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
kexec-load-disabled	R	kexec_load_disabled										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
kexec_load_disabled	A										A toggle indicating if the kexec_load syscall has been disabled. This value defaults to 0 (false: kexec_load enabled), but can be set to 1 (true: kexec_load disabled). Once true, kexec can no longer be used, and the toggle cannot be set back to false. This allows a kexec image to be loaded before disabling the syscall, allowing a system to set up (and later use) an image without it being altered. Generally used together with the "modules_disabled" sysctl.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
kptr restrict	R	kptr_restrict										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
kptr-restrict	R	kptr_restrict										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
kptr_restrict	A										This toggle indicates whether restrictions are placed on exposing kernel addresses via /proc and other interfaces.  When kptr_restrict is set to (0), the default, there are no restrictions.  When kptr_restrict is set to (1), kernel pointers printed using the %pK format specifier will be replaced with 0's unless the user has CAP_SYSLOG and effective user and group ids are equal to the real ids. This is because %pK checks are done at read() time rather than open() time, so if permissions are elevated between the open() and the read() (e.g via a setuid binary) then %pK will not leak kernel pointers to unprivileged users. Note, this is a temporary solution only. The correct long-term solution is to do the permission checks at open() time. Consider removing world read permissions from files that use %pK, and using dmesg_restrict to protect against uses of %pK in dmesg(8) if leaking kernel pointer values to unprivileged users is a concern.  When kptr_restrict is set to (2), kernel pointers printed using %pK will be replaced with 0's regardless of privileges.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
kstack depth to print	R	kstack_depth_to_print										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
kstack depth to print (x86 only)	R	kstack_depth_to_print (X86 only)										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
kstack-depth-to-print	R	kstack_depth_to_print										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
kstack-depth-to-print (x86 only)	R	kstack_depth_to_print (X86 only)										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
kstack_depth_to_print	R	kstack_depth_to_print (X86 only)										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
kstack_depth_to_print (x86 only)	A										  kstack_depth_to_print: (X86 only)  Controls the number of words to print when dumping the raw kernel stack.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
kstack_depth_to_print-(x86-only)	R	kstack_depth_to_print (X86 only)										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
kstack_depth_to_print_(x86_only)	R	kstack_depth_to_print (X86 only)										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
l2cr	R	l2cr (PPC only)										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
l2cr (ppc only)	A										  l2cr: (PPC only)  This flag controls the L2 cache of G3 processor boards. If 0, the cache is disabled. Enabled if nonzero.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
l2cr-(ppc-only)	R	l2cr (PPC only)										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
l2cr_(ppc_only)	R	l2cr (PPC only)										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
modules disabled	R	modules_disabled										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
modules-disabled	R	modules_disabled										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
modules_disabled	A										A toggle value indicating if modules are allowed to be loaded in an otherwise modular kernel.  This toggle defaults to off (0), but can be set true (1).  Once true, modules can be neither loaded nor unloaded, and the toggle cannot be set back to false.  Generally used with the "kexec_load_disabled" toggle.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
msg next id	R	msg_next_id										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
msg next id, sem next id, and shm next id	R	msg_next_id, sem_next_id, and shm_next_id										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
msg-next-id	R	msg_next_id										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
msg-next-id, sem-next-id, and shm-next-id	R	msg_next_id, sem_next_id, and shm_next_id										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
msg_next_id	R	msg_next_id, sem_next_id, and shm_next_id										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
msg_next_id, sem_next_id, and shm_next_id	A										These three toggles allows to specify desired id for next allocated IPC object: message, semaphore or shared memory respectively.  By default they are equal to -1, which means generic allocation logic. Possible values to set are in range {0..INT_MAX}.  Notes: 1) kernel doesn't guarantee, that new object will have desired id. So, it's up to userspace, how to handle an object with "wrong" id. 2) Toggle with non-default value will be set back to -1 by kernel after successful IPC object allocation.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
msg_next_id,-sem_next_id,-and-shm_next_id	R	msg_next_id, sem_next_id, and shm_next_id										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
msg_next_id,_sem_next_id,_and_shm_next_id	R	msg_next_id, sem_next_id, and shm_next_id										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
nmi watchdog	R	nmi_watchdog										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
nmi-watchdog	R	nmi_watchdog										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
nmi_watchdog	A										Enables/Disables the NMI watchdog on x86 systems. When the value is non-zero the NMI watchdog is enabled and will continuously test all online cpus to determine whether or not they are still functioning properly. Currently, passing "nmi_watchdog=" parameter at boot time is required for this function to work.  If LAPIC NMI watchdog method is in use (nmi_watchdog=2 kernel parameter), the NMI watchdog shares registers with oprofile. By disabling the NMI watchdog, oprofile may have more registers to utilize.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
ns last pid	R	ns_last_pid										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
ns-last-pid	R	ns_last_pid										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
ns_last_pid	A										The last pid allocated in the current (the one task using this sysctl lives in) pid namespace. When selecting a pid for a next task on fork kernel tries to allocate a number starting from this one.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
osrelease	R	osrelease, ostype & version										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
osrelease, ostype	R	osrelease, ostype & version										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
osrelease, ostype & version	A										# cat osrelease 2.1.88 # cat ostype Linux # cat version #5 Wed Feb 25 21:49:24 MET 1998  The files osrelease and ostype should be clear enough. Version needs a little more clarification however. The '#5' means that this is the fifth kernel built from this source base and the date behind it indicates the time the kernel was built. The only way to tune these values is to rebuild the kernel :-)	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
osrelease,-ostype	R	osrelease, ostype										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
osrelease,-ostype-&-version	R	osrelease, ostype & version										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
osrelease,_ostype	R	osrelease, ostype										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
osrelease,_ostype_&_version	R	osrelease, ostype & version										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
ostype & version	R	osrelease, ostype & version										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
ostype-&-version	R	ostype & version										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
ostype_&_version	R	ostype & version										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
overflowgid	R	overflowgid & overflowuid										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
overflowgid & overflowuid	A										if your architecture did not always support 32-bit UIDs (i.e. arm, i386, m68k, sh, and sparc32), a fixed UID and GID will be returned to applications that use the old 16-bit UID/GID system calls, if the actual UID or GID would exceed 65535.  These sysctls allow you to change the value of the fixed UID and GID. The default is 65534.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
overflowgid-&-overflowuid	R	overflowgid & overflowuid										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
overflowgid_&_overflowuid	R	overflowgid & overflowuid										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
overflowuid	R	overflowgid & overflowuid										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
panic	A										The value in this file represents the number of seconds the kernel waits before rebooting on a panic. When you use the software watchdog, the recommended setting is 60.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
panic on oops	R	panic_on_oops										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
panic on stackoverflow	R	panic_on_stackoverflow										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
panic on unrecovered nmi	R	panic_on_unrecovered_nmi										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
panic-on-oops	R	panic_on_oops										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
panic-on-stackoverflow	R	panic_on_stackoverflow										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
panic-on-unrecovered-nmi	R	panic_on_unrecovered_nmi										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
panic_on_oops	A										Controls the kernel's behaviour when an oops or BUG is encountered.  0: try to continue operation  1: panic immediately.  If the `panic' sysctl is also non-zero then the    machine will be rebooted.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
panic_on_stackoverflow	A										Controls the kernel's behavior when detecting the overflows of kernel, IRQ and exception stacks except a user stack. This file shows up if CONFIG_DEBUG_STACKOVERFLOW is enabled.  0: try to continue operation.  1: panic immediately.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
panic_on_unrecovered_nmi	A										The default Linux behaviour on an NMI of either memory or unknown is to continue operation. For many environments such as scientific computing it is preferable that the box is taken out and the error dealt with than an uncorrected parity/ECC error get propagated.  A small number of systems do generate NMI's for bizarre random reasons such as power management so the default is off. That sysctl works like the existing panic controls already in that directory.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
perf cpu time max percent	R	perf_cpu_time_max_percent										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
perf-cpu-time-max-percent	R	perf_cpu_time_max_percent										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
perf_cpu_time_max_percent	A										Hints to the kernel how much CPU time it should be allowed to use to handle perf sampling events.  If the perf subsystem is informed that its samples are exceeding this limit, it will drop its sampling frequency to attempt to reduce its CPU usage.  Some perf sampling happens in NMIs.  If these samples unexpectedly take too long to execute, the NMIs can become stacked up next to each other so much that nothing else is allowed to execute.  0: disable the mechanism.  Do not monitor or correct perf's    sampling rate no matter how CPU time it takes.  1-100: attempt to throttle perf's sample rate to this    percentage of CPU.  Note: the kernel calculates an    "expected" length of each sample event.  100 here means    100% of that expected length.  Even if this is set to    100, you may still see sample throttling if this    length is exceeded.  Set to 0 if you truly do not care    how much CPU is consumed.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
pid max	R	pid_max										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
pid-max	R	pid_max										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
pid_max	A										 PID allocation wrap value.  When the kernel's next PID value reaches this value, it wraps back to a minimum PID value. PIDs of value pid_max or larger are not allocated.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
powersave nap	R	powersave-nap										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
powersave nap (ppc only)	R	powersave-nap (PPC only)										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
powersave-nap	R	powersave-nap (PPC only)										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
powersave-nap (ppc only)	A										  powersave-nap: (PPC only)  If set, Linux-PPC will use the 'nap' mode of powersaving, otherwise the 'doze' mode will be used.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
powersave-nap-(ppc-only)	R	powersave-nap (PPC only)										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
powersave-nap_(ppc_only)	R	powersave-nap (PPC only)										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
powersave_nap	R	powersave-nap										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
powersave_nap (ppc only)	R	powersave-nap (PPC only)										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
powersavenap	R	powersave-nap										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
powersavenap (ppc only)	R	powersave-nap (PPC only)										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
ppc only	R	powersave-nap (PPC only)										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
ppc-only	R	PPC only										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
ppc_only	R	PPC only										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
printk	A										The four values in printk denote: console_loglevel, default_message_loglevel, minimum_console_loglevel and default_console_loglevel respectively.  These values influence printk() behavior when printing or logging error messages. See 'man 2 syslog' for more info on the different loglevels.  - console_loglevel: messages with a higher priority than   this will be printed to the console - default_message_loglevel: messages without an explicit priority   will be printed with this priority - minimum_console_loglevel: minimum (highest) value to which   console_loglevel can be set - default_console_loglevel: default value for console_loglevel	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
printk delay	R	printk_delay										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
printk ratelimit	R	printk_ratelimit										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
printk ratelimit burst	R	printk_ratelimit_burst										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
printk-delay	R	printk_delay										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
printk-ratelimit	R	printk_ratelimit										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
printk-ratelimit-burst	R	printk_ratelimit_burst										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
printk_delay	A										Delay each printk message in printk_delay milliseconds  Value from 0 - 10000 is allowed.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
printk_ratelimit	A										Some warning messages are rate limited. printk_ratelimit specifies the minimum length of time between these messages (in jiffies), by default we allow one every 5 seconds.  A value of 0 will disable rate limiting.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
printk_ratelimit_burst	A										While long term we enforce one message per printk_ratelimit seconds, we do allow a burst of messages to pass through. printk_ratelimit_burst specifies the number of messages we can send before ratelimiting kicks in.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
randomize va space	R	randomize_va_space										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
randomize-va-space	R	randomize_va_space										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
randomize_va_space	A										This option can be used to select the type of process address space randomization that is used in the system, for architectures that support this feature.  0 - Turn the process address space randomization off.  This is the     default for architectures that do not support this feature anyways,     and kernels that are booted with the "norandmaps" parameter.  1 - Make the addresses of mmap base, stack and VDSO page randomized.     This, among other things, implies that shared libraries will be     loaded to random addresses.  Also for PIE-linked binaries, the     location of code start is randomized.  This is the default if the     CONFIG_COMPAT_BRK option is enabled.  2 - Additionally enable heap randomization.  This is the default if     CONFIG_COMPAT_BRK is disabled.      There are a few legacy applications out there (such as some ancient     versions of libc.so.5 from 1996) that assume that brk area starts     just after the end of the code+bss.  These applications break when     start of the brk area is randomized.  There are however no known     non-legacy applications that would be broken this way, so for most     systems it is safe to choose full randomization.      Systems with ancient and/or broken binaries should be configured     with CONFIG_COMPAT_BRK enabled, which excludes the heap from process     address space randomization.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
reboot cmd	R	reboot-cmd										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
reboot cmd (sparc only)	R	reboot-cmd (Sparc only)										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
reboot-cmd	R	reboot-cmd (Sparc only)										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
reboot-cmd (sparc only)	A										  reboot-cmd: (Sparc only)  ??? This seems to be a way to give an argument to the Sparc ROM/Flash boot loader. Maybe to tell it what to do after rebooting. ???	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
reboot-cmd-(sparc-only)	R	reboot-cmd (Sparc only)										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
reboot-cmd_(sparc_only)	R	reboot-cmd (Sparc only)										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
reboot_cmd	R	reboot-cmd										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
reboot_cmd (sparc only)	R	reboot-cmd (Sparc only)										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
rebootcmd	R	reboot-cmd										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
rebootcmd (sparc only)	R	reboot-cmd (Sparc only)										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
rtsig max	R	rtsig-max										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
rtsig max & rtsig nr	R	rtsig-max & rtsig-nr										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
rtsig nr	R	rtsig-nr										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
rtsig-max	R	rtsig-max & rtsig-nr										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
rtsig-max & rtsig-nr	A										The file rtsig-max can be used to tune the maximum number of POSIX realtime (queued) signals that can be outstanding in the system.  rtsig-nr shows the number of RT signals currently queued.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
rtsig-max-&-rtsig-nr	R	rtsig-max & rtsig-nr										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
rtsig-max_&_rtsig-nr	R	rtsig-max & rtsig-nr										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
rtsig-nr	R	rtsig-max & rtsig-nr										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
rtsig_max	R	rtsig-max										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
rtsig_max & rtsig_nr	R	rtsig-max & rtsig-nr										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
rtsig_nr	R	rtsig-nr										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
rtsigmax	R	rtsig-max										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
rtsigmax & rtsignr	R	rtsig-max & rtsig-nr										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
rtsignr	R	rtsig-nr										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
sem next id	R	sem_next_id										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
sem-next-id	R	sem_next_id										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
sem_next_id	R	msg_next_id, sem_next_id, and shm_next_id										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
sg big buff	R	sg-big-buff										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
sg-big-buff	A										This file shows the size of the generic SCSI (sg) buffer. You can't tune it just yet, but you could change it on compile time by editing include/scsi/sg.h and changing the value of SG_BIG_BUFF.  There shouldn't be any reason to change this value. If you can come up with one, you probably know what you are doing anyway :)	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
sg_big_buff	R	sg-big-buff										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
sgbigbuff	R	sg-big-buff										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
shm next id	R	shm_next_id										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
shm rmid forced	R	shm_rmid_forced										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
shm-next-id	R	shm_next_id										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
shm-rmid-forced	R	shm_rmid_forced										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
shm_next_id	R	msg_next_id, sem_next_id, and shm_next_id										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
shm_rmid_forced	A										Linux lets you set resource limits, including how much memory one process can consume, via setrlimit(2).  Unfortunately, shared memory segments are allowed to exist without association with any process, and thus might not be counted against any resource limits.  If enabled, shared memory segments are automatically destroyed when their attach count becomes zero after a detach or a process termination.  It will also destroy segments that were created, but never attached to, on exit from the process.  The only use left for IPC_RMID is to immediately destroy an unattached segment.  Of course, this breaks the way things are defined, so some applications might stop working.  Note that this feature will do you no good unless you also configure your resource limits (in particular, RLIMIT_AS and RLIMIT_NPROC).  Most systems don't need this.  Note that if you change this from 0 to 1, already created segments without users and with a dead originative process will be destroyed.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
shmall	A										This parameter sets the total amount of shared memory pages that can be used system wide. Hence, SHMALL should always be at least ceil(shmmax/PAGE_SIZE).  If you are not sure what the default PAGE_SIZE is on your Linux system, you can run the following command:  # getconf PAGE_SIZE	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
shmmax	A										This value can be used to query and set the run time limit on the maximum shared memory segment size that can be created. Shared memory segments up to 1Gb are now supported in the kernel.  This value defaults to SHMMAX.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
sparc only	R	reboot-cmd (Sparc only)										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
sparc-only	R	Sparc only										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
sparc_only	R	Sparc only										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
tainted	A										Non-zero if the kernel has been tainted.  Numeric values, which can be ORed together:     1 - A module with a non-GPL license has been loaded, this        includes modules with no license.        Set by modutils >= 2.4.9 and module-init-tools.    2 - A module was force loaded by insmod -f.        Set by modutils >= 2.4.9 and module-init-tools.    4 - Unsafe SMP processors: SMP with CPUs not designed for SMP.    8 - A module was forcibly unloaded from the system by rmmod -f.   16 - A hardware machine check error occurred on the system.   32 - A bad page was discovered on the system.   64 - The user has asked that the system be marked "tainted".  This        could be because they are running software that directly modifies        the hardware, or for other reasons.  128 - The system has died.  256 - The ACPI DSDT has been overridden with one supplied by the user         instead of using the one provided by the hardware.  512 - A kernel warning has occurred. 1024 - A module from drivers/staging was loaded. 2048 - The system is working around a severe firmware bug. 4096 - An out-of-tree module has been loaded.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
unknown nmi panic	R	unknown_nmi_panic										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
unknown-nmi-panic	R	unknown_nmi_panic										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
unknown_nmi_panic	A										The value in this file affects behavior of handling NMI. When the value is non-zero, unknown NMI is trapped and then panic occurs. At that time, kernel debugging information is displayed on console.  NMI switch that most IA32 servers have fires unknown NMI up, for example.  If a system hangs up, try pressing the NMI switch.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
version	R	osrelease, ostype & version										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
watchdog thresh	R	watchdog_thresh										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
watchdog-thresh	R	watchdog_thresh										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
watchdog_thresh	A										This value can be used to control the frequency of hrtimer and NMI events and the soft and hard lockup thresholds. The default threshold is 10 seconds.  The softlockup threshold is (2 * watchdog_thresh). Setting this tunable to zero will disable lockup detection altogether.	https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
x86 only	R	kstack_depth_to_print (X86 only)										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
x86-only	R	X86 only										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt
x86_only	R	X86 only										https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysctl/kernel.txt