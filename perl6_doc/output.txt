AST	A			Perl 6 AST							<pre><code>class AST { }</code></pre>An AST or Abstract Syntax Tree is a partially processed representation of a program. ASTs are return values of the quasi quoting construct, and are typically used withing macros to generate code that is inserted in the calling location of the macro.	http://doc.perl6.org/type/AST
AST.ACCEPTS	R	Any.ACCEPTS										
AST.any	R	Any.any										
AST.all	R	Any.all										
AST.one	R	Any.one										
AST.none	R	Any.none										
AST.defined	R	Mu.defined										
AST.Bool	R	Mu.Bool										
AST.Str	R	Mu.Str										
AST.gist	R	Mu.gist										
AST.perl	R	Mu.perl										
AST.clone	R	Mu.clone										
AST.new	R	Mu.new										
AST.bless	R	Mu.bless										
AST.CREATE	R	Mu.CREATE										
AST.print	R	Mu.print										
AST.say	R	Mu.say										
AST.ACCEPTS	R	Mu.ACCEPTS										
AST.WHICH	R	Mu.WHICH										
Any	A			Perl 6 Any							<pre><code>class Any is Mu { ... }</code></pre>While Mu is the root of the Perl 6 class hirarchy, Any is the class that serves as a default base class for new classes, and as the base class for most built-in classes.	http://doc.perl6.org/type/Any
Any.ACCEPTS	A			Perl 6 Any							<pre><code>multi method ACCEPTS(Any:D: Mu $other)</code></pre>Returns True if $other === self (ie it checks object identity).	http://doc.perl6.org/type/Any#ACCEPTS
ACCEPTS	D								*[[Any.ACCEPTS]], returns True if $other === self (ie it checks object identity).\n*[[Code.ACCEPTS]], usually calls the code object and passes $topic as an argument. \n*[[EnumMap.ACCEPTS]], used in smart-matching if the right-hand side is an EnumMap.\n*[[Mu.ACCEPTS]], performs a type check. \n*[[Numeric.ACCEPTS]], returns True if $other is numerically the same as the invocant.\n*[[Whatever.ACCEPTS]], returns True.			
Any.any	A			Perl 6 Any							Interprets the invocant as a list and creates an any-Junction from it.	http://doc.perl6.org/type/Any#any
any	R	Any.any										
Any.all	A			Perl 6 Any							Interprets the invocant as a list and creates an all-Junction from it.	http://doc.perl6.org/type/Any#all
all	R	Any.all										
Any.one	A			Perl 6 Any							Interprets the invocant as a list and creates an one-Junction from it.	http://doc.perl6.org/type/Any#one
one	R	Any.one										
Any.none	A			Perl 6 Any							Interprets the invocant as a list and creates an none-Junction from it.	http://doc.perl6.org/type/Any#none
none	R	Any.none										
Any.defined	R	Mu.defined										
Any.Bool	R	Mu.Bool										
Any.Str	R	Mu.Str										
Any.gist	R	Mu.gist										
Any.perl	R	Mu.perl										
Any.clone	R	Mu.clone										
Any.new	R	Mu.new										
Any.bless	R	Mu.bless										
Any.CREATE	R	Mu.CREATE										
Any.print	R	Mu.print										
Any.say	R	Mu.say										
Any.ACCEPTS	R	Mu.ACCEPTS										
Any.WHICH	R	Mu.WHICH										
Array	A			Perl 6 Array							<pre><code>class Array is List { ... }</code></pre>An Array is a List which forces all its elements to be scalar containers, which means you can assign to array elements.	http://doc.perl6.org/type/Array
Array.elems	R	List.elems										
Array.end	R	List.end										
Array.keys	R	List.keys										
Array.values	R	List.values										
Array.kv	R	List.kv										
Array.pairs	R	List.pairs										
Array.join	R	List.join										
Array.map	R	List.map										
Array.grep	R	List.grep										
Array.first	R	List.first										
Array.classify	R	List.classify										
Array.Bool	R	List.Bool										
Array.Str	R	List.Str										
Array.Int	R	List.Int										
Array.pick	R	List.pick										
Array.roll	R	List.roll										
Array.eager	R	List.eager										
Array.reverse	R	List.reverse										
Array.rotate	R	List.rotate										
Array.sort	R	List.sort										
Array.reduce	R	List.reduce										
Array.splice	R	List.splice										
Array.pop	R	List.pop										
Array.push	R	List.push										
Array.shift	R	List.shift										
Array.unshift	R	List.unshift										
Array.of	R	Positional.of										
Array.ACCEPTS	R	Any.ACCEPTS										
Array.any	R	Any.any										
Array.all	R	Any.all										
Array.one	R	Any.one										
Array.none	R	Any.none										
Array.defined	R	Mu.defined										
Array.Bool	R	Mu.Bool										
Array.Str	R	Mu.Str										
Array.gist	R	Mu.gist										
Array.perl	R	Mu.perl										
Array.clone	R	Mu.clone										
Array.new	R	Mu.new										
Array.bless	R	Mu.bless										
Array.CREATE	R	Mu.CREATE										
Array.print	R	Mu.print										
Array.say	R	Mu.say										
Array.ACCEPTS	R	Mu.ACCEPTS										
Array.WHICH	R	Mu.WHICH										
Associative	A			Perl 6 Associative							<pre><code>role Associative { }</code></pre>A common role for types that support name-based lookup through &lt; postcircumfix:&lt;{ } &gt;&gt;, for example Hash and EnumMap. 	http://doc.perl6.org/type/Associative
Backtrace	A			Perl 6 Backtrace							<pre><code>class Backtrace is List { ... }</code></pre>A backtrace shows the dynamic call stack, usually leading up to a point where an exception was thrown.	http://doc.perl6.org/type/Backtrace
Backtrace.new	A			Perl 6 Backtrace							<pre><code>proto method new(*@, *%) {*}<br>multi method new()</code></pre>Creates a new backtrace, using its calling location as the origin of the backtrace.	http://doc.perl6.org/type/Backtrace#new
new	D								*[[Backtrace.new]], creates a new backtrace, using its calling location as the origin of the backtrace.\n*[[Buf.new]], creates a Buf from a list of integers.\n*[[Complex.new]], creates a new Complex object from real and imaginary parts.\n*[[Date.new]], creates a new Date object, either from a tripple of (year, month, day) integers, or from a string of the form YYYY-MM-DD (ISO 8601), or from a DateTime object.\n*[[EnumMap.new]], creates a new EnumMap from a list of alternating keys and values, with the same semantics as described for hash assigning in the Hash documentation.\n*[[Mu.new]], default method for constructing (create + initialize) new objects of a class. \n*[[Rational.new]], creates a new rational object from numerator and denominator.\n*[[Version.new]], creates a Version from a string $s. 			
Backtrace.Str	A			Perl 6 Backtrace							<pre><code>multi method Str(Backtrace:D:) returns Str:D:</code></pre>Returns a concise string representation of the backtrace, omitting routines marked as is hidden_from_backtrace, and at the discretion of the implementor, also some routines from the setting.	http://doc.perl6.org/type/Backtrace#Str
Backtrace.full	A			Perl 6 Backtrace							<pre><code>multi method full(Backtrace:D:) returns Str:D:</code></pre>Returns a full string representation of the backtrace, including hidden frames, compiler-specific frames and those from the setting.	http://doc.perl6.org/type/Backtrace#full
full	R	Backtrace.full										
Backtrace.elems	R	List.elems										
Backtrace.end	R	List.end										
Backtrace.keys	R	List.keys										
Backtrace.values	R	List.values										
Backtrace.kv	R	List.kv										
Backtrace.pairs	R	List.pairs										
Backtrace.join	R	List.join										
Backtrace.map	R	List.map										
Backtrace.grep	R	List.grep										
Backtrace.first	R	List.first										
Backtrace.classify	R	List.classify										
Backtrace.Bool	R	List.Bool										
Backtrace.Str	R	List.Str										
Backtrace.Int	R	List.Int										
Backtrace.pick	R	List.pick										
Backtrace.roll	R	List.roll										
Backtrace.eager	R	List.eager										
Backtrace.reverse	R	List.reverse										
Backtrace.rotate	R	List.rotate										
Backtrace.sort	R	List.sort										
Backtrace.reduce	R	List.reduce										
Backtrace.splice	R	List.splice										
Backtrace.pop	R	List.pop										
Backtrace.push	R	List.push										
Backtrace.shift	R	List.shift										
Backtrace.unshift	R	List.unshift										
Backtrace.of	R	Positional.of										
Backtrace.ACCEPTS	R	Any.ACCEPTS										
Backtrace.any	R	Any.any										
Backtrace.all	R	Any.all										
Backtrace.one	R	Any.one										
Backtrace.none	R	Any.none										
Backtrace.defined	R	Mu.defined										
Backtrace.Bool	R	Mu.Bool										
Backtrace.Str	R	Mu.Str										
Backtrace.gist	R	Mu.gist										
Backtrace.perl	R	Mu.perl										
Backtrace.clone	R	Mu.clone										
Backtrace.new	R	Mu.new										
Backtrace.bless	R	Mu.bless										
Backtrace.CREATE	R	Mu.CREATE										
Backtrace.print	R	Mu.print										
Backtrace.say	R	Mu.say										
Backtrace.ACCEPTS	R	Mu.ACCEPTS										
Backtrace.WHICH	R	Mu.WHICH										
Backtrace::Frame	A			Perl 6 Backtrace::Frame							<pre><code>class Backtrace::Frame { }</code></pre>A single backtrace frame. It identifies a location in the source code.	http://doc.perl6.org/type/Backtrace%3A%3AFrame
Backtrace::Frame.file	A			Perl 6 Backtrace::Frame							<pre><code>method file(Backtrace::Frame:D) returns Str</code></pre>Returns the file name.	http://doc.perl6.org/type/Backtrace%3A%3AFrame#file
file	R	Backtrace::Frame.file										
Backtrace::Frame.line	A			Perl 6 Backtrace::Frame							<pre><code>method line(Backtrace::Frame:D) returns Int</code></pre>Returns the line number (line numbers start to count from 1).	http://doc.perl6.org/type/Backtrace%3A%3AFrame#line
line	R	Backtrace::Frame.line										
Backtrace::Frame.code	A			Perl 6 Backtrace::Frame							<pre><code>method code(Backtrace::Frame:D)</code></pre>Returns the code object into which .file and .line point, if avaialble.	http://doc.perl6.org/type/Backtrace%3A%3AFrame#code
code	R	Backtrace::Frame.code										
Backtrace::Frame.subname	A			Perl 6 Backtrace::Frame							<pre><code>method subname(Backtrace::Frame:D) returns Str</code></pre>Returns the name of the enclosing subroutine.	http://doc.perl6.org/type/Backtrace%3A%3AFrame#subname
subname	R	Backtrace::Frame.subname										
Backtrace::Frame.is-hidden	A			Perl 6 Backtrace::Frame							<pre><code>method is-hidden(Backtrace::Frame:D) return Bool:D</code></pre>Returns True if the frame is marked as hidden with the is hidden_from_backtrace trait.	http://doc.perl6.org/type/Backtrace%3A%3AFrame#is-hidden
is-hidden	R	Backtrace::Frame.is-hidden										
Backtrace::Frame.is-routine	A			Perl 6 Backtrace::Frame							<pre><code>method is-routine(Backtrace::Frame:D) return Bool:D</code></pre>Return True if the frame point into a routine (and not into a mere Block).	http://doc.perl6.org/type/Backtrace%3A%3AFrame#is-routine
is-routine	R	Backtrace::Frame.is-routine										
Backtrace::Frame.is-setting	A			Perl 6 Backtrace::Frame							<pre><code>method is-setting(Backtrace::Frame:D) return Bool:D</code></pre>Returns True if the frame is part of a setting.	http://doc.perl6.org/type/Backtrace%3A%3AFrame#is-setting
is-setting	R	Backtrace::Frame.is-setting										
Backtrace::Frame.ACCEPTS	R	Any.ACCEPTS										
Backtrace::Frame.any	R	Any.any										
Backtrace::Frame.all	R	Any.all										
Backtrace::Frame.one	R	Any.one										
Backtrace::Frame.none	R	Any.none										
Backtrace::Frame.defined	R	Mu.defined										
Backtrace::Frame.Bool	R	Mu.Bool										
Backtrace::Frame.Str	R	Mu.Str										
Backtrace::Frame.gist	R	Mu.gist										
Backtrace::Frame.perl	R	Mu.perl										
Backtrace::Frame.clone	R	Mu.clone										
Backtrace::Frame.new	R	Mu.new										
Backtrace::Frame.bless	R	Mu.bless										
Backtrace::Frame.CREATE	R	Mu.CREATE										
Backtrace::Frame.print	R	Mu.print										
Backtrace::Frame.say	R	Mu.say										
Backtrace::Frame.ACCEPTS	R	Mu.ACCEPTS										
Backtrace::Frame.WHICH	R	Mu.WHICH										
Block	A			Perl 6 Block							<pre><code>class Block is Code { }</code></pre>A Block is a code object meant for small-scale code reuse. A block is created syntactically by a list of statements enclosed in curly brackets.	http://doc.perl6.org/type/Block
Block.ACCEPTS	R	Code.ACCEPTS										
Block.arity	R	Code.arity										
Block.count	R	Code.count										
Block.signature	R	Code.signature										
Block.Str	R	Code.Str										
Block.ACCEPTS	R	Any.ACCEPTS										
Block.any	R	Any.any										
Block.all	R	Any.all										
Block.one	R	Any.one										
Block.none	R	Any.none										
Block.defined	R	Mu.defined										
Block.Bool	R	Mu.Bool										
Block.Str	R	Mu.Str										
Block.gist	R	Mu.gist										
Block.perl	R	Mu.perl										
Block.clone	R	Mu.clone										
Block.new	R	Mu.new										
Block.bless	R	Mu.bless										
Block.CREATE	R	Mu.CREATE										
Block.print	R	Mu.print										
Block.say	R	Mu.say										
Block.ACCEPTS	R	Mu.ACCEPTS										
Block.WHICH	R	Mu.WHICH										
Bool	A			Perl 6 Bool							<pre><code>enum Bool &lt;False True&gt;</code></pre>An enum for boolean true/false decisions	http://doc.perl6.org/type/Bool
Bool.prefix:&lt;?&gt;	A			Perl 6 Bool							<pre><code>multi sub prefix:&lt;?&gt;(Mu) returns Bool:D</code></pre>Coerces its argument to Bool.	http://doc.perl6.org/type/Bool#prefix%3A%3C%3F%3E
prefix:&lt;?&gt;	R	Bool.prefix:&lt;?&gt;										
Bool.prefix:&lt;so&gt;	A			Perl 6 Bool							<pre><code>multi sub prefix:&lt;so&gt;(Mu) returns Bool:D</code></pre>Coerces its argument to Bool, has looser precedence than &lt; prefix:&lt;? &gt;&gt;.	http://doc.perl6.org/type/Bool#prefix%3A%3Cso%3E
prefix:&lt;so&gt;	R	Bool.prefix:&lt;so&gt;										
Bool.ACCEPTS	R	Any.ACCEPTS										
Bool.any	R	Any.any										
Bool.all	R	Any.all										
Bool.one	R	Any.one										
Bool.none	R	Any.none										
Bool.defined	R	Mu.defined										
Bool.Bool	R	Mu.Bool										
Bool.Str	R	Mu.Str										
Bool.gist	R	Mu.gist										
Bool.perl	R	Mu.perl										
Bool.clone	R	Mu.clone										
Bool.new	R	Mu.new										
Bool.bless	R	Mu.bless										
Bool.CREATE	R	Mu.CREATE										
Bool.print	R	Mu.print										
Bool.say	R	Mu.say										
Bool.ACCEPTS	R	Mu.ACCEPTS										
Bool.WHICH	R	Mu.WHICH										
Buf	A			Perl 6 Buf							<pre><code>class Buf does Positional { ... }</code></pre>A Buf (short for buffer) is a binary string, and generally returned from low-level IO operations ($io.read($number-of-by)) or from Str.encode. It can be used to for writing to IO handles as $io.write($buf).	http://doc.perl6.org/type/Buf
Buf.new	A			Perl 6 Buf							<pre><code>method new(*@codes)</code></pre>Creates a Buf from a list of integers.	http://doc.perl6.org/type/Buf#new
Buf.Bool	A			Perl 6 Buf							<pre><code>multi method Bool(Buf:D:)</code></pre>Returns False if and only if the buffer is empty.	http://doc.perl6.org/type/Buf#Bool
Buf.elems	A			Perl 6 Buf							<pre><code>multi method elems(Buf:D:) returns Int:D</code></pre>Returns the number of elements of the buffer.	http://doc.perl6.org/type/Buf#elems
elems	D								*[[Buf.elems]], returns the number of elements of the buffer.\n*[[EnumMap.elems]], returns the number of pairs stored in the EnumMap.\n*[[List.elems]], returns the number of elements in the list.			
Buf.decode	A			Perl 6 Buf							<pre><code>multi method decode(Buf:D: Str:D $encoding = 'UTF-8') returns Str:D</code></pre>Applies an encoding to turn the buffer into a Str.	http://doc.perl6.org/type/Buf#decode
decode	R	Buf.decode										
Buf.of	R	Positional.of										
Buf.ACCEPTS	R	Any.ACCEPTS										
Buf.any	R	Any.any										
Buf.all	R	Any.all										
Buf.one	R	Any.one										
Buf.none	R	Any.none										
Buf.defined	R	Mu.defined										
Buf.Bool	R	Mu.Bool										
Buf.Str	R	Mu.Str										
Buf.gist	R	Mu.gist										
Buf.perl	R	Mu.perl										
Buf.clone	R	Mu.clone										
Buf.new	R	Mu.new										
Buf.bless	R	Mu.bless										
Buf.CREATE	R	Mu.CREATE										
Buf.print	R	Mu.print										
Buf.say	R	Mu.say										
Buf.ACCEPTS	R	Mu.ACCEPTS										
Buf.WHICH	R	Mu.WHICH										
Callable	A			Perl 6 Callable							<pre><code>role Callable { ... }</code></pre>Role for objects which support calling them. It's used in Block, Routine, Sub, Method, Submethod and Macro types.	http://doc.perl6.org/type/Callable
Code	A			Perl 6 Code							<pre><code>class Code is Any does Callable { ... }</code></pre>Code is the ultimate base class of all code objects in Perl 6. It exposes functionality that all code objects have. While thunks are directly of type Code, most code objects (such as those resulting from blocks, subroutines or methods) will be of some subclass of Code.	http://doc.perl6.org/type/Code
Code.ACCEPTS	A			Perl 6 Code							<pre><code>multi method ACCEPTS(Code:D: Mu $topic)</code></pre>Usually calls the code object and passes $topic as an argument. However, when called on a code object that takes no arguments, the code object is invoked with no arguments and $topic is dropped. The result of the call is returned.	http://doc.perl6.org/type/Code#ACCEPTS
Code.arity	A			Perl 6 Code							<pre><code>method arity(Code:D:) returns Int:D</code></pre>Returns the minimum number of positional arguments that must be passed in order to call the code object. Any optional or slurpy parameters in the code object's Signature do not contribute, nor do named parameters.	http://doc.perl6.org/type/Code#arity
arity	D								*[[Code.arity]], returns the minimum number of positional arguments that must be passed in order to call the code object. \n*[[Signature.arity]], returns the minimal number of positional arguments required to satisfy the signature.			
Code.count	A			Perl 6 Code							<pre><code>method count(Code:D:) returns Real:D</code></pre>Returns the maximum number of positional arguments that may be passed when calling the code object. For code objects that can accept any number of positional arguments (that is, they have a slurpy parameter), count will return Inf. Named parameters do not contribute.	http://doc.perl6.org/type/Code#count
count	D								*[[Code.count]], returns the maximum number of positional arguments that may be passed when calling the code object. \n*[[Signature.count]], returns the maximal number of positional arguments which can be bound to the signature. 			
Code.signature	A			Perl 6 Code							<pre><code>multi method signature(Code:D:) returns Signature:D</code></pre>Returns the Signature object for this code object, which describes its parameters.	http://doc.perl6.org/type/Code#signature
signature	R	Code.signature										
Code.Str	A			Perl 6 Code							<pre><code>multi method Str(Code:D:) returns Str:D</code></pre>Returns the name of the code object.	http://doc.perl6.org/type/Code#Str
Code.ACCEPTS	R	Any.ACCEPTS										
Code.any	R	Any.any										
Code.all	R	Any.all										
Code.one	R	Any.one										
Code.none	R	Any.none										
Code.defined	R	Mu.defined										
Code.Bool	R	Mu.Bool										
Code.Str	R	Mu.Str										
Code.gist	R	Mu.gist										
Code.perl	R	Mu.perl										
Code.clone	R	Mu.clone										
Code.new	R	Mu.new										
Code.bless	R	Mu.bless										
Code.CREATE	R	Mu.CREATE										
Code.print	R	Mu.print										
Code.say	R	Mu.say										
Code.ACCEPTS	R	Mu.ACCEPTS										
Code.WHICH	R	Mu.WHICH										
Complex	A			Perl 6 Complex							<pre><code>class Complex is Cool does Numeric { ... }</code></pre>Represents a number in the complex plane.	http://doc.perl6.org/type/Complex
Complex.new	A			Perl 6 Complex							<pre><code>proto method new(*@, *%) {*} returns Complex:D<br>multi method new(Real $re, Real $im) returns Complex:D</code></pre>Creates a new Complex object from real and imaginary parts.	http://doc.perl6.org/type/Complex#new
Complex.re	A			Perl 6 Complex							<pre><code>method re(Complex:D:) returns Real:D</code></pre>Returns the real part of the complex number.	http://doc.perl6.org/type/Complex#re
re	R	Complex.re										
Complex.im	A			Perl 6 Complex							<pre><code>method im(Complex:D:) returns Real:D</code></pre>Returns the imaginary part of the complex number.	http://doc.perl6.org/type/Complex#im
im	R	Complex.im										
Complex.isNaN	A			Perl 6 Complex							<pre><code>method isNaN(Complex:D:) returns Bool:D</code></pre>Returns true if the real or imaginary part is NaN (not a number).	http://doc.perl6.org/type/Complex#isNaN
isNaN	R	Complex.isNaN										
Complex.polar	A			Perl 6 Complex							<pre><code>method polar(Complex:D:) returns Positional:D</code></pre>Returns a two-element list of the polar coordinates for this value, ie magnitude and angle in radians.	http://doc.perl6.org/type/Complex#polar
polar	R	Complex.polar										
Complex.Real	R	Numeric.Real										
Complex.Int	R	Numeric.Int										
Complex.Rat	R	Numeric.Rat										
Complex.Num	R	Numeric.Num										
Complex.ACCEPTS	R	Numeric.ACCEPTS										
Complex.log	R	Numeric.log										
Complex.log10	R	Numeric.log10										
Complex.exp	R	Numeric.exp										
Complex.roots	R	Numeric.roots										
Complex.abs	R	Numeric.abs										
Complex.sqrt	R	Numeric.sqrt										
Complex.conj	R	Numeric.conj										
Complex.Bool	R	Numeric.Bool										
Complex.succ	R	Numeric.succ										
Complex.pred	R	Numeric.pred										
Complex.ACCEPTS	R	Any.ACCEPTS										
Complex.any	R	Any.any										
Complex.all	R	Any.all										
Complex.one	R	Any.one										
Complex.none	R	Any.none										
Complex.defined	R	Mu.defined										
Complex.Bool	R	Mu.Bool										
Complex.Str	R	Mu.Str										
Complex.gist	R	Mu.gist										
Complex.perl	R	Mu.perl										
Complex.clone	R	Mu.clone										
Complex.new	R	Mu.new										
Complex.bless	R	Mu.bless										
Complex.CREATE	R	Mu.CREATE										
Complex.print	R	Mu.print										
Complex.say	R	Mu.say										
Complex.ACCEPTS	R	Mu.ACCEPTS										
Complex.WHICH	R	Mu.WHICH										
Cool	A			Perl 6 Cool							<pre><code>class Cool is Any { }</code></pre>Cool, also known as the Convenient OO Loop, is a base class for strings, numbers and other built-in classes that you are supposed to use mostly interchangably.	http://doc.perl6.org/type/Cool
Cool.ACCEPTS	R	Any.ACCEPTS										
Cool.any	R	Any.any										
Cool.all	R	Any.all										
Cool.one	R	Any.one										
Cool.none	R	Any.none										
Cool.defined	R	Mu.defined										
Cool.Bool	R	Mu.Bool										
Cool.Str	R	Mu.Str										
Cool.gist	R	Mu.gist										
Cool.perl	R	Mu.perl										
Cool.clone	R	Mu.clone										
Cool.new	R	Mu.new										
Cool.bless	R	Mu.bless										
Cool.CREATE	R	Mu.CREATE										
Cool.print	R	Mu.print										
Cool.say	R	Mu.say										
Cool.ACCEPTS	R	Mu.ACCEPTS										
Cool.WHICH	R	Mu.WHICH										
Cursor	A			Perl 6 Cursor							<pre><code>class Cursor { }</code></pre>A Cursor object is used interally by the regex engine in regex matches to keep track of the current position, backtracking waypoints and information about capturing groups.	http://doc.perl6.org/type/Cursor
Cursor.ACCEPTS	R	Any.ACCEPTS										
Cursor.any	R	Any.any										
Cursor.all	R	Any.all										
Cursor.one	R	Any.one										
Cursor.none	R	Any.none										
Cursor.defined	R	Mu.defined										
Cursor.Bool	R	Mu.Bool										
Cursor.Str	R	Mu.Str										
Cursor.gist	R	Mu.gist										
Cursor.perl	R	Mu.perl										
Cursor.clone	R	Mu.clone										
Cursor.new	R	Mu.new										
Cursor.bless	R	Mu.bless										
Cursor.CREATE	R	Mu.CREATE										
Cursor.print	R	Mu.print										
Cursor.say	R	Mu.say										
Cursor.ACCEPTS	R	Mu.ACCEPTS										
Cursor.WHICH	R	Mu.WHICH										
Date	A			Perl 6 Date							<pre><code>class Date { }</code></pre>A Date is an immutable object identifying a day in the Gregorian calendar.	http://doc.perl6.org/type/Date
Date.new	A			Perl 6 Date							<pre><code>proto method new() {*}<br>multi method new($year,   $month,  $day) returns Date:D<br>multi method new(:$year, :$month, :$day) returns Date:D<br>multi method new(Str $date)              returns Date:D<br>multi method new(DateTime:D $dt)         returns Date:D</code></pre>Creates a new Date object, either from a tripple of (year, month, day) integers, or from a string of the form YYYY-MM-DD (ISO 8601), or from a DateTime object.	http://doc.perl6.org/type/Date#new
Date.today	A			Perl 6 Date							<pre><code>method today() returns Date:D</code></pre>Returns a Date object for the current day.	http://doc.perl6.org/type/Date#today
today	R	Date.today										
Date.year	A			Perl 6 Date							<pre><code>method year(Date:D:) returns Int:D</code></pre>Returns the year of the date	http://doc.perl6.org/type/Date#year
year	R	Date.year										
Date.month	A			Perl 6 Date							<pre><code>method month(Date:D:) returns Int:D</code></pre>Returns the month of the date (1..12)	http://doc.perl6.org/type/Date#month
month	R	Date.month										
Date.day	A			Perl 6 Date							<pre><code>method day(Date:D:) returns Int:D</code></pre>Returns the day of the month of the date (1..31)	http://doc.perl6.org/type/Date#day
day	R	Date.day										
Date.day-of-week	A			Perl 6 Date							<pre><code>method day-of-week(Date:D:) returns Int:D</code></pre>Returns the day of the week, where 0 is Sunday, 1 is Monday etc.	http://doc.perl6.org/type/Date#day-of-week
day-of-week	R	Date.day-of-week										
Date.day-of-year	A			Perl 6 Date							<pre><code>method day-of-year(Date:D:) returns Int:D</code></pre>Returns the day of the year (1..366).	http://doc.perl6.org/type/Date#day-of-year
day-of-year	R	Date.day-of-year										
Date.day-of-month	A			Perl 6 Date							<pre><code>method day-of-month(Date:D:) returns Int:D</code></pre>Returns the day of the month of the date (1..31). Synonymous to the day method.	http://doc.perl6.org/type/Date#day-of-month
day-of-month	R	Date.day-of-month										
Date.truncated-to	A			Perl 6 Date							<pre><code>method truncated-to(Date:D: :$year, :$month, :$week)</code></pre>Returns a Date truncated to the first day of its year, month or week. For example	http://doc.perl6.org/type/Date#truncated-to
truncated-to	R	Date.truncated-to										
Date.succ	A			Perl 6 Date							<pre><code>method succ(Date:D:) returns Date:D</code></pre>Returns the following day	http://doc.perl6.org/type/Date#succ
succ	D								*[[Date.succ]], returns the following day\n*[[Numeric.succ]], returns the number incremented by one (successor).\n*[[Str.succ]], returns the string incremented by one.			
Date.days-in-month	A			Perl 6 Date							<pre><code>method days-in-month(year = self.year, month = self.month) returns Int:D</code></pre>Returns the number of days in a month, where year and month default to that of the invocant. If both year and month are provided, it can be called as a class method.	http://doc.perl6.org/type/Date#days-in-month
days-in-month	R	Date.days-in-month										
Date.is-leap-year	A			Perl 6 Date							<pre><code>method is-leap-year($year = self.year) returns Bool:D</code></pre>Returns True if $year is a leap year. Can be called as a class method if the year is provided.	http://doc.perl6.org/type/Date#is-leap-year
is-leap-year	R	Date.is-leap-year										
Date.prev	A			Perl 6 Date							<pre><code>method prev(Date:D:) return Date:D</code></pre>Returns the previous day	http://doc.perl6.org/type/Date#prev
prev	R	Date.prev										
Date.Str	A			Perl 6 Date							<pre><code>multi method Str(Date:D:) returns Str:D</code></pre>Returns the date in YYYY-MM-DD format (ISO 8601)	http://doc.perl6.org/type/Date#Str
Date.gist	A			Perl 6 Date							<pre><code>multi method gist(Date:D:) returns Str:D</code></pre>Returns the date in YYYY-MM-DD format (ISO 8601)	http://doc.perl6.org/type/Date#gist
gist	D								*[[Date.gist]], returns the date in YYYY-MM-DD format (ISO 8601)\n*[[Exception.gist]], returns whatever the exception printer should produce for this exception. \n*[[Mu.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.			
Date.ACCEPTS	R	Any.ACCEPTS										
Date.any	R	Any.any										
Date.all	R	Any.all										
Date.one	R	Any.one										
Date.none	R	Any.none										
Date.defined	R	Mu.defined										
Date.Bool	R	Mu.Bool										
Date.Str	R	Mu.Str										
Date.gist	R	Mu.gist										
Date.perl	R	Mu.perl										
Date.clone	R	Mu.clone										
Date.new	R	Mu.new										
Date.bless	R	Mu.bless										
Date.CREATE	R	Mu.CREATE										
Date.print	R	Mu.print										
Date.say	R	Mu.say										
Date.ACCEPTS	R	Mu.ACCEPTS										
Date.WHICH	R	Mu.WHICH										
Duration	A			Perl 6 Duration							<pre><code>class Duration is Cool does Real { }</code></pre>A Duration represents a length of time in atomic seconds, with fractions. Like an Instant, it is epoch-agnostic. In numeric contexts (situations where a Duration is used as a number), a Duration will return either a Rat or a FatRat representing the number of seconds it holds.	http://doc.perl6.org/type/Duration
Duration.Rat	R	Real.Rat										
Duration.rand	R	Real.rand										
Duration.sign	R	Real.sign										
Duration.round	R	Real.round										
Duration.floor	R	Real.floor										
Duration.ceiling	R	Real.ceiling										
Duration.truncate	R	Real.truncate										
Duration.base	R	Real.base										
Duration.ACCEPTS	R	Any.ACCEPTS										
Duration.any	R	Any.any										
Duration.all	R	Any.all										
Duration.one	R	Any.one										
Duration.none	R	Any.none										
Duration.defined	R	Mu.defined										
Duration.Bool	R	Mu.Bool										
Duration.Str	R	Mu.Str										
Duration.gist	R	Mu.gist										
Duration.perl	R	Mu.perl										
Duration.clone	R	Mu.clone										
Duration.new	R	Mu.new										
Duration.bless	R	Mu.bless										
Duration.CREATE	R	Mu.CREATE										
Duration.print	R	Mu.print										
Duration.say	R	Mu.say										
Duration.ACCEPTS	R	Mu.ACCEPTS										
Duration.WHICH	R	Mu.WHICH										
Enum	A			Perl 6 Enum							<pre><code>class Enum does Associative { ... }</code></pre>An Enum consists of a key and a value. It is the immutable version of Pair (which inherits from Enum).	http://doc.perl6.org/type/Enum
Enum.key	A			Perl 6 Enum							<pre><code>multi method key(Enum:D:)</code></pre>Returns the key part of the Enum.	http://doc.perl6.org/type/Enum#key
key	R	Enum.key										
Enum.value	A			Perl 6 Enum							<pre><code>multi method value(Enum:D:)</code></pre>Returns the value part of the Enum.	http://doc.perl6.org/type/Enum#value
value	D								*[[Enum.value]], returns the value part of the Enum.\n*[[Pair.value]], returns the value part of the Pair.			
Enum.invert	A			Perl 6 Enum							<pre><code>multi method invert(Enum:D:) returns Enum:D</code></pre>Returns a new Enum with the original enum's value as the key, and the original enum's key as value.	http://doc.perl6.org/type/Enum#invert
invert	D								*[[Enum.invert]], returns a new Enum with the original enum's value as the key, and the original enum's key as value.\n*[[EnumMap.invert]], returns a list of pairs, but with key and value exchanged.			
Enum.ACCEPTS	R	Any.ACCEPTS										
Enum.any	R	Any.any										
Enum.all	R	Any.all										
Enum.one	R	Any.one										
Enum.none	R	Any.none										
Enum.defined	R	Mu.defined										
Enum.Bool	R	Mu.Bool										
Enum.Str	R	Mu.Str										
Enum.gist	R	Mu.gist										
Enum.perl	R	Mu.perl										
Enum.clone	R	Mu.clone										
Enum.new	R	Mu.new										
Enum.bless	R	Mu.bless										
Enum.CREATE	R	Mu.CREATE										
Enum.print	R	Mu.print										
Enum.say	R	Mu.say										
Enum.ACCEPTS	R	Mu.ACCEPTS										
Enum.WHICH	R	Mu.WHICH										
EnumMap	A			Perl 6 EnumMap							<pre><code>class EnumMap does Associative is Iterable { }</code></pre>An EnumMap is an immutable mapping from string keys to values of arbitrary types. It serves as a base class for Hash, which is mutable.	http://doc.perl6.org/type/EnumMap
EnumMap.new	A			Perl 6 EnumMap							<pre><code>proto method new(*@, *%) {*}<br>multi method new(*@args, *%pairs) </code></pre>Creates a new EnumMap from a list of alternating keys and values, with the same semantics as described for hash assigning in the Hash documentation.	http://doc.perl6.org/type/EnumMap#new
EnumMap.elems	A			Perl 6 EnumMap							<pre><code>method elems(EnumMap:D:) returns Int:D:</code></pre>Returns the number of pairs stored in the EnumMap.	http://doc.perl6.org/type/EnumMap#elems
EnumMap.ACCEPTS	A			Perl 6 EnumMap							<pre><code>multi method ACCEPTS(EnumMap:D: Positional $topic)<br>multi method ACCEPTS(EnumMap:D: Cool:D     $topic)<br>multi method ACCEPTS(EnumMap:D: Regex      $topic)<br>multi method ACCEPTS(EnumMap:D: Any        $topic)</code></pre>Used in smart-matching if the right-hand side is an EnumMap.	http://doc.perl6.org/type/EnumMap#ACCEPTS
EnumMap.keys	A			Perl 6 EnumMap							<pre><code>method keys(EnumMap:D:) returns List:D</code></pre>Returns a list of all keys in the EnumMap.	http://doc.perl6.org/type/EnumMap#keys
keys	D								*[[EnumMap.keys]], returns a list of all keys in the EnumMap.\n*[[List.keys]], returns a list of indexes into the list (i.e., 0..(@list.elems-1)).			
EnumMap.values	A			Perl 6 EnumMap							<pre><code>method values(EnumMap:D:) returns List:D</code></pre>Returns a list of all values in the EnumMap.	http://doc.perl6.org/type/EnumMap#values
values	D								*[[EnumMap.values]], returns a list of all values in the EnumMap.\n*[[List.values]], returns a copy of the list.			
EnumMap.pairs	A			Perl 6 EnumMap							<pre><code>method pairs(EnumMap:D:) returns List:D</code></pre>Returns a list of all pairs in the EnumMap.	http://doc.perl6.org/type/EnumMap#pairs
pairs	D								*[[EnumMap.pairs]], returns a list of all pairs in the EnumMap.\n*[[List.pairs]], returns a list of pairs, with the indexes as keys and the list values as values.\n*[[Pair.pairs]], returns a list of one Pair, namely this one.			
EnumMap.invert	A			Perl 6 EnumMap							<pre><code>method invert(EnumMap:D:) returns List:D</code></pre>Returns a list of pairs, but with key and value exchanged.	http://doc.perl6.org/type/EnumMap#invert
EnumMap.kv	A			Perl 6 EnumMap							<pre><code>method kv(EnumMap:D:) returns List:D</code></pre>Returns a list of keys and values interleaved.	http://doc.perl6.org/type/EnumMap#kv
kv	D								*[[EnumMap.kv]], returns a list of keys and values interleaved.\n*[[List.kv]], returns an interleaved list of indexes and values. \n*[[Pair.kv]], returns a two-element Parcel with the key and value parts o Pair, in that order. 			
EnumMap.ACCEPTS	R	Any.ACCEPTS										
EnumMap.any	R	Any.any										
EnumMap.all	R	Any.all										
EnumMap.one	R	Any.one										
EnumMap.none	R	Any.none										
EnumMap.defined	R	Mu.defined										
EnumMap.Bool	R	Mu.Bool										
EnumMap.Str	R	Mu.Str										
EnumMap.gist	R	Mu.gist										
EnumMap.perl	R	Mu.perl										
EnumMap.clone	R	Mu.clone										
EnumMap.new	R	Mu.new										
EnumMap.bless	R	Mu.bless										
EnumMap.CREATE	R	Mu.CREATE										
EnumMap.print	R	Mu.print										
EnumMap.say	R	Mu.say										
EnumMap.ACCEPTS	R	Mu.ACCEPTS										
EnumMap.WHICH	R	Mu.WHICH										
Exception	A			Perl 6 Exception							<pre><code>class Exception { ... }</code></pre>All exceptions that are placed into the $! variable (or into $_ in CATCH blocks) inherit from Exception. When you call die or fail with a non-Exception argument, it is wrapped into an X::AdHoc object, which also inherits from Exception.	http://doc.perl6.org/type/Exception
Exception.message	A			Perl 6 Exception							<pre><code>method message(Exception:D:) returns Str:D</code></pre>This is a stub that must be overwritten by subclasses, and should return the exception message.	http://doc.perl6.org/type/Exception#message
message	R	Exception.message										
Exception.backtrace	A			Perl 6 Exception							<pre><code>method backtrace(Exception:D:) returns Backtrace:D</code></pre>Returns the backtrace associated with the exception. Only makes sense on exceptions that have been thrown at least once.	http://doc.perl6.org/type/Exception#backtrace
backtrace	R	Exception.backtrace										
Exception.throw	A			Perl 6 Exception							<pre><code>method throw(Exception:D:)</code></pre>Throws the exception.	http://doc.perl6.org/type/Exception#throw
throw	R	Exception.throw										
Exception.rethrow	A			Perl 6 Exception							<pre><code>method rethrow(Exception:D:)</code></pre>Rethrows an exception that has already been thrown at least once. This is different from throw in that it preserves the original backtrace.	http://doc.perl6.org/type/Exception#rethrow
rethrow	R	Exception.rethrow										
Exception.fail	A			Perl 6 Exception							<pre><code>method fail(Exception:D:)</code></pre>Same as fail $exception; i.e., it exits the calling Routine and returns the exception wrapped in a Failure object.	http://doc.perl6.org/type/Exception#fail
fail	R	Exception.fail										
Exception.gist	A			Perl 6 Exception							<pre><code>multi method gist(Exception:D:)</code></pre>Returns whatever the exception printer should produce for this exception. The default implementation returns message and backtrace separated by a newline.	http://doc.perl6.org/type/Exception#gist
Exception.ACCEPTS	R	Any.ACCEPTS										
Exception.any	R	Any.any										
Exception.all	R	Any.all										
Exception.one	R	Any.one										
Exception.none	R	Any.none										
Exception.defined	R	Mu.defined										
Exception.Bool	R	Mu.Bool										
Exception.Str	R	Mu.Str										
Exception.gist	R	Mu.gist										
Exception.perl	R	Mu.perl										
Exception.clone	R	Mu.clone										
Exception.new	R	Mu.new										
Exception.bless	R	Mu.bless										
Exception.CREATE	R	Mu.CREATE										
Exception.print	R	Mu.print										
Exception.say	R	Mu.say										
Exception.ACCEPTS	R	Mu.ACCEPTS										
Exception.WHICH	R	Mu.WHICH										
Grammar	A			Perl 6 Grammar							<pre><code>class Grammar is Cursor { }</code></pre>Grammar is the superclass that classes automatically get when they are declared with the grammar keyword instead of class.	http://doc.perl6.org/type/Grammar
Grammar.parse	A			Perl 6 Grammar							<pre><code>method parse(Grammar:D: $str, :$rule = 'TOP', :$actions) returns Match:D</code></pre>Matches the grammar against $str, using $rule as start rule, optionally applying $actions as actions object.	http://doc.perl6.org/type/Grammar#parse
parse	R	Grammar.parse										
Grammar.parsefile	A			Perl 6 Grammar							<pre><code>method parsefile(Grammar:D: $filename, :$rule = 'TOP', :$actions) returns Match:D</code></pre>Matches the grammar against the contents of file $fielname, using $rule as start rule, optionally applying $actions as actions object.	http://doc.perl6.org/type/Grammar#parsefile
parsefile	R	Grammar.parsefile										
Grammar.ACCEPTS	R	Any.ACCEPTS										
Grammar.any	R	Any.any										
Grammar.all	R	Any.all										
Grammar.one	R	Any.one										
Grammar.none	R	Any.none										
Grammar.defined	R	Mu.defined										
Grammar.Bool	R	Mu.Bool										
Grammar.Str	R	Mu.Str										
Grammar.gist	R	Mu.gist										
Grammar.perl	R	Mu.perl										
Grammar.clone	R	Mu.clone										
Grammar.new	R	Mu.new										
Grammar.bless	R	Mu.bless										
Grammar.CREATE	R	Mu.CREATE										
Grammar.print	R	Mu.print										
Grammar.say	R	Mu.say										
Grammar.ACCEPTS	R	Mu.ACCEPTS										
Grammar.WHICH	R	Mu.WHICH										
Hash	A			Perl 6 Hash							<pre><code>class Hash is EnumMap { }</code></pre>A Hash is a mutable mapping from keys to values (called dictionary, hash table or map in other programming languages). The values are all scalar containers, which means you can assign to them.	http://doc.perl6.org/type/Hash
Hash.push	A			Perl 6 Hash							<pre><code>multi method push(Hash:D: *@new)</code></pre>Adds the @new elements to the hash with the same semantics as hash assignment, but with three exceptions:	http://doc.perl6.org/type/Hash#push
push	D								*[[Hash.push]], adds the @new elements to the hash with the same semantics as hash assignment, but with three exceptions:\n*[[List.push]], adds the @values to the end of the list, and returns the modified list. 			
Hash.new	R	EnumMap.new										
Hash.elems	R	EnumMap.elems										
Hash.ACCEPTS	R	EnumMap.ACCEPTS										
Hash.keys	R	EnumMap.keys										
Hash.values	R	EnumMap.values										
Hash.pairs	R	EnumMap.pairs										
Hash.invert	R	EnumMap.invert										
Hash.kv	R	EnumMap.kv										
Hash.ACCEPTS	R	Any.ACCEPTS										
Hash.any	R	Any.any										
Hash.all	R	Any.all										
Hash.one	R	Any.one										
Hash.none	R	Any.none										
Hash.defined	R	Mu.defined										
Hash.Bool	R	Mu.Bool										
Hash.Str	R	Mu.Str										
Hash.gist	R	Mu.gist										
Hash.perl	R	Mu.perl										
Hash.clone	R	Mu.clone										
Hash.new	R	Mu.new										
Hash.bless	R	Mu.bless										
Hash.CREATE	R	Mu.CREATE										
Hash.print	R	Mu.print										
Hash.say	R	Mu.say										
Hash.ACCEPTS	R	Mu.ACCEPTS										
Hash.WHICH	R	Mu.WHICH										
IO.dir	A			Perl 6 IO							<pre><code>sub dir Cool $path = '.', Mu :$test = none('.', '..')</code></pre>Returns a list of IO::File and IO::Dir objects for the files and directories found in the $path. If $path is not given assumes the current directory.	http://doc.perl6.org/type/IO#dir
dir	R	IO.dir										
IO.prompt	A			Perl 6 IO							<pre><code>my $name = prompt("Hi, what's your name?");</code></pre>Prints out a string to the standard output and waits for the user to type in something and finish with an ENTER. Returns the string typed in without the trailing newline.	http://doc.perl6.org/type/IO#prompt
prompt	R	IO.prompt										
IO.modified	A			Perl 6 IO							<pre><code>"path/to/file".IO.modified()</code></pre>Timestamp when the file was last modified.	http://doc.perl6.org/type/IO#modified
modified	R	IO.modified										
IO.accessed	A			Perl 6 IO							<pre><code>"path/to/file".IO.accessed()</code></pre>Timestamp when the file was last accessed.	http://doc.perl6.org/type/IO#accessed
accessed	R	IO.accessed										
IO.changed	A			Perl 6 IO							<pre><code>"path/to/file".IO.changed()</code></pre>Timestamp when the inode was last changed.	http://doc.perl6.org/type/IO#changed
changed	R	IO.changed										
IO.ACCEPTS	R	Any.ACCEPTS										
IO.any	R	Any.any										
IO.all	R	Any.all										
IO.one	R	Any.one										
IO.none	R	Any.none										
IO.defined	R	Mu.defined										
IO.Bool	R	Mu.Bool										
IO.Str	R	Mu.Str										
IO.gist	R	Mu.gist										
IO.perl	R	Mu.perl										
IO.clone	R	Mu.clone										
IO.new	R	Mu.new										
IO.bless	R	Mu.bless										
IO.CREATE	R	Mu.CREATE										
IO.print	R	Mu.print										
IO.say	R	Mu.say										
IO.ACCEPTS	R	Mu.ACCEPTS										
IO.WHICH	R	Mu.WHICH										
Instant	A			Perl 6 Instant							<pre><code>class Instant is Cool does Real { }</code></pre>An Instant is a particular moment in time measured in atomic seconds, with fractions. It is not tied to or aware of any epoch.	http://doc.perl6.org/type/Instant
Instant.Rat	R	Real.Rat										
Instant.rand	R	Real.rand										
Instant.sign	R	Real.sign										
Instant.round	R	Real.round										
Instant.floor	R	Real.floor										
Instant.ceiling	R	Real.ceiling										
Instant.truncate	R	Real.truncate										
Instant.base	R	Real.base										
Instant.ACCEPTS	R	Any.ACCEPTS										
Instant.any	R	Any.any										
Instant.all	R	Any.all										
Instant.one	R	Any.one										
Instant.none	R	Any.none										
Instant.defined	R	Mu.defined										
Instant.Bool	R	Mu.Bool										
Instant.Str	R	Mu.Str										
Instant.gist	R	Mu.gist										
Instant.perl	R	Mu.perl										
Instant.clone	R	Mu.clone										
Instant.new	R	Mu.new										
Instant.bless	R	Mu.bless										
Instant.CREATE	R	Mu.CREATE										
Instant.print	R	Mu.print										
Instant.say	R	Mu.say										
Instant.ACCEPTS	R	Mu.ACCEPTS										
Instant.WHICH	R	Mu.WHICH										
Int	A			Perl 6 Int							<pre><code>class Int is Cool does Real { ... }</code></pre>Int objects store integral numbers of arbitrary size. Ints are immutable.	http://doc.perl6.org/type/Int
Int.chr	A			Perl 6 Int							<pre><code>multi sub    chr(Int:D ) returns Str:D<br>multi method chr(Int:D:) returns Str:D</code></pre>Returns a one-character string, by interpreting the integer as a Unicode codepoint number and converting it the corresponding character.	http://doc.perl6.org/type/Int#chr
chr	R	Int.chr										
Int.div	A			Perl 6 Int							<pre><code>multi sub infix:&lt;div&gt;(Int:D, Int:D) returns Int:D</code></pre>Does an integer division, rounded down.	http://doc.perl6.org/type/Int#div
div	R	Int.div										
Int.Rat	R	Real.Rat										
Int.rand	R	Real.rand										
Int.sign	R	Real.sign										
Int.round	R	Real.round										
Int.floor	R	Real.floor										
Int.ceiling	R	Real.ceiling										
Int.truncate	R	Real.truncate										
Int.base	R	Real.base										
Int.ACCEPTS	R	Any.ACCEPTS										
Int.any	R	Any.any										
Int.all	R	Any.all										
Int.one	R	Any.one										
Int.none	R	Any.none										
Int.defined	R	Mu.defined										
Int.Bool	R	Mu.Bool										
Int.Str	R	Mu.Str										
Int.gist	R	Mu.gist										
Int.perl	R	Mu.perl										
Int.clone	R	Mu.clone										
Int.new	R	Mu.new										
Int.bless	R	Mu.bless										
Int.CREATE	R	Mu.CREATE										
Int.print	R	Mu.print										
Int.say	R	Mu.say										
Int.ACCEPTS	R	Mu.ACCEPTS										
Int.WHICH	R	Mu.WHICH										
Junction	A			Perl 6 Junction							<pre><code>class Junction is Mu { }</code></pre>A junction is an unordered composite value of zero or more values. Junctions autothread over many operations, which means that the operation is carried out for each junction element (also known as eigenstate), and the result is junction of the return values of all those operators.	http://doc.perl6.org/type/Junction
Junction.defined	R	Mu.defined										
Junction.Bool	R	Mu.Bool										
Junction.Str	R	Mu.Str										
Junction.gist	R	Mu.gist										
Junction.perl	R	Mu.perl										
Junction.clone	R	Mu.clone										
Junction.new	R	Mu.new										
Junction.bless	R	Mu.bless										
Junction.CREATE	R	Mu.CREATE										
Junction.print	R	Mu.print										
Junction.say	R	Mu.say										
Junction.ACCEPTS	R	Mu.ACCEPTS										
Junction.WHICH	R	Mu.WHICH										
List	A			Perl 6 List							<pre><code>my class List is Iterable does Positional { .. }</code></pre>List stores items sequentially and potentially lazily.	http://doc.perl6.org/type/List
List.elems	A			Perl 6 List							<pre><code>multi sub    elems($list)  returns Int:D<br>multi method elems(List:D:) returns Int:D</code></pre>Returns the number of elements in the list.	http://doc.perl6.org/type/List#elems
List.end	A			Perl 6 List							<pre><code>multi sub    end($list)  returns Int:D<br>multi method end(List:D:) returns Int:D</code></pre>Returns the index of the last element.	http://doc.perl6.org/type/List#end
end	R	List.end										
List.keys	A			Perl 6 List							<pre><code>multi sub    keys($list)  returns List:D<br>multi method keys(List:D:) returns List:D</code></pre>Returns a list of indexes into the list (i.e., 0..(@list.elems-1)).	http://doc.perl6.org/type/List#keys
List.values	A			Perl 6 List							<pre><code>multi sub    values($list)  returns List:D<br>multi method values(List:D:) returns List:D</code></pre>Returns a copy of the list.	http://doc.perl6.org/type/List#values
List.kv	A			Perl 6 List							<pre><code>multi sub    kv($list)  returns List:D<br>multi method kv(List:D:) returns List:D</code></pre>Returns an interleaved list of indexes and values. For example	http://doc.perl6.org/type/List#kv
List.pairs	A			Perl 6 List							<pre><code>multi sub    pairs($list)   returns List:D<br>multi method pairs(List:D:) returns List:D</code></pre>Returns a list of pairs, with the indexes as keys and the list values as values.	http://doc.perl6.org/type/List#pairs
List.join	A			Perl 6 List							<pre><code>multi sub    join($separator, *@list) returns Str:D<br>multi method join(List:D: $separator) returns Str:D</code></pre>Treats the elements of the list as strings, interleaves them with $separator and concatenates everything into a single string.	http://doc.perl6.org/type/List#join
join	R	List.join										
List.map	A			Perl 6 List							<pre><code>multi sub    map(&amp;code, *@elems) returns List:D<br>multi method map(List:D: &amp;code) returns List:D</code></pre>Invokes &amp;code for each element and gathers the return values in another list and returns it. This happens lazily, ie &amp;code is only invoked when the return values are accessed.	http://doc.perl6.org/type/List#map
map	R	List.map										
List.grep	A			Perl 6 List							<pre><code>multi sub    grep(Mu $matcher, *@elems) returns List:D<br>multi method grep(List:D:  Mu $matcher) returns List:D</code></pre>Returns a lazy list of elements against which $matcher smart-matches. The elements are returned in the order in which they appear in the original list.	http://doc.perl6.org/type/List#grep
grep	R	List.grep										
List.first	A			Perl 6 List							<pre><code>multi sub    first(Mu $matcher, *@elems)<br>multi method first(List:D:  Mu $matcher)</code></pre>Returns the first item of the list which smart-matches against $matcher.	http://doc.perl6.org/type/List#first
first	R	List.first										
List.classify	A			Perl 6 List							<pre><code>multi sub    classify(&amp;mapper, *@values) returns Hash:D<br>multi method classify(List:D: &amp;mapper)   returns Hash:D</code></pre>classify transforms a list or array of values into a hash representing the classification of those values according to a mapper; each hash key represents the classification for one or more of the incoming list values, and the corresponding hash value contains an array of those list values classified by the mapper into the category of the associated key. For example:	http://doc.perl6.org/type/List#classify
classify	R	List.classify										
List.Bool	A			Perl 6 List							<pre><code>multi method Bool(List:D:) returns Bool:D</code></pre>Returns True if the list has at least one element, and False for the empty list.	http://doc.perl6.org/type/List#Bool
List.Str	A			Perl 6 List							<pre><code>multi method Str(List:D:) returns Str:D</code></pre>Stringifies the elements of the list and joins them with spaces (same as .join(' ')).	http://doc.perl6.org/type/List#Str
List.Int	A			Perl 6 List							<pre><code>multi method Int(List:D:) return Int:D</code></pre>Returns the number of elements in the list (same as .elems).	http://doc.perl6.org/type/List#Int
List.pick	A			Perl 6 List							<pre><code>multi method pick(List:D: $count = 1)</code></pre>Returns $count elements chosen at random and without repetition from the invocant. If * is passed as $count, all elements from the invocant list are returned in a random sequence.	http://doc.perl6.org/type/List#pick
pick	R	List.pick										
List.roll	A			Perl 6 List							<pre><code>multi method roll(List:D: $count = 1)</code></pre>Returns a lazy list of $count elements, each randomly selected from the list. Each random choice is made indepently, like a separate die roll where each die face is a list element.	http://doc.perl6.org/type/List#roll
roll	R	List.roll										
List.eager	A			Perl 6 List							<pre><code>multi method eager(List:D:) returns List:D</code></pre>Evaluates all elements in the list eagerly, and returns the invocant. If a List signals that it is "known infinite", eager evaluation may stop at the point where the infinity is detected.	http://doc.perl6.org/type/List#eager
eager	R	List.eager										
List.reverse	A			Perl 6 List							<pre><code>multi sub    reverse(*@list ) returns List:D<br>multi method reverse(List:D:) returns List:D</code></pre>Returns a list with the same elements in reverse order.	http://doc.perl6.org/type/List#reverse
reverse	R	List.reverse										
List.rotate	A			Perl 6 List							<pre><code>multi sub    rotate(@list,  Int:D $n = 1) returns List:D<br>multi method rotate(List:D: Int:D $n = 1) returns List:D</code></pre>Returns the list rotated by $n elements.	http://doc.perl6.org/type/List#rotate
rotate	R	List.rotate										
List.sort	A			Perl 6 List							<pre><code>multi sub    sort(*@elems)      returns List:D<br>multi sub    sort(&amp;by, *@elems) returns List:D<br>multi method sort(List:D:)      returns List:D<br>multi method sort(List:D:, &amp;by) returns List:D</code></pre>Sorts the list, smallest element first. By default &lt; infix:&lt;cmp &gt;&gt; is used for comparing list elements.	http://doc.perl6.org/type/List#sort
sort	R	List.sort										
List.reduce	A			Perl 6 List							<pre><code>multi sub    reduce(&amp;with, *@elems)<br>multi method reduce(List:D: &amp;with)</code></pre>Applies &amp;with to the first and the second value of the list, then to the result of that calculation and the third value and so on. Returns a single item generated that way.	http://doc.perl6.org/type/List#reduce
reduce	R	List.reduce										
List.splice	A			Perl 6 List							<pre><code>multi sub    splice(@list,  $start, $elems? *@replacement) returns List:D<br>multi method splice(List:D: $start, $elems? *@replacement) returns List:D</code></pre>Deletes $elems elements starting from index $start from the list, returns them and replaces them by @replacement. If $elems is omitted, all the elements starting from index $start are deleted.	http://doc.perl6.org/type/List#splice
splice	R	List.splice										
List.pop	A			Perl 6 List							<pre><code>multi sub    pop(List:D )<br>multi method pop(List:D:)</code></pre>Removes and returns the last item from the list, fails for an empty list.	http://doc.perl6.org/type/List#pop
pop	R	List.pop										
List.push	A			Perl 6 List							<pre><code>multi sub    push(List:D, *@values) returns List:D<br>multi method push(List:D: *@values) returns List:D</code></pre>Adds the @values to the end of the list, and returns the modified list. Fails for infinite lists.	http://doc.perl6.org/type/List#push
List.shift	A			Perl 6 List							<pre><code>multi sub    shift(List:D )<br>multi method shift(List:D:)</code></pre>Removes and returns the first item from the list. Fails for an empty list.	http://doc.perl6.org/type/List#shift
shift	R	List.shift										
List.unshift	A			Perl 6 List							<pre><code>multi sub    unshift(List:D, *@values) returns List:D<br>multi method unshift(List:D: *@values) returns List:D</code></pre>Adds the @values to the start of the list, and returns the modified list. Fails if @values is infinite.	http://doc.perl6.org/type/List#unshift
unshift	R	List.unshift										
List.of	R	Positional.of										
List.ACCEPTS	R	Any.ACCEPTS										
List.any	R	Any.any										
List.all	R	Any.all										
List.one	R	Any.one										
List.none	R	Any.none										
List.defined	R	Mu.defined										
List.Bool	R	Mu.Bool										
List.Str	R	Mu.Str										
List.gist	R	Mu.gist										
List.perl	R	Mu.perl										
List.clone	R	Mu.clone										
List.new	R	Mu.new										
List.bless	R	Mu.bless										
List.CREATE	R	Mu.CREATE										
List.print	R	Mu.print										
List.say	R	Mu.say										
List.ACCEPTS	R	Mu.ACCEPTS										
List.WHICH	R	Mu.WHICH										
Match	A			Perl 6 Match							<pre><code>class Match is Capture is Cool { ... }</code></pre>Match objects are the result of a successful regex match. They store a reference to the original string (.orig), positional and named captures, the positions of the start and end of the match  in the original string, and a payload referred to as AST  (abstract syntax tree), which can be used to build data structures  from complex regexes and gramamrs.	http://doc.perl6.org/type/Match
Match.orig	A			Perl 6 Match							Returns the original string that the regex was matched against.	http://doc.perl6.org/type/Match#orig
orig	R	Match.orig										
Match.from	A			Perl 6 Match							Returns the index of the starting position of the match.	http://doc.perl6.org/type/Match#from
from	R	Match.from										
Match.to	A			Perl 6 Match							Returns the index of the end position of the match.	http://doc.perl6.org/type/Match#to
to	R	Match.to										
Match.ast	A			Perl 6 Match							Returns the AST (ie payload).	http://doc.perl6.org/type/Match#ast
ast	R	Match.ast										
Match.Str	A			Perl 6 Match							Returns the matched text.	http://doc.perl6.org/type/Match#Str
Match.caps	A			Perl 6 Match							Returns a list of pairs, with the index or submatch name as key and the submatches as values. The list is ordered by starting position of the submatches.	http://doc.perl6.org/type/Match#caps
caps	R	Match.caps										
Match.chunks	A			Perl 6 Match							Returns a list of pairs, with the index or submatch name as key and the submatches as values. The list is ordered by starting position of the submatches.	http://doc.perl6.org/type/Match#chunks
chunks	R	Match.chunks										
Match.list	A			Perl 6 Match							Returns a list of positional submatches.	http://doc.perl6.org/type/Match#list
list	D								*[[Match.list]], returns a list of positional submatches.\n*[[Range.list]], generates the list of elements that the range represents.			
Match.hash	A			Perl 6 Match							Returns a hash of named submatches.	http://doc.perl6.org/type/Match#hash
hash	R	Match.hash										
Match.prematch	A			Perl 6 Match							Returns the part of the original string leading up to the match.	http://doc.perl6.org/type/Match#prematch
prematch	R	Match.prematch										
Match.postmatch	A			Perl 6 Match							Returns the part of the original string following the match.	http://doc.perl6.org/type/Match#postmatch
postmatch	R	Match.postmatch										
Match.make	A			Perl 6 Match							<pre><code>method make(Match:D: Mu $ast)</code></pre>Sets the AST to $ast, and returns it.	http://doc.perl6.org/type/Match#make
make	R	Match.make										
Match.ACCEPTS	R	Any.ACCEPTS										
Match.any	R	Any.any										
Match.all	R	Any.all										
Match.one	R	Any.one										
Match.none	R	Any.none										
Match.defined	R	Mu.defined										
Match.Bool	R	Mu.Bool										
Match.Str	R	Mu.Str										
Match.gist	R	Mu.gist										
Match.perl	R	Mu.perl										
Match.clone	R	Mu.clone										
Match.new	R	Mu.new										
Match.bless	R	Mu.bless										
Match.CREATE	R	Mu.CREATE										
Match.print	R	Mu.print										
Match.say	R	Mu.say										
Match.ACCEPTS	R	Mu.ACCEPTS										
Match.WHICH	R	Mu.WHICH										
Mu	A			Perl 6 Mu							<pre><code>class Mu { ... }</code></pre>The root of the Perl 6 type hierarchy. For the origin of the name, see http://en.wikipedia.org/wiki/Mu_%28negative%29. One can also say that there are many undefined values in Perl 6, and Mu is the most undefined value.	http://doc.perl6.org/type/Mu
Mu.defined	A			Perl 6 Mu							<pre><code>multi sub    defined(Mu) returns Bool:D<br>multi method defined()   returns Bool:D</code></pre>Returns False on the type object, and True otherwise.	http://doc.perl6.org/type/Mu#defined
defined	R	Mu.defined										
Mu.Bool	A			Perl 6 Mu							<pre><code>multi sub    Bool(Mu) returns Bool:D<br>multi method Bool()   returns Bool:D</code></pre>Returns False on the type object, and True otherwise.	http://doc.perl6.org/type/Mu#Bool
Mu.Str	A			Perl 6 Mu							<pre><code>multi method Str()   returns Str</code></pre>Returns a string representation of the invocant, intended to be machine readable.	http://doc.perl6.org/type/Mu#Str
Mu.gist	A			Perl 6 Mu							<pre><code>multi sub    gist(Mu) returns Str<br>multi method gist()   returns Str</code></pre>Returns a string representation of the invocant, optimized for fast recognition by humans.	http://doc.perl6.org/type/Mu#gist
Mu.perl	A			Perl 6 Mu							<pre><code>multi sub    perl(Mu) returns Str<br>multi method perl()   returns Str</code></pre>Returns a Perlish representation of the object (i.e., can usually be reparsed to regenerate the object).	http://doc.perl6.org/type/Mu#perl
perl	R	Mu.perl										
Mu.clone	A			Perl 6 Mu							<pre><code>method clone(*%twiddles)</code></pre>Creates a shallow clone of the invocant. If named arguments are passed to it, their values are used in every place where an attribute name matches the name of a named argument.	http://doc.perl6.org/type/Mu#clone
clone	R	Mu.clone										
Mu.new	A			Perl 6 Mu							<pre><code>multi method new(*%attrinit)</code></pre>Default method for constructing (create + initialize) new objects of a class. This method expects only named arguments which are then used to initialize attributes with accessors of the same name.	http://doc.perl6.org/type/Mu#new
Mu.bless	A			Perl 6 Mu							<pre><code>method bless(Mu $candidate, *%attrinit) returns Mu:D</code></pre>Lower-level object construction method than new.	http://doc.perl6.org/type/Mu#bless
bless	R	Mu.bless										
Mu.CREATE	A			Perl 6 Mu							<pre><code>method CREATE() returns Mu:D</code></pre>Allocates a new object of the same type as the invocant, without initializating any attributes.	http://doc.perl6.org/type/Mu#CREATE
CREATE	R	Mu.CREATE										
Mu.print	A			Perl 6 Mu							<pre><code>multi method print() returns Bool:D</code></pre>Prints value to $*OUT after stringification using .Str method without newline at end.	http://doc.perl6.org/type/Mu#print
print	R	Mu.print										
Mu.say	A			Perl 6 Mu							<pre><code>multi method say() returns Bool:D</code></pre>Prints value to $*OUT after stringification using .gist method with newline at end.	http://doc.perl6.org/type/Mu#say
say	R	Mu.say										
Mu.ACCEPTS	A			Perl 6 Mu							<pre><code>multi method ACCEPTS(Mu:U: $other)</code></pre>Performs a type check. Returns True if $other conforms to the invocant (which is always a type object or failure).	http://doc.perl6.org/type/Mu#ACCEPTS
Mu.WHICH	A			Perl 6 Mu							<pre><code>multi method WHICH() returns ObjAt:D</code></pre>Returns an object of type ObjAt which uniquely identifies the object. Value types override this method which makes sure that two equivalent objects return the same return value from WHICH.	http://doc.perl6.org/type/Mu#WHICH
WHICH	R	Mu.WHICH										
Num	A			Perl 6 Num							<pre><code>class Num is Cool does Real { }</code></pre>A Num object stores a floating-point number. It is immutable. On most platforms, it's an IEEE 754 64-bit floating point numbers, aka "double precision".	http://doc.perl6.org/type/Num
Num.Rat	R	Real.Rat										
Num.rand	R	Real.rand										
Num.sign	R	Real.sign										
Num.round	R	Real.round										
Num.floor	R	Real.floor										
Num.ceiling	R	Real.ceiling										
Num.truncate	R	Real.truncate										
Num.base	R	Real.base										
Num.ACCEPTS	R	Any.ACCEPTS										
Num.any	R	Any.any										
Num.all	R	Any.all										
Num.one	R	Any.one										
Num.none	R	Any.none										
Num.defined	R	Mu.defined										
Num.Bool	R	Mu.Bool										
Num.Str	R	Mu.Str										
Num.gist	R	Mu.gist										
Num.perl	R	Mu.perl										
Num.clone	R	Mu.clone										
Num.new	R	Mu.new										
Num.bless	R	Mu.bless										
Num.CREATE	R	Mu.CREATE										
Num.print	R	Mu.print										
Num.say	R	Mu.say										
Num.ACCEPTS	R	Mu.ACCEPTS										
Num.WHICH	R	Mu.WHICH										
Numeric	A			Perl 6 Numeric							<pre><code>role Numeric { ... }</code></pre>Common role for numbers and types that can act as numbers.	http://doc.perl6.org/type/Numeric
Numeric.Real	A			Perl 6 Numeric							<pre><code>method Real(Numeric:D:) returns Real:D</code></pre>If this Numeric is equivalent to a Real, return that Real. Fail with X::Numeric::Real otherwise.	http://doc.perl6.org/type/Numeric#Real
Numeric.Int	A			Perl 6 Numeric							<pre><code>method Int(Numeric:D:) returns Int:D</code></pre>If this Numeric is equivalent to a Real, return the equivalent of calling truncate on that Real to get an Int. Fail with X::Numeric::Real otherwise.	http://doc.perl6.org/type/Numeric#Int
Numeric.Rat	A			Perl 6 Numeric							<pre><code>method Rat(Numeric:D: Real $epsilon = 1.0e-6) returns Rat:D</code></pre>If this Numeric is equivalent to a Real, return a Rat which is within $epsilon of that Real's value. Fail with X::Numeric::Real otherwise.	http://doc.perl6.org/type/Numeric#Rat
Numeric.Num	A			Perl 6 Numeric							<pre><code>method Num(Numeric:D:) returns Num:D</code></pre>If this Numeric is equivalent to a Real, return that Real as a Num as accurately as is possible. Fail with X::Numeric::Real otherwise.	http://doc.perl6.org/type/Numeric#Num
Numeric.ACCEPTS	A			Perl 6 Numeric							<pre><code>multi method ACCEPTS(Numeric:D: $other)</code></pre>Returns True if $other is numerically the same as the invocant.	http://doc.perl6.org/type/Numeric#ACCEPTS
Numeric.log	A			Perl 6 Numeric							<pre><code>multi sub    log(Numeric:D, Numeric $base = e) returns Numeric:D<br>multi method log(Numeric:D: Numeric $base = e) returns Numeric:D</code></pre>Calculates the logarithm to base $base. Defaults to the natural logarithm.	http://doc.perl6.org/type/Numeric#log
log	R	Numeric.log										
Numeric.log10	A			Perl 6 Numeric							<pre><code>multi sub    log10(Numeric:D ) returns Numeric:D<br>multi method log10(Numeric:D:) returns Numeric:D</code></pre>Calculates the logarithm to base 10.	http://doc.perl6.org/type/Numeric#log10
log10	R	Numeric.log10										
Numeric.exp	A			Perl 6 Numeric							<pre><code>multi sub    exp(Numeric:D, Numeric:D $base = e) returns Numeric:D<br>multi method exp(Numeric:D: Numeric:D $base = e) returns Numeric:D</code></pre>Returns $base to the power of the number, or e to the power of the number if called without a second argument.	http://doc.perl6.org/type/Numeric#exp
exp	R	Numeric.exp										
Numeric.roots	A			Perl 6 Numeric							<pre><code>multi method roots(Numeric:D: Int:D $n) returns Positional</code></pre>Returns a list of the $n complex roots, which evaluate to the original number when raised to the $nth power.	http://doc.perl6.org/type/Numeric#roots
roots	R	Numeric.roots										
Numeric.abs	A			Perl 6 Numeric							<pre><code>multi sub    abs(Numeric:D ) returns Real:D<br>multi method abs(Numeric:D:) returns Real:D</code></pre>Returns the absolute value of the number.	http://doc.perl6.org/type/Numeric#abs
abs	R	Numeric.abs										
Numeric.sqrt	A			Perl 6 Numeric							<pre><code>mulit sub    sqrt(Numeric:D) returns Numeric:D<br>mulit method sqrt(Numeric:D) returns Numeric:D</code></pre>Returns a square root of the number. For real numbers the positive square root is returned.	http://doc.perl6.org/type/Numeric#sqrt
sqrt	R	Numeric.sqrt										
Numeric.conj	A			Perl 6 Numeric							<pre><code>multi method conj(Numeric:D) returns Numeric:D</code></pre>Returns the complex conjugate of the number. Returns the number itself for real numbers.	http://doc.perl6.org/type/Numeric#conj
conj	R	Numeric.conj										
Numeric.Bool	A			Perl 6 Numeric							<pre><code>multi method Bool(Numeric:D:)</code></pre>Returns False if the number is equivalent to zero, and True otherwise.	http://doc.perl6.org/type/Numeric#Bool
Numeric.succ	A			Perl 6 Numeric							<pre><code>method succ(Numerid:D:)</code></pre>Returns the number incremented by one (successor).	http://doc.perl6.org/type/Numeric#succ
Numeric.pred	A			Perl 6 Numeric							<pre><code>method pred(Numerid:D:)</code></pre>Returns the number decremented by one (predecessor).	http://doc.perl6.org/type/Numeric#pred
pred	D								*[[Numeric.pred]], returns the number decremented by one (predecessor).\n*[[Str.pred]], returns the string decremented by one.			
Pair	A			Perl 6 Pair							<pre><code>class Pair is Enum { ... }</code></pre>Consists of two parts, a key and a value. Pairs can be seen as the atomic units in Hashes, and they are also used in conjunction with named arguments and parameters.	http://doc.perl6.org/type/Pair
Pair.value	A			Perl 6 Pair							<pre><code>multi method value(Pair:D:) is rw</code></pre>Returns the value part of the Pair.	http://doc.perl6.org/type/Pair#value
Pair.cmp	A			Perl 6 Pair							<pre><code>multi sub infix:&lt;cmp&gt;(Pair:D, Pair:D)</code></pre>The type-agnostic comparator; compares two Pairs. Compares first their key parts, and then compares the value parts if the keys are equal.	http://doc.perl6.org/type/Pair#cmp
cmp	R	Pair.cmp										
Pair.fmt	A			Perl 6 Pair							<pre><code>multi method fmt(Pair:D:) returns Str:D</code></pre>Takes a format string, and returns a string the key and value parts of the Pair formatted. Here's an example:	http://doc.perl6.org/type/Pair#fmt
fmt	R	Pair.fmt										
Pair.kv	A			Perl 6 Pair							<pre><code>multi method kv(Pair:D:) returns Parcel:D</code></pre>Returns a two-element Parcel with the key and value parts o Pair, in that order. This method is a special case of the same-named method on Hash, which returns all its entries as a list of keys and values.	http://doc.perl6.org/type/Pair#kv
Pair.pairs	A			Perl 6 Pair							<pre><code>multi method pairs(Pair:D:)</code></pre>Returns a list of one Pair, namely this one.	http://doc.perl6.org/type/Pair#pairs
Pair.key	R	Enum.key										
Pair.value	R	Enum.value										
Pair.invert	R	Enum.invert										
Pair.ACCEPTS	R	Any.ACCEPTS										
Pair.any	R	Any.any										
Pair.all	R	Any.all										
Pair.one	R	Any.one										
Pair.none	R	Any.none										
Pair.defined	R	Mu.defined										
Pair.Bool	R	Mu.Bool										
Pair.Str	R	Mu.Str										
Pair.gist	R	Mu.gist										
Pair.perl	R	Mu.perl										
Pair.clone	R	Mu.clone										
Pair.new	R	Mu.new										
Pair.bless	R	Mu.bless										
Pair.CREATE	R	Mu.CREATE										
Pair.print	R	Mu.print										
Pair.say	R	Mu.say										
Pair.ACCEPTS	R	Mu.ACCEPTS										
Pair.WHICH	R	Mu.WHICH										
Parameter	A			Perl 6 Parameter							<pre><code>class Parameter { }</code></pre>Represents a parameter, for purpose of introspection.	http://doc.perl6.org/type/Parameter
Parameter.name	A			Perl 6 Parameter							Returns the variable name.	http://doc.perl6.org/type/Parameter#name
name	R	Parameter.name										
Parameter.constraints	A			Perl 6 Parameter							Returns additional constraints on the parameter (usually as an all-Junction).	http://doc.perl6.org/type/Parameter#constraints
constraints	R	Parameter.constraints										
Parameter.type	A			Perl 6 Parameter							Returns the nominal type constraint of the paramter.	http://doc.perl6.org/type/Parameter#type
type	R	Parameter.type										
Parameter.named	A			Perl 6 Parameter							Returns True if it's a named parameter.	http://doc.perl6.org/type/Parameter#named
named	R	Parameter.named										
Parameter.named_names	A			Perl 6 Parameter							Returns a list of names/aliases for this parameter.	http://doc.perl6.org/type/Parameter#named_names
named_names	R	Parameter.named_names										
Parameter.positional	A			Perl 6 Parameter							Returns True if the parameter is positional.	http://doc.perl6.org/type/Parameter#positional
positional	R	Parameter.positional										
Parameter.slurpy	A			Perl 6 Parameter							Returns True for slurpy parameters.	http://doc.perl6.org/type/Parameter#slurpy
slurpy	R	Parameter.slurpy										
Parameter.optional	A			Perl 6 Parameter							Returns True for optional parameters.	http://doc.perl6.org/type/Parameter#optional
optional	R	Parameter.optional										
Parameter.parcel	A			Perl 6 Parameter							<pre><code>sub f(&#92;$parcel) {<br>    $parcel = 5;<br>}<br>f(my $x);   # works<br>f(42);      # dies in the assignment</code></pre>Returns True for parcel parameters.	http://doc.perl6.org/type/Parameter#parcel
parcel	R	Parameter.parcel										
Parameter.capture	A			Perl 6 Parameter							<pre><code>sub f(&#92;capture) { }</code></pre>Returns True for parameters that capture the rest of the argument list.	http://doc.perl6.org/type/Parameter#capture
capture	R	Parameter.capture										
Parameter.rw	A			Perl 6 Parameter							Returns True for is rw parameters.	http://doc.perl6.org/type/Parameter#rw
rw	R	Parameter.rw										
Parameter.copy	A			Perl 6 Parameter							Returns True for is copy parameters.	http://doc.perl6.org/type/Parameter#copy
copy	R	Parameter.copy										
Parameter.readonly	A			Perl 6 Parameter							Returns True for read-only parameters (the default).	http://doc.perl6.org/type/Parameter#readonly
readonly	R	Parameter.readonly										
Parameter.invocant	A			Perl 6 Parameter							Returns True if the parameter is the invocant parameter.	http://doc.perl6.org/type/Parameter#invocant
invocant	R	Parameter.invocant										
Parameter.default	A			Perl 6 Parameter							Returns a closure that upon invocation returns the default value for this parameter, or Any if no default was provided.	http://doc.perl6.org/type/Parameter#default
default	R	Parameter.default										
Parameter.type_captures	A			Perl 6 Parameter							<pre><code>sub a(::T ::U $x) { }<br>say &amp;a.signature.params[0].type_captures;   # T U</code></pre>Returns a list of variable names of type captures associated with this parameter.	http://doc.perl6.org/type/Parameter#type_captures
type_captures	R	Parameter.type_captures										
Parameter.ACCEPTS	R	Any.ACCEPTS										
Parameter.any	R	Any.any										
Parameter.all	R	Any.all										
Parameter.one	R	Any.one										
Parameter.none	R	Any.none										
Parameter.defined	R	Mu.defined										
Parameter.Bool	R	Mu.Bool										
Parameter.Str	R	Mu.Str										
Parameter.gist	R	Mu.gist										
Parameter.perl	R	Mu.perl										
Parameter.clone	R	Mu.clone										
Parameter.new	R	Mu.new										
Parameter.bless	R	Mu.bless										
Parameter.CREATE	R	Mu.CREATE										
Parameter.print	R	Mu.print										
Parameter.say	R	Mu.say										
Parameter.ACCEPTS	R	Mu.ACCEPTS										
Parameter.WHICH	R	Mu.WHICH										
Parcel	A			Perl 6 Parcel							<pre><code>class Parcel is Cool does Positional { }</code></pre>Parcel stands for Parenthesis cell, ie an expression surrounded by parenthesis. Though with the exception of the empty parcel, (), it is really the comma that creates a Parcel.	http://doc.perl6.org/type/Parcel
Parcel.of	R	Positional.of										
Parcel.ACCEPTS	R	Any.ACCEPTS										
Parcel.any	R	Any.any										
Parcel.all	R	Any.all										
Parcel.one	R	Any.one										
Parcel.none	R	Any.none										
Parcel.defined	R	Mu.defined										
Parcel.Bool	R	Mu.Bool										
Parcel.Str	R	Mu.Str										
Parcel.gist	R	Mu.gist										
Parcel.perl	R	Mu.perl										
Parcel.clone	R	Mu.clone										
Parcel.new	R	Mu.new										
Parcel.bless	R	Mu.bless										
Parcel.CREATE	R	Mu.CREATE										
Parcel.print	R	Mu.print										
Parcel.say	R	Mu.say										
Parcel.ACCEPTS	R	Mu.ACCEPTS										
Parcel.WHICH	R	Mu.WHICH										
Positional	A			Perl 6 Positional							<pre><code>role Positional { ... }</code></pre>Role for objects which support indexing them using postcircumfix:«[ ]» (usually list-like objects). Example types with Positional role include Parcel, List, Array, Range, and Buf.	http://doc.perl6.org/type/Positional
Positional.of	A			Perl 6 Positional							<pre><code>method of()</code></pre>Returns the type constraint for elements of the positional container. Defaults to Mu.	http://doc.perl6.org/type/Positional#of
of	R	Positional.of										
Range	A			Perl 6 Range							<pre><code>class Range is Iterable does Positional { ... }</code></pre>Ranges serve two main purposes: to generate lists of consecutive numbers or strings, and to act as a matcher to check if a number or string is within a certain range.	http://doc.perl6.org/type/Range
Range.min	A			Perl 6 Range							<pre><code>method min(Range:D:)</code></pre>Returns the start point of the range.	http://doc.perl6.org/type/Range#min
min	R	Range.min										
Range.excludes_min	A			Perl 6 Range							<pre><code>method excludes_min(Range:D:) returns Bool:D</code></pre>Returns True if the start point is excluded from the range, and False otherwise.	http://doc.perl6.org/type/Range#excludes_min
excludes_min	R	Range.excludes_min										
Range.max	A			Perl 6 Range							<pre><code>method max(Range:D:)</code></pre>Returns the end point of the range.	http://doc.perl6.org/type/Range#max
max	R	Range.max										
Range.excludes_max	A			Perl 6 Range							<pre><code>method excludes_max(Range:D:) returns Bool:D</code></pre>Returns True if the end point is excluded from the range, and False otherwise.	http://doc.perl6.org/type/Range#excludes_max
excludes_max	R	Range.excludes_max										
Range.bounds	A			Perl 6 Range							<pre><code>method bounds(Range:D:) returns Positional</code></pre>Returns a list consisting of the start and end point.	http://doc.perl6.org/type/Range#bounds
bounds	R	Range.bounds										
Range.list	A			Perl 6 Range							<pre><code>method list(Range:D:) returns List:D</code></pre>Generates the list of elements that the range represents.	http://doc.perl6.org/type/Range#list
Range.flat	A			Perl 6 Range							<pre><code>method flat(Range:D:) returns List:D</code></pre>Generates the list of elements that the range represents.	http://doc.perl6.org/type/Range#flat
flat	R	Range.flat										
Range.of	R	Positional.of										
Range.ACCEPTS	R	Any.ACCEPTS										
Range.any	R	Any.any										
Range.all	R	Any.all										
Range.one	R	Any.one										
Range.none	R	Any.none										
Range.defined	R	Mu.defined										
Range.Bool	R	Mu.Bool										
Range.Str	R	Mu.Str										
Range.gist	R	Mu.gist										
Range.perl	R	Mu.perl										
Range.clone	R	Mu.clone										
Range.new	R	Mu.new										
Range.bless	R	Mu.bless										
Range.CREATE	R	Mu.CREATE										
Range.print	R	Mu.print										
Range.say	R	Mu.say										
Range.ACCEPTS	R	Mu.ACCEPTS										
Range.WHICH	R	Mu.WHICH										
Rat	A			Perl 6 Rat							<pre><code>class Rat is Cool does Rational[Int, UInt64] { ... }</code></pre>Rat objects store rational numbers as a pair of a numerator and denominator. Number literals with a dot but without exponent produce Rats.	http://doc.perl6.org/type/Rat
Rat.new	R	Rational.new										
Rat.numerator	R	Rational.numerator										
Rat.denominator	R	Rational.denominator										
Rat.nude	R	Rational.nude										
Rat.norm	R	Rational.norm										
Rat.ACCEPTS	R	Any.ACCEPTS										
Rat.any	R	Any.any										
Rat.all	R	Any.all										
Rat.one	R	Any.one										
Rat.none	R	Any.none										
Rat.defined	R	Mu.defined										
Rat.Bool	R	Mu.Bool										
Rat.Str	R	Mu.Str										
Rat.gist	R	Mu.gist										
Rat.perl	R	Mu.perl										
Rat.clone	R	Mu.clone										
Rat.new	R	Mu.new										
Rat.bless	R	Mu.bless										
Rat.CREATE	R	Mu.CREATE										
Rat.print	R	Mu.print										
Rat.say	R	Mu.say										
Rat.ACCEPTS	R	Mu.ACCEPTS										
Rat.WHICH	R	Mu.WHICH										
Rational	A			Perl 6 Rational							<pre><code>role Rational[::NuT, ::DenomT] does Real { ... }</code></pre>Rational is the common role for numbers that are stored as pairs of numerator and denominator. It is parameterized by the types of the numerator and denominator.	http://doc.perl6.org/type/Rational
Rational.new	A			Perl 6 Rational							<pre><code>method new(NuT:D $numerator, DenomT:D $denominator) returns Rational:D</code></pre>Creates a new rational object from numerator and denominator.	http://doc.perl6.org/type/Rational#new
Rational.numerator	A			Perl 6 Rational							<pre><code>method numerator(Rational:D:) returns NuT:D</code></pre>Returns the numerator.	http://doc.perl6.org/type/Rational#numerator
numerator	R	Rational.numerator										
Rational.denominator	A			Perl 6 Rational							<pre><code>method denominator(Rational:D:) returns DenomT:D</code></pre>Returns the denominator.	http://doc.perl6.org/type/Rational#denominator
denominator	R	Rational.denominator										
Rational.nude	A			Perl 6 Rational							<pre><code>method nude(Rational:D:) returns Positional</code></pre>Returns a list of the numerator and denominator.	http://doc.perl6.org/type/Rational#nude
nude	R	Rational.nude										
Rational.norm	A			Perl 6 Rational							<pre><code>method norm(Rational:D:) returns Rational:D</code></pre>Returns a normalized Rational object, ie with positive denominator, and numerator and denominator coprime.	http://doc.perl6.org/type/Rational#norm
norm	R	Rational.norm										
Rational.Rat	R	Real.Rat										
Rational.rand	R	Real.rand										
Rational.sign	R	Real.sign										
Rational.round	R	Real.round										
Rational.floor	R	Real.floor										
Rational.ceiling	R	Real.ceiling										
Rational.truncate	R	Real.truncate										
Rational.base	R	Real.base										
Real	A			Perl 6 Real							<pre><code>role Real does Numeric { ... }</code></pre>Common role for non-Complex numbers.	http://doc.perl6.org/type/Real
Real.Rat	A			Perl 6 Real							<pre><code>method Rat(Real:D: Real $epsilon = 1e-6)</code></pre>Converts the number to a Rat with the precision $epsilon.	http://doc.perl6.org/type/Real#Rat
Real.rand	A			Perl 6 Real							<pre><code>sub term:&lt;rand&gt; returns Num:D<br>method rand(Real:D:) returns Real:D</code></pre>Returns a pseudo-random number between zero and the number.	http://doc.perl6.org/type/Real#rand
rand	R	Real.rand										
Real.sign	A			Perl 6 Real							<pre><code>method sign(Real:D:)</code></pre>Returns -1 if the number is negative, 0 if it is zero and 1 otherwise.	http://doc.perl6.org/type/Real#sign
sign	R	Real.sign										
Real.round	A			Perl 6 Real							<pre><code>method round(Real:D: $scale = 1)</code></pre>Rounds the number to scale $scale. If $scale is 1, rounds to an integer. If scale is 0.1, rounds to one digit after the comma etc.	http://doc.perl6.org/type/Real#round
round	R	Real.round										
Real.floor	A			Perl 6 Real							<pre><code>method floor(Real:D) returns Int:D</code></pre>Return the largest integer not greater than the number.	http://doc.perl6.org/type/Real#floor
floor	R	Real.floor										
Real.ceiling	A			Perl 6 Real							<pre><code>method ceiling(Real:D) returns Int:D</code></pre>Returns the smallest integer not less than the number.	http://doc.perl6.org/type/Real#ceiling
ceiling	R	Real.ceiling										
Real.truncate	A			Perl 6 Real							<pre><code>method truncate(Real:D) returns Int:D</code></pre>Rounds the number towards zero.	http://doc.perl6.org/type/Real#truncate
truncate	R	Real.truncate										
Real.base	A			Perl 6 Real							<pre><code>method base(Real:D: Int:D $base where 2..36) returns Str:D</code></pre>Converts the number to a string, using $base as base. For $base larger than ten, capital latin letters are used.	http://doc.perl6.org/type/Real#base
base	R	Real.base										
Real.Real	R	Numeric.Real										
Real.Int	R	Numeric.Int										
Real.Rat	R	Numeric.Rat										
Real.Num	R	Numeric.Num										
Real.ACCEPTS	R	Numeric.ACCEPTS										
Real.log	R	Numeric.log										
Real.log10	R	Numeric.log10										
Real.exp	R	Numeric.exp										
Real.roots	R	Numeric.roots										
Real.abs	R	Numeric.abs										
Real.sqrt	R	Numeric.sqrt										
Real.conj	R	Numeric.conj										
Real.Bool	R	Numeric.Bool										
Real.succ	R	Numeric.succ										
Real.pred	R	Numeric.pred										
Routine	A			Perl 6 Routine							<pre><code>class Routine is Block { }</code></pre>A Routine is a code object meant for larger unities of code than Block. Routine is the common superclass for Sub and Method, the two primary code objects for code reuse.	http://doc.perl6.org/type/Routine
Routine.multi	A			Perl 6 Routine							<pre><code>method multi(Routine:D:) returns Bool:D</code></pre>Returns True if the routine is a multi sub or method.	http://doc.perl6.org/type/Routine#multi
multi	R	Routine.multi										
Routine.candidates	A			Perl 6 Routine							<pre><code>method candidates(Routine:D:) returns Positional:D</code></pre>Returns a list of multi candidates, or a one-element list with itself if it's not a multi	http://doc.perl6.org/type/Routine#candidates
candidates	R	Routine.candidates										
Routine.wrap	A			Perl 6 Routine							<pre><code>method wrap(Routine:D: &amp;wrapper)</code></pre>Wraps (ie in-place modifies) the routine. That means a call to this routine first calls &amp;wrapper, which then can (but doesn't have to) call the original routine with the callsame, callwith, nextsame and nextwith dispatchers. The return value from the routine is also the return value from the wrapper.	http://doc.perl6.org/type/Routine#wrap
wrap	R	Routine.wrap										
Routine.unwrap	A			Perl 6 Routine							<pre><code>method unwrap(Routine:D: $wraphandler)</code></pre>Restores the original routine after it has been wrapped with wrap.	http://doc.perl6.org/type/Routine#unwrap
unwrap	R	Routine.unwrap										
Routine.yada	A			Perl 6 Routine							<pre><code>method yada(Routine:D:) returns Bool:D</code></pre>Returns True if the routine is a stub	http://doc.perl6.org/type/Routine#yada
yada	R	Routine.yada										
Routine.ACCEPTS	R	Code.ACCEPTS										
Routine.arity	R	Code.arity										
Routine.count	R	Code.count										
Routine.signature	R	Code.signature										
Routine.Str	R	Code.Str										
Routine.ACCEPTS	R	Any.ACCEPTS										
Routine.any	R	Any.any										
Routine.all	R	Any.all										
Routine.one	R	Any.one										
Routine.none	R	Any.none										
Routine.defined	R	Mu.defined										
Routine.Bool	R	Mu.Bool										
Routine.Str	R	Mu.Str										
Routine.gist	R	Mu.gist										
Routine.perl	R	Mu.perl										
Routine.clone	R	Mu.clone										
Routine.new	R	Mu.new										
Routine.bless	R	Mu.bless										
Routine.CREATE	R	Mu.CREATE										
Routine.print	R	Mu.print										
Routine.say	R	Mu.say										
Routine.ACCEPTS	R	Mu.ACCEPTS										
Routine.WHICH	R	Mu.WHICH										
Signature	A			Perl 6 Signature							<pre><code>class Signature { ... }</code></pre>A signature is a static description of the parameter list of a code object. That is, it describes what and how many arguments you need to pass to it for invocation.	http://doc.perl6.org/type/Signature
Signature.params	A			Perl 6 Signature							<pre><code>method params(Signature:D:) returns Positional</code></pre>Returns the list of Parameter objects that make up the signature.	http://doc.perl6.org/type/Signature#params
params	R	Signature.params										
Signature.arity	A			Perl 6 Signature							<pre><code>method arity(Signature:D:) returns Int:D</code></pre>Returns the minimal number of positional arguments required to satisfy the signature.	http://doc.perl6.org/type/Signature#arity
Signature.count	A			Perl 6 Signature							<pre><code>method count(Signature:D:) returns Real:D</code></pre>Returns the maximal number of positional arguments which can be bound to the signature. Returns Inf if there is a slurpy positional parameter.	http://doc.perl6.org/type/Signature#count
Signature.ACCEPTS	R	Any.ACCEPTS										
Signature.any	R	Any.any										
Signature.all	R	Any.all										
Signature.one	R	Any.one										
Signature.none	R	Any.none										
Signature.defined	R	Mu.defined										
Signature.Bool	R	Mu.Bool										
Signature.Str	R	Mu.Str										
Signature.gist	R	Mu.gist										
Signature.perl	R	Mu.perl										
Signature.clone	R	Mu.clone										
Signature.new	R	Mu.new										
Signature.bless	R	Mu.bless										
Signature.CREATE	R	Mu.CREATE										
Signature.print	R	Mu.print										
Signature.say	R	Mu.say										
Signature.ACCEPTS	R	Mu.ACCEPTS										
Signature.WHICH	R	Mu.WHICH										
Str	A			Perl 6 Str							<pre><code>class Str is Cool does Stringy { }</code></pre>Built-in class for strings. Objects of type Str are immutable.	http://doc.perl6.org/type/Str
Str.chop	A			Perl 6 Str							<pre><code>multi sub    chop(Str:D)  returns Str:D<br>multi method chop(Str:D:) returns Str:D</code></pre>Returns the string with one character removed from the end.	http://doc.perl6.org/type/Str#chop
chop	R	Str.chop										
Str.chomp	A			Perl 6 Str							<pre><code>multi sub    chomp(Str:D ) returns Str:D<br>multi method chomp(Str:D:) returns Str:D</code></pre>Returns the string with a logical newline removed from the end.	http://doc.perl6.org/type/Str#chomp
chomp	R	Str.chomp										
Str.lc	A			Perl 6 Str							<pre><code>multi sub    lc(Str:D ) returns Str:D<br>multi method lc(Str:D:) returns Str:D</code></pre>Returns a lower-case version of the string.	http://doc.perl6.org/type/Str#lc
lc	R	Str.lc										
Str.uc	A			Perl 6 Str							<pre><code>multi sub    uc(Str:D ) returns Str:D<br>multi method uc(Str:D:) returns Str:D</code></pre>Returns an uppercase version of the string.	http://doc.perl6.org/type/Str#uc
uc	R	Str.uc										
Str.fc	A			Perl 6 Str							<pre><code>multi sub    fc(Str:D ) returns Str:D<br>multi method fc(Str:D:) returns Str:D </code></pre>Does a Unicode "fold case" operation suitable for doing caseless string comparisons. (In general, the returned string is unlikely to be useful for any purpose other than comparison.)	http://doc.perl6.org/type/Str#fc
fc	R	Str.fc										
Str.tc	A			Perl 6 Str							<pre><code>multi sub    tc(Str:D ) returns Str:D<br>multi method tc(Str:D:) returns Str:D</code></pre>Does a Unicode "titlecase" operation, that is changes the first character in the string to title case, or to upper case if the character has no title case mapping	http://doc.perl6.org/type/Str#tc
tc	R	Str.tc										
Str.tclc	A			Perl 6 Str							<pre><code>multi sub    tclc(Str:D ) returns Str:D<br>multi method tclc(Str:D:) returns Str:D</code></pre>Turns the first character to title case, and all other characters to lower case	http://doc.perl6.org/type/Str#tclc
tclc	R	Str.tclc										
Str.tcuc	A			Perl 6 Str							<pre><code>multi sub    tcuc(Str:D ) returns Str:D<br>multi method tcuc(Str:D:) returns Str:D</code></pre>Turns the first character to title case, and all other characters to upper case	http://doc.perl6.org/type/Str#tcuc
tcuc	R	Str.tcuc										
Str.wordcase	A			Perl 6 Str							<pre><code>multi sub    wordcase(Str:D  :&amp;filter = &amp;lc, :%exceptions = set()) returns Str<br>multi method wordcase(Str:D: :&amp;filter = &amp;lc, :%exceptions = set()) returns Str</code></pre>Performs a Unicode titlecase operation on the first character of each word of the string (as defined by a regex « boundary), and forces the rest of the letters through a filter that defaults to lc. After this operation, if any exceptions are supplied and if the word is found in the set of exceptions, the first character is also forced through the filter. Note that the exceptions must be spelled with an initial titlecase, such as "By" or "And", to produce "by" or "and".	http://doc.perl6.org/type/Str#wordcase
wordcase	R	Str.wordcase										
Str.lcfirst	A			Perl 6 Str							Perl 6 does not have a lcfirst function.	http://doc.perl6.org/type/Str#lcfirst
lcfirst	R	Str.lcfirst										
Str.ucfirst	A			Perl 6 Str							Perl 6 does not have a ucfirst function. See X&lt;tc&gt;.	http://doc.perl6.org/type/Str#ucfirst
ucfirst	R	Str.ucfirst										
Str.length	A			Perl 6 Str							Perl 6 does not have a length function. See X&lt;chars&gt; or X&lt;elems&gt;.	http://doc.perl6.org/type/Str#length
length	R	Str.length										
Str.chars	A			Perl 6 Str							<pre><code>multi sub    chars(Str:D ) returns Int:D<br>multi method chars(Str:D:) returns Int:D</code></pre>Returns the number of characters in the string in the current (lexically scoped) idea of what a normal character is, usually graphemes.	http://doc.perl6.org/type/Str#chars
chars	R	Str.chars										
Str.encode	A			Perl 6 Str							<pre><code>multi method encode(Str:D: $encoding = $?ENC, $nf = $?NF) returns Buf</code></pre>Returns a Buf which represents the original string in the given encoding and normal form. The actual return type is as specific as possible, so $str.encode('UTF-8') returns a utf8 object, $str.encode('ISO-8859-1') a buf8.	http://doc.perl6.org/type/Str#encode
encode	R	Str.encode										
Str.index	A			Perl 6 Str							<pre><code>multi sub    index(Str:D, Str:D $needle, Int $startpos = 0) returns StrPos<br>multi method index(Str:D: Str:D $needle, Int $startpos = 0) returns StrPos</code></pre>Searches for $needle in the string starting from $startpos. It returns the offset into the string where $needle was found, and an undefined value if it was not found.	http://doc.perl6.org/type/Str#index
index	R	Str.index										
Str.rindex	A			Perl 6 Str							<pre><code>multi sub    rindex(Str:D $haystack, Str:D $needle, Int $startpos = $haystack.chars) returns StrPos<br>multi method rindex(Str:D $haystack: Str:D $needle, Int $startpos = $haystack.chars) returns StrPos</code></pre>Returns the last position of $needle in $haystack not after $startpos. Returns an undefined value if $needle wasn't found.	http://doc.perl6.org/type/Str#rindex
rindex	R	Str.rindex										
Str.split	A			Perl 6 Str							<pre><code>multi sub    split(  Str:D $delimiter, Str:D $input, $limit = Inf, :$all) returns Positional<br>multi sub    split(Regex:D $delimiter, Str:D $input, $limit = Inf, :$all) returns Positional</code></pre>Splits a string up into pieces based on delimiters found in the string.	http://doc.perl6.org/type/Str#split
split	R	Str.split										
Str.comb	A			Perl 6 Str							<pre><code>multi sub    comb(Str:D   $matcher, Str:D $input, $limit = Inf, Bool :$match) <br>multi sub    comb(Regex:D $matcher, Str:D $input, $limit = Inf, Bool :$match) <br>multi method comb(Str:D $input:)<br>multi method comb(Str:D $input: Str:D   $matcher, $limit = Inf, Bool :$match) <br>multi method comb(Str:D $input: Regex:D $matcher, $limit = Inf, Bool :$match) </code></pre>Searches for $matcher in $input and returns a list of all matches (as Str by default, or as Match if $match is True), limited to at most $limit matches.	http://doc.perl6.org/type/Str#comb
comb	R	Str.comb										
Str.lines	A			Perl 6 Str							<pre><code>multi sub    lines(Str:D $input, $limit = Inf) returns Positional<br>multi method lines(Str:D $input: $limit = Inf) returns Positional</code></pre>Returns a list of lines (without trailing newline characters), i.e. the same as a call to $input.comb( / ^^ &#92;N* /, $limit ) would.	http://doc.perl6.org/type/Str#lines
lines	R	Str.lines										
Str.words	A			Perl 6 Str							<pre><code>multi sub    words(Str:D $input, $limit = Inf) returns Positional<br>multi method words(Str:D $input: $limit = Inf) returns Positional</code></pre>Returns a list of non-whitespace bits, i.e. the same as a call to $input.comb( / &#92;S+ /, $limit ) would.	http://doc.perl6.org/type/Str#words
words	R	Str.words										
Str.flip	A			Perl 6 Str							<pre><code>multi sub    flip(Str:D ) returns Str:D<br>multi method flip(Str:D:) returns Str:D</code></pre>Returns the string reversed character by character.	http://doc.perl6.org/type/Str#flip
flip	R	Str.flip										
Str.sprintf	A			Perl 6 Str							<pre><code>multi sub sprintf ( Str:D $format, *@args) returns Str:D</code></pre>This function is mostly identical to the C library sprintf function.	http://doc.perl6.org/type/Str#sprintf
sprintf	R	Str.sprintf										
Str.substr	A			Perl 6 Str							<pre><code>multi sub    substr(Str:D $s, Int:D $from, Int:D $chars = $s.chars - $from) returns Str:D<br>multi method substr(Str:D $s: Int:D $from, Int:D $chars = $s.chars - $from) returns Str:D</code></pre>Returns a part of the string, starting from the character with index $from (where the first character has index 0) and with length $chars.	http://doc.perl6.org/type/Str#substr
substr	R	Str.substr										
Str.succ	A			Perl 6 Str							<pre><code>method succ(Str:D) returns Str:D</code></pre>Returns the string incremented by one.	http://doc.perl6.org/type/Str#succ
Str.pred	A			Perl 6 Str							<pre><code>method pred(Str:D:) returns Str:D</code></pre>Returns the string decremented by one.	http://doc.perl6.org/type/Str#pred
Str.ord	A			Perl 6 Str							<pre><code>multi sub ord   (Str:D)  returns Int:D<br>multi method ord(Str:D:) returns Int:D</code></pre>Returns the codepoint number of the first character of the string	http://doc.perl6.org/type/Str#ord
ord	R	Str.ord										
Str.ords	A			Perl 6 Str							<pre><code>multi method ords(Str:D:) returns Positional</code></pre>Returns a list of codepoint numbers, one for each character in the string.	http://doc.perl6.org/type/Str#ords
ords	R	Str.ords										
Str.trim	A			Perl 6 Str							<pre><code>method trim(Str:D:) returns Str</code></pre>Remove leading and trailing white-spces. It can be use both as a method on strings and as a function. When used as a method it will return the trimmed string. In order to do in-place trimming, once needs to write .=trim	http://doc.perl6.org/type/Str#trim
trim	R	Str.trim										
Str.trim-trailing	A			Perl 6 Str							Remove the white-space charecters from the end of a string. See also trim.	http://doc.perl6.org/type/Str#trim-trailing
trim-trailing	R	Str.trim-trailing										
Str.trim-leading	A			Perl 6 Str							Remove the white-space charecters from the beginning of a string. See also trim.	http://doc.perl6.org/type/Str#trim-leading
trim-leading	R	Str.trim-leading										
Str.ACCEPTS	R	Any.ACCEPTS										
Str.any	R	Any.any										
Str.all	R	Any.all										
Str.one	R	Any.one										
Str.none	R	Any.none										
Str.defined	R	Mu.defined										
Str.Bool	R	Mu.Bool										
Str.Str	R	Mu.Str										
Str.gist	R	Mu.gist										
Str.perl	R	Mu.perl										
Str.clone	R	Mu.clone										
Str.new	R	Mu.new										
Str.bless	R	Mu.bless										
Str.CREATE	R	Mu.CREATE										
Str.print	R	Mu.print										
Str.say	R	Mu.say										
Str.ACCEPTS	R	Mu.ACCEPTS										
Str.WHICH	R	Mu.WHICH										
Stringy	A			Perl 6 Stringy							<pre><code>role Stringy { ... }</code></pre>Common role for string types (such as Str) and types that can act as strings (such as Cat).	http://doc.perl6.org/type/Stringy
Version	A			Perl 6 Version							<pre><code>class Version { }</code></pre>Version objects identify version of software components (and potentially other entities). Perl 6 uses them internally for versioning modules.	http://doc.perl6.org/type/Version
Version.new	A			Perl 6 Version							<pre><code>method new(Str:d $s)</code></pre>Creates a Version from a string $s. The string is combed for the numeric, alphabetic, and wildcard components of the version object. Any characters other than alphanumerics and asterisks are assumed to be equivalent to a dot. A dot is also assumed between any adjacent numeric and alphabetic characters.	http://doc.perl6.org/type/Version#new
Version.parts	A			Perl 6 Version							<pre><code>method parts(Version:D:) returns List:D</code></pre>Returns the list of parts that make up this Version object	http://doc.perl6.org/type/Version#parts
parts	R	Version.parts										
Version.plus	A			Perl 6 Version							<pre><code>method plus(Version:D:) returns Bool:D</code></pre>Returns True if comparisons against this version allow larger versions too.	http://doc.perl6.org/type/Version#plus
plus	R	Version.plus										
Version.ACCEPTS	R	Any.ACCEPTS										
Version.any	R	Any.any										
Version.all	R	Any.all										
Version.one	R	Any.one										
Version.none	R	Any.none										
Version.defined	R	Mu.defined										
Version.Bool	R	Mu.Bool										
Version.Str	R	Mu.Str										
Version.gist	R	Mu.gist										
Version.perl	R	Mu.perl										
Version.clone	R	Mu.clone										
Version.new	R	Mu.new										
Version.bless	R	Mu.bless										
Version.CREATE	R	Mu.CREATE										
Version.print	R	Mu.print										
Version.say	R	Mu.say										
Version.ACCEPTS	R	Mu.ACCEPTS										
Version.WHICH	R	Mu.WHICH										
Whatever	A			Perl 6 Whatever							<pre><code>class Whatever { }</code></pre>Whatever is a class whose objects don't really do much; it gets its semantic from other routines that accept Whatever-objects as markers to do something special. The * literal in term position creates a Whatever object.	http://doc.perl6.org/type/Whatever
Whatever.ACCEPTS	A			Perl 6 Whatever							<pre><code>multi method ACCEPTS(Whatever:D: Mu $other)</code></pre>Returns True.	http://doc.perl6.org/type/Whatever#ACCEPTS
Whatever.ACCEPTS	R	Any.ACCEPTS										
Whatever.any	R	Any.any										
Whatever.all	R	Any.all										
Whatever.one	R	Any.one										
Whatever.none	R	Any.none										
Whatever.defined	R	Mu.defined										
Whatever.Bool	R	Mu.Bool										
Whatever.Str	R	Mu.Str										
Whatever.gist	R	Mu.gist										
Whatever.perl	R	Mu.perl										
Whatever.clone	R	Mu.clone										
Whatever.new	R	Mu.new										
Whatever.bless	R	Mu.bless										
Whatever.CREATE	R	Mu.CREATE										
Whatever.print	R	Mu.print										
Whatever.say	R	Mu.say										
Whatever.ACCEPTS	R	Mu.ACCEPTS										
Whatever.WHICH	R	Mu.WHICH										
WhateverCode	A			Perl 6 WhateverCode							<pre><code>class WhateverCode is Code { }</code></pre>WhateverCode objects are the result of Whatever-currying. See the Whatever documentation for details.	http://doc.perl6.org/type/WhateverCode
WhateverCode.ACCEPTS	R	Code.ACCEPTS										
WhateverCode.arity	R	Code.arity										
WhateverCode.count	R	Code.count										
WhateverCode.signature	R	Code.signature										
WhateverCode.Str	R	Code.Str										
WhateverCode.ACCEPTS	R	Any.ACCEPTS										
WhateverCode.any	R	Any.any										
WhateverCode.all	R	Any.all										
WhateverCode.one	R	Any.one										
WhateverCode.none	R	Any.none										
WhateverCode.defined	R	Mu.defined										
WhateverCode.Bool	R	Mu.Bool										
WhateverCode.Str	R	Mu.Str										
WhateverCode.gist	R	Mu.gist										
WhateverCode.perl	R	Mu.perl										
WhateverCode.clone	R	Mu.clone										
WhateverCode.new	R	Mu.new										
WhateverCode.bless	R	Mu.bless										
WhateverCode.CREATE	R	Mu.CREATE										
WhateverCode.print	R	Mu.print										
WhateverCode.say	R	Mu.say										
WhateverCode.ACCEPTS	R	Mu.ACCEPTS										
WhateverCode.WHICH	R	Mu.WHICH										
X::AdHoc	A			Perl 6 X::AdHoc							<pre><code>class X::AdHoc is Exception { ... }</code></pre>X::AdHoc is the type into which objects are wrapped if they are thrown as exceptions, but don't inherit from Exception.	http://doc.perl6.org/type/X%3A%3AAdHoc
X::AdHoc.payload	A			Perl 6 X::AdHoc							<pre><code>method payload(X::AdHoc:D)</code></pre>Returns the original object which was passed to die.	http://doc.perl6.org/type/X%3A%3AAdHoc#payload
payload	R	X::AdHoc.payload										
X::AdHoc.message	R	Exception.message										
X::AdHoc.backtrace	R	Exception.backtrace										
X::AdHoc.throw	R	Exception.throw										
X::AdHoc.rethrow	R	Exception.rethrow										
X::AdHoc.fail	R	Exception.fail										
X::AdHoc.gist	R	Exception.gist										
X::AdHoc.ACCEPTS	R	Any.ACCEPTS										
X::AdHoc.any	R	Any.any										
X::AdHoc.all	R	Any.all										
X::AdHoc.one	R	Any.one										
X::AdHoc.none	R	Any.none										
X::AdHoc.defined	R	Mu.defined										
X::AdHoc.Bool	R	Mu.Bool										
X::AdHoc.Str	R	Mu.Str										
X::AdHoc.gist	R	Mu.gist										
X::AdHoc.perl	R	Mu.perl										
X::AdHoc.clone	R	Mu.clone										
X::AdHoc.new	R	Mu.new										
X::AdHoc.bless	R	Mu.bless										
X::AdHoc.CREATE	R	Mu.CREATE										
X::AdHoc.print	R	Mu.print										
X::AdHoc.say	R	Mu.say										
X::AdHoc.ACCEPTS	R	Mu.ACCEPTS										
X::AdHoc.WHICH	R	Mu.WHICH										
X::Comp	A			Perl 6 X::Comp							<pre><code>role X::Comp is Exception { }</code></pre>Common role for compile-time errors.	http://doc.perl6.org/type/X%3A%3AComp
X::Comp.message	R	Exception.message										
X::Comp.backtrace	R	Exception.backtrace										
X::Comp.throw	R	Exception.throw										
X::Comp.rethrow	R	Exception.rethrow										
X::Comp.fail	R	Exception.fail										
X::Comp.gist	R	Exception.gist										
X::Comp.ACCEPTS	R	Any.ACCEPTS										
X::Comp.any	R	Any.any										
X::Comp.all	R	Any.all										
X::Comp.one	R	Any.one										
X::Comp.none	R	Any.none										
X::Comp.defined	R	Mu.defined										
X::Comp.Bool	R	Mu.Bool										
X::Comp.Str	R	Mu.Str										
X::Comp.gist	R	Mu.gist										
X::Comp.perl	R	Mu.perl										
X::Comp.clone	R	Mu.clone										
X::Comp.new	R	Mu.new										
X::Comp.bless	R	Mu.bless										
X::Comp.CREATE	R	Mu.CREATE										
X::Comp.print	R	Mu.print										
X::Comp.say	R	Mu.say										
X::Comp.ACCEPTS	R	Mu.ACCEPTS										
X::Comp.WHICH	R	Mu.WHICH										
X::Syntax	A			Perl 6 X::Syntax							<pre><code>role X::Syntax does X::Comp { }</code></pre>Common role for syntax errors thrown by the compiler.	http://doc.perl6.org/type/X%3A%3ASyntax
X::Syntax.message	R	Exception.message										
X::Syntax.backtrace	R	Exception.backtrace										
X::Syntax.throw	R	Exception.throw										
X::Syntax.rethrow	R	Exception.rethrow										
X::Syntax.fail	R	Exception.fail										
X::Syntax.gist	R	Exception.gist										
X::Syntax.ACCEPTS	R	Any.ACCEPTS										
X::Syntax.any	R	Any.any										
X::Syntax.all	R	Any.all										
X::Syntax.one	R	Any.one										
X::Syntax.none	R	Any.none										
X::Syntax.defined	R	Mu.defined										
X::Syntax.Bool	R	Mu.Bool										
X::Syntax.Str	R	Mu.Str										
X::Syntax.gist	R	Mu.gist										
X::Syntax.perl	R	Mu.perl										
X::Syntax.clone	R	Mu.clone										
X::Syntax.new	R	Mu.new										
X::Syntax.bless	R	Mu.bless										
X::Syntax.CREATE	R	Mu.CREATE										
X::Syntax.print	R	Mu.print										
X::Syntax.say	R	Mu.say										
X::Syntax.ACCEPTS	R	Mu.ACCEPTS										
X::Syntax.WHICH	R	Mu.WHICH										
X::Syntax::NegatedPair	A			Perl 6 X::Syntax::NegatedPair							<pre><code>class X::Syntax::NegatedPair does X::Syntax { }</code></pre>Thrown if a colonpair illegally has a value, for example :!a(1). This is an error because the ! negation implies that the value is False.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3ANegatedPair
X::Syntax::NegatedPair.message	R	Exception.message										
X::Syntax::NegatedPair.backtrace	R	Exception.backtrace										
X::Syntax::NegatedPair.throw	R	Exception.throw										
X::Syntax::NegatedPair.rethrow	R	Exception.rethrow										
X::Syntax::NegatedPair.fail	R	Exception.fail										
X::Syntax::NegatedPair.gist	R	Exception.gist										
X::Syntax::NegatedPair.ACCEPTS	R	Any.ACCEPTS										
X::Syntax::NegatedPair.any	R	Any.any										
X::Syntax::NegatedPair.all	R	Any.all										
X::Syntax::NegatedPair.one	R	Any.one										
X::Syntax::NegatedPair.none	R	Any.none										
X::Syntax::NegatedPair.defined	R	Mu.defined										
X::Syntax::NegatedPair.Bool	R	Mu.Bool										
X::Syntax::NegatedPair.Str	R	Mu.Str										
X::Syntax::NegatedPair.gist	R	Mu.gist										
X::Syntax::NegatedPair.perl	R	Mu.perl										
X::Syntax::NegatedPair.clone	R	Mu.clone										
X::Syntax::NegatedPair.new	R	Mu.new										
X::Syntax::NegatedPair.bless	R	Mu.bless										
X::Syntax::NegatedPair.CREATE	R	Mu.CREATE										
X::Syntax::NegatedPair.print	R	Mu.print										
X::Syntax::NegatedPair.say	R	Mu.say										
X::Syntax::NegatedPair.ACCEPTS	R	Mu.ACCEPTS										
X::Syntax::NegatedPair.WHICH	R	Mu.WHICH										
